/*  Creator	: Matthieu (Rubisetcie) Carteron
	Language: C++
*/

#include <SFML/Graphics.hpp>
#include <fstream>
#include <cmath>

#ifdef DEBUGMODE
#include <iostream>
#endif

extern "C"
{
    #include <FMODEx/fmod.h>
    #include <windows.h>
    #include <shlwapi.h>
    #include <shlobj.h>
}

#include "../../Headers/globals.hpp"
#include "../../Headers/Graphics/button.hpp"
#include "../../Headers/Graphics/regulator.hpp"
#include "../../Headers/Graphics/checkbutton.hpp"
#include "../../Headers/Graphics/elementbutton.hpp"
#include "../../Headers/Graphics/infobutton.hpp"
#include "../../Headers/Graphics/tile.hpp"
#include "../../Headers/Graphics/entity.hpp"
#include "../../Headers/Graphics/entwarps.hpp"
#include "../../Headers/Graphics/entityj.hpp"
#include "../../Headers/Graphics/entitymultitext.hpp"
#include "../../Headers/Graphics/entityrotation.hpp"
#include "../../Headers/Graphics/levelendentity.hpp"
#include "../../Headers/Graphics/trigger.hpp"
#include "../../Headers/Graphics/dragger.hpp"
#include "../../Headers/Graphics/horizontalplatformentity.hpp"
#include "../../Headers/Graphics/verticalplatformentity.hpp"
#include "../../Headers/Graphics/fallplatformentity.hpp"
#include "../../Headers/Graphics/horizontalenemyentity.hpp"
#include "../../Headers/Graphics/verticalenemyentity.hpp"
#include "../../Headers/Graphics/podobooentity.hpp"
#include "../../Headers/Graphics/podoboodentity.hpp"
#include "../../Headers/Graphics/podoboolentity.hpp"
#include "../../Headers/Graphics/podoboorentity.hpp"
#include "../../Headers/Graphics/rotodiscentity.hpp"
#include "../../Headers/Graphics/centipedeentity.hpp"
#include "../../Headers/Core/matrix.hpp"

#include "../../Headers/Bonuses/bonus_mushroomblock.hpp"
#include "../../Headers/Bonuses/bonus_flowerblock.hpp"
#include "../../Headers/Bonuses/bonus_beetblock.hpp"
#include "../../Headers/Bonuses/bonus_luiblock.hpp"
#include "../../Headers/Bonuses/bonus_starblock.hpp"
#include "../../Headers/Bonuses/bonus_lifeblock.hpp"
#include "../../Headers/Bonuses/bonus_poisonblock.hpp"
#include "../../Headers/Bonuses/bonus_mushroomblockinv.hpp"
#include "../../Headers/Bonuses/bonus_flowerblockinv.hpp"
#include "../../Headers/Bonuses/bonus_beetblockinv.hpp"
#include "../../Headers/Bonuses/bonus_luiblockinv.hpp"
#include "../../Headers/Bonuses/bonus_starblockinv.hpp"
#include "../../Headers/Bonuses/bonus_lifeblockinv.hpp"
#include "../../Headers/Bonuses/bonus_poisonblockinv.hpp"
#include "../../Headers/Bonuses/bonus_coin.hpp"
#include "../../Headers/Bonuses/bonus_coinblock.hpp"
#include "../../Headers/Bonuses/bonus_coinblockinv.hpp"
#include "../../Headers/Bonuses/bonus_brick.hpp"
#include "../../Headers/Bonuses/bonus_coinbrick.hpp"
#include "../../Headers/Bonuses/bonus_switch.hpp"
#include "../../Headers/Bonuses/bonus_toggle.hpp"

#include "../../Headers/Sceneries/scenery_static.hpp"
#include "../../Headers/Sceneries/scenery_bush.hpp"
#include "../../Headers/Sceneries/scenery_cloud.hpp"
#include "../../Headers/Sceneries/scenery_scroll.hpp"
#include "../../Headers/Sceneries/scenery_waterfall.hpp"

#include "../../Headers/Marks/mark_waterplane.hpp"
#include "../../Headers/Marks/mark_lavaplane.hpp"
#include "../../Headers/Marks/mark_checkpoint.hpp"
#include "../../Headers/Marks/mark_levelend.hpp"
#include "../../Headers/Marks/mark_platformredmoveh.hpp"
#include "../../Headers/Marks/mark_platformredtouchh.hpp"
#include "../../Headers/Marks/mark_platformredmovev.hpp"
#include "../../Headers/Marks/mark_platformredtouchv.hpp"
#include "../../Headers/Marks/mark_platformredfall.hpp"
#include "../../Headers/Marks/mark_platformshortmoveh.hpp"
#include "../../Headers/Marks/mark_platformshorttouchh.hpp"
#include "../../Headers/Marks/mark_platformshortmovev.hpp"
#include "../../Headers/Marks/mark_platformshorttouchv.hpp"
#include "../../Headers/Marks/mark_platformshortfall.hpp"
#include "../../Headers/Marks/mark_platformcloudmoveh.hpp"
#include "../../Headers/Marks/mark_platformcloudtouchh.hpp"
#include "../../Headers/Marks/mark_platformcloudmovev.hpp"
#include "../../Headers/Marks/mark_platformcloudtouchv.hpp"
#include "../../Headers/Marks/mark_platformcloudfall.hpp"
#include "../../Headers/Marks/mark_platformstonemoveh.hpp"
#include "../../Headers/Marks/mark_platformstonetouchh.hpp"
#include "../../Headers/Marks/mark_platformstonemovev.hpp"
#include "../../Headers/Marks/mark_platformstonetouchv.hpp"
#include "../../Headers/Marks/mark_platformstonefall.hpp"
#include "../../Headers/Marks/mark_spring.hpp"

#include "../../Headers/Sprites/sprite_mushroom.hpp"
#include "../../Headers/Sprites/sprite_flower.hpp"
#include "../../Headers/Sprites/sprite_beet.hpp"
#include "../../Headers/Sprites/sprite_lui.hpp"
#include "../../Headers/Sprites/sprite_star.hpp"
#include "../../Headers/Sprites/sprite_life.hpp"
#include "../../Headers/Sprites/sprite_goomba.hpp"
#include "../../Headers/Sprites/sprite_goombagrey.hpp"
#include "../../Headers/Sprites/sprite_spiny.hpp"
#include "../../Headers/Sprites/sprite_spinygrey.hpp"
#include "../../Headers/Sprites/sprite_buzzybeetle.hpp"
#include "../../Headers/Sprites/sprite_koopagreen.hpp"
#include "../../Headers/Sprites/sprite_koopared.hpp"
#include "../../Headers/Sprites/sprite_koopablue.hpp"
#include "../../Headers/Sprites/sprite_koopayellow.hpp"
#include "../../Headers/Sprites/sprite_paratroopagreenh.hpp"
#include "../../Headers/Sprites/sprite_paratrooparedh.hpp"
#include "../../Headers/Sprites/sprite_paratroopablueh.hpp"
#include "../../Headers/Sprites/sprite_paratroopagreenv.hpp"
#include "../../Headers/Sprites/sprite_paratrooparedv.hpp"
#include "../../Headers/Sprites/sprite_paratroopabluev.hpp"
#include "../../Headers/Sprites/sprite_paratroopagreenj.hpp"
#include "../../Headers/Sprites/sprite_paratrooparedj.hpp"
#include "../../Headers/Sprites/sprite_paratroopabluej.hpp"
#include "../../Headers/Sprites/sprite_paratroopayellow.hpp"
#include "../../Headers/Sprites/sprite_plantgreent.hpp"
#include "../../Headers/Sprites/sprite_plantgreenl.hpp"
#include "../../Headers/Sprites/sprite_plantgreenr.hpp"
#include "../../Headers/Sprites/sprite_plantgreenb.hpp"
#include "../../Headers/Sprites/sprite_plantfiret.hpp"
#include "../../Headers/Sprites/sprite_plantfirel.hpp"
#include "../../Headers/Sprites/sprite_plantfirer.hpp"
#include "../../Headers/Sprites/sprite_plantfireb.hpp"
#include "../../Headers/Sprites/sprite_plantgreyt.hpp"
#include "../../Headers/Sprites/sprite_plantgreyl.hpp"
#include "../../Headers/Sprites/sprite_plantgreyr.hpp"
#include "../../Headers/Sprites/sprite_plantgreyb.hpp"
#include "../../Headers/Sprites/sprite_staticplant.hpp"
#include "../../Headers/Sprites/sprite_cheepcheepred.hpp"
#include "../../Headers/Sprites/sprite_cheepcheepgreen.hpp"
#include "../../Headers/Sprites/sprite_cheepcheepblue.hpp"
#include "../../Headers/Sprites/sprite_cheepcheepyellow.hpp"
#include "../../Headers/Sprites/sprite_hammerbro.hpp"
#include "../../Headers/Sprites/sprite_silverbro.hpp"
#include "../../Headers/Sprites/sprite_firebro.hpp"
#include "../../Headers/Sprites/sprite_beetbro.hpp"
#include "../../Headers/Sprites/sprite_spikebro.hpp"
#include "../../Headers/Sprites/sprite_lakituwhite.hpp"
#include "../../Headers/Sprites/sprite_lakitudark.hpp"
#include "../../Headers/Sprites/sprite_lakitugold.hpp"
#include "../../Headers/Sprites/sprite_poison.hpp"
#include "../../Headers/Sprites/sprite_thwompb.hpp"
#include "../../Headers/Sprites/sprite_thwompt.hpp"
#include "../../Headers/Sprites/sprite_bowser.hpp"

#include "../../Headers/Hazards/hazard_lavat.hpp"
#include "../../Headers/Hazards/hazard_laval.hpp"
#include "../../Headers/Hazards/hazard_lavar.hpp"
#include "../../Headers/Hazards/hazard_lavab.hpp"
#include "../../Headers/Hazards/hazard_podoboot.hpp"
#include "../../Headers/Hazards/hazard_podoboob.hpp"
#include "../../Headers/Hazards/hazard_podobool.hpp"
#include "../../Headers/Hazards/hazard_podoboor.hpp"
#include "../../Headers/Hazards/hazard_podoboofountaint.hpp"
#include "../../Headers/Hazards/hazard_podoboofountainb.hpp"
#include "../../Headers/Hazards/hazard_podoboofountainl.hpp"
#include "../../Headers/Hazards/hazard_podoboofountainr.hpp"
#include "../../Headers/Hazards/hazard_spike.hpp"
#include "../../Headers/Hazards/hazard_cannonht.hpp"
#include "../../Headers/Hazards/hazard_cannonhb.hpp"
#include "../../Headers/Hazards/hazard_cannonvl.hpp"
#include "../../Headers/Hazards/hazard_cannonvr.hpp"
#include "../../Headers/Hazards/hazard_cannonhominght.hpp"
#include "../../Headers/Hazards/hazard_cannonhominghb.hpp"
#include "../../Headers/Hazards/hazard_cannonhomingvl.hpp"
#include "../../Headers/Hazards/hazard_cannonhomingvr.hpp"
#include "../../Headers/Hazards/hazard_rotodiscc.hpp"
#include "../../Headers/Hazards/hazard_rotodisccc.hpp"
#include "../../Headers/Hazards/hazard_rotodiscrc.hpp"
#include "../../Headers/Hazards/hazard_rotodiscrcc.hpp"
#include "../../Headers/Hazards/hazard_lavalauncherl.hpp"
#include "../../Headers/Hazards/hazard_lavalauncherr.hpp"
#include "../../Headers/Hazards/hazard_lavalaunchervl.hpp"
#include "../../Headers/Hazards/hazard_lavalaunchervr.hpp"
#include "../../Headers/Hazards/hazard_spikelaunchert.hpp"
#include "../../Headers/Hazards/hazard_spikelauncherb.hpp"
#include "../../Headers/Hazards/hazard_centipede.hpp"

#define FADESPEED 4
#define CAMSPEED 8
#define CAMACCEL 0.25
#define CAMDECEL 0.15
#define MOUSEINFLUENCE 24

using namespace sf;
using namespace std;

static bool InitAssets();
static void UpdateAssetsEdition();
static void UpdateAssetsLiquids();
static void UpdateAssetsTileset();
static void UpdateAssetsGradient();

static void Selection_Tiles();
static void Selection_Essential();
static void Selection_Platforms();
static void Selection_Bonus();
static void Selection_Pipes();
static void Selection_Sceneries();
static void Selection_Enemies();
static void Selection_Hazards();
static void Selection_Warps();

static void Placements_Tiles(Matrix* currentMatrix, list<Tile>& currentList);
static void Placements_Essentials(Matrix* currentMatrix, Matrix* tileMatrix, list<Entity*>& currentList);
static void Placements_Platforms(Matrix* currentMatrix, Matrix* tileMatrix, list<Entity*>& currentList);
static void Placements_Bonus(Matrix* currentMatrix, Matrix* tileMatrix, list<Entity*>& currentList);
static void Placements_Pipes(Matrix* tileMatrix, list<Tile>& currentList);
static void Placements_Sceneries(Matrix* currentMatrix, list<Entity*>& currentList);
static void Placements_Enemies(Matrix* currentMatrix, Matrix* tileMatrix, list<Entity*>& currentList);
static void Placements_Hazards(Matrix* currentMatrix, Matrix* tileMatrix, list<Entity*>& currentList);
static void Placements_Warps(list<EntWarps>& currentList);

static void Erasment_Tiles(Matrix* currentMatrix, list<Tile>& currentList);
static void Erasment_Entities(Matrix* currentMatrix, Matrix* tileMatrix);
static void Erasment_Pipes(Matrix* currentMatrix, Matrix* entMatrix, list<Tile>& currentList);
static void Erasment_Warps(list<EntWarps>& currentList);

static void checkResources(LPCSTR levelURL, bool saveAs);

static void addNewResource(string filename, unsigned short id);
static void removeResource(unsigned short id);

Vertex backGradient[4];
Vertex gradientPreview[4];

Texture* gridTex;
Texture* toolboxTex;
Texture* stringPanelTex;
Texture* resizerTex;
Texture* scrollTex;
Texture* layerTex;
Texture* typeTex;
Texture* prefsTex;
Texture* checkButtonTex;
Texture* menuTextTex[6];
Texture* menuButtonTex[8];
Texture* returnButtonTex;
Texture* effectTex[3];
Texture* liquidButtonTex;
Texture* liquidTriggerText;
Texture* liquidRegulatorTex;
Texture* autoscrollButtonTex;
Texture* editorMoveable;
Texture* nodesTex;
Texture* speedRegTex;
Texture* sliderTex;
Texture* sliderSTex;
Texture* warpsTex;
Texture* notesTex;
Texture* panelTex;
Texture* infoTexts[13];
Texture* elements[7];
Texture* editorTxt[5];

Sprite* toolbox;
Sprite* layerPanel;
Sprite* stringPanel;
Sprite* menuText[6];
Sprite* infosText[12];
Sprite* infoRegulator;
Sprite* infoSRegulator;
Sprite* gradientElements[3];
Sprite* effectElements[6];
Sprite* tilesetSpr;
Sprite* itemHandled;

View* camera;

Vector2i camPos;
Vector2i camPosMem;

RectangleShape* grid;
RectangleShape* tilesetRect;
RectangleShape* tileSelection;
RectangleShape* background[16];
RectangleShape* gradientColor[2];
RectangleShape* effectClouds[2];
RectangleShape* liquidRect[2];
RectangleShape* spotRect;
RectangleShape* spotCursor;

VertexArray* autoscrollPathLine;

Text* helpText;
Text* infoText;

Regulator* infoSlider[19];

Font* helpFont;
Font* infoFont;

Color topColor;
Color bottomColor;

Color topColorb;
Color bottomColorb;

Color backColor;
Color backColorb;

Vector2i roomScale;
Vector2i roomScaleb;

Vector2f cameraSpeed;

Button* returnButton;
Button* resizerButton[4];
Button* scrollButton[2];
Button* layerButton[3];
Button* typeButton[9];
Button* prefsButton[6];
Button* musicButton[23];
Button* backgroundButton[16];
Button* gradientButton[3];
Button* effectButton[4];
Button* fileButton[4];
Button* editButton[8];
Button* liquidButton[4];
Button* liquidButton2[2];
Button* autoscrollButton[4];
Button* autoscrollButton2[2];
InfoButton* InfoButtons[6];

CheckButton* effectCheckButton[6];
CheckButton* bowserCheckButton[7];

ElementButton* elementsEsssential[3];
ElementButton* elementsPlatforms[35];
ElementButton* elementsBonus[30];
ElementButton* elementsPipes[36];
ElementButton* elementsSceneries[26];
ElementButton* elementsEnemies[57];
ElementButton* elementsHazards[46];

Vertex panelInfo[36];

FMOD_SOUND* edMusic;

FMOD_SOUND* switchVisibility;
FMOD_SOUND* buttonClick;
FMOD_SOUND* itemPut;
FMOD_SOUND* itemDelete;
FMOD_SOUND* testLevel;

FMOD_CHANNEL* musicSamplesChannel;

bool toolbarVisible;
bool selectionWillFadeOut;
bool blockMouse;
bool blockPlacements;
bool returnToTitle;
bool blockEditor;
bool sectionb;

extern Texture* circleFadeTex;
extern Sprite* circleSpr;
extern RectangleShape* blackBorder;
extern bool fadeCircle;

short elementsLine;

short lastLine_platforms;
short lastLine_bonuses;
short lastLine_sceneries;
short lastLine_pipes;
short lastLine_enemies;
short lastLine_hazards;

bool setLiquidSpots;
bool grabLiquid;
bool grabSpot;

TCHAR filegrab[MAX_PATH];

enum EditorMenus {EDITION, TILESET, MUSIC, BACKGROUND, GRADIENT, EFFECTS, INFOS, LIQUID, AUTOSCROLL} currentMenu;
enum SelectionType {NONE, TILE, ESSENTIAL, PLATFORMS, BONUS, PIPES, SCENERIES, ENEMIES, HAZARDS, WARPS} currentSelection;

list<Tile> listTile1;
list<Tile> listTile2;
list<Tile> listTile3;

list<Entity*> listEntities;
list<Entity*> listSceneries;
list<Entity*> listBonus;

list<Tile> listTileb1;
list<Tile> listTileb2;
list<Tile> listTileb3;

list<Entity*> listEntitiesb;
list<Entity*> listSceneriesb;
list<Entity*> listBonusb;

list<EntWarps> listWarps;

EntWarps* lastWarp;

unsigned char warpsCount;
unsigned char currentInfo;

string levelDir;
string* resourcesArray[5];

Matrix* layer1TileMatrix;
Matrix* layer2TileMatrix;
Matrix* layer3TileMatrix;

Matrix* entityMatrix;

Matrix* layer1TileMatrixb;
Matrix* layer2TileMatrixb;
Matrix* layer3TileMatrixb;

Matrix* entityMatrixb;

unsigned short layerNumb;

unsigned int tileNumbX;
unsigned int tileNumbY;

unsigned int elementSelected;

unsigned int lastButton;

unsigned char levelMusic;
unsigned char levelBackground;
unsigned char levelGradient;
unsigned char levelEffect;
unsigned char levelEffectb;

unsigned char levelbMusic;
unsigned char levelbBackground;
unsigned char levelbGradient;
unsigned char levelbEffect;
unsigned char levelbEffectb;

unsigned char startArea;

string levelName;
string levelAuthor;

unsigned char levelGravity;
unsigned short levelTime;

unsigned char levelAutoscroll;
float levelAutoscrollSpeed;

vector<Dragger> levelAutoscrollPath;

unsigned char levelBackAlpha;
unsigned char levelFrontAlpha;

unsigned char levelBackAlphab;
unsigned char levelFrontAlphab;

unsigned char levelLiquidType;
float levelLiquidHeight;

vector<Trigger> levelLiquidTrigger;

unsigned char levelLiquidTypeb;
float levelLiquidHeightb;

vector<Trigger> levelLiquidTriggerb;

float levelLiquidSpeed;

unsigned char bowserAttacks[6];
unsigned char bowserFrequences[6];
unsigned char bowserSpeeds[6];
unsigned char bowserTrail;
unsigned char bowserHealth;
unsigned char bowserMusic;

Vector2f startPosition;

extern Uint8 fadeAlpha;
extern RectangleShape* fadeRect;

static void Button_Back();

static void IncreaseWidth();
static void DecreaseWidth();
static void IncreaseHeight();
static void DecreaseHeight();

static void ScrollUp();
static void ScrollDown();
static void FreezeAllButtons();

static void RecalculateBounds();
void RecalculateInfos(unsigned char info);

static void ChangeLayerTo_Back();
static void ChangeLayerTo_Middle();
static void ChangeLayerTo_Front();

static void Category_Essentials();
static void Category_Platforms();
static void Category_Bonus();
static void Category_Tiles();
static void Category_Pipes();
static void Category_Sceneries();
static void Category_Enemies();
static void Category_Hazards();
static void Category_Warps();

static void Prefs_Music();
static void Prefs_Background();
static void Prefs_Gradient();
static void Prefs_Effects();
static void Prefs_Title();
static void Prefs_Section();

static void Liquid_SetHeight();
static void Liquid_SetSpots();

static void Autoscroll_AddNode();
static void Autoscroll_EraseNode();

static void Music_World1();
static void Music_Cave();
static void Music_Underground();
static void Music_Rockland();
static void Music_Starland();
static void Music_StarPlatforms();
static void Music_Underwater();
static void Music_SelectSave();
static void Music_GhostHouse();
static void Music_Castle1();
static void Music_Castle2();
static void Music_Yoshi1();
static void Music_Yoshi2();
static void Music_Map1();
static void Music_Map2();
static void Music_Map3();
static void Music_Fastrun1();
static void Music_Fastrun2();
static void Music_InDaKitchen();
static void Music_Yky();
static void Music_YetBonus();
static void Music_Apoplexy();
static void Music_Import();

static void Background_None();
static void Background_GreenHills();
static void Background_RedHills();
static void Background_DesertHills();
static void Background_BlueHills();
static void Background_SnowHills();
static void Background_Night();
static void Background_Water();
static void Background_Rocks();
static void Background_Clouds();
static void Background_DarkClouds();
static void Background_Cave();
static void Background_DarkCave();
static void Background_LavaCave();
static void Background_Castle();
static void Background_Import();

static void Gradient_Fit();
static void Gradient_Top();
static void Gradient_Bottom();

static void Effect_Rain();
static void Effect_Storm();
static void Effect_Snow();
static void Effect_None();
static void Effect_But1();
static void Effect_But2();
static void Effect_But3();
static void Effect_But4();
static void Effect_But5();
static void Effect_But6();

static void Info_LevelName();
static void Info_LevelAuthor();
static void Info_LevelGravity();
static void Info_LevelTime();

static void Info_LevelSave();
static void Info_LevelSaveas();
static void Info_LevelLoad();
static void Info_LevelTest();

static void Info_BackAlpha();
static void Info_FrontAlpha();

static void Info_LiquidNone();
static void Info_LiquidWater();
static void Info_LiquidLava();
static void Info_LiquidSetup();

static void Info_AutoscrollNone();
static void Info_AutoscrollA();
static void Info_AutoscrollB();
static void Info_AutoscrollSetup();

static void Info_BowserHealth();
static void Info_BowserMusic();

static void Bowser_Check1();
static void Bowser_Check2();
static void Bowser_Check3();
static void Bowser_Check4();
static void Bowser_Check5();
static void Bowser_Check6();
static void Bowser_Check7();

static void sliderGravity(float sliderPos);
static void sliderTime(float sliderPos);
static void sliderBackAlpha(float sliderPos);
static void sliderFrontAlpha(float sliderPos);
static void sliderLiquidSpeed(float sliderPos);
static void sliderAutoscrollSpeed(float sliderPos);

static void sliderBowserSpeed1(float sliderPos);
static void sliderBowserFreq1(float sliderPos);
static void sliderBowserSpeed2(float sliderPos);
static void sliderBowserFreq2(float sliderPos);
static void sliderBowserSpeed3(float sliderPos);
static void sliderBowserFreq3(float sliderPos);
static void sliderBowserSpeed4(float sliderPos);
static void sliderBowserFreq4(float sliderPos);
static void sliderBowserSpeed5(float sliderPos);
static void sliderBowserFreq5(float sliderPos);
static void sliderBowserSpeed6(float sliderPos);
static void sliderBowserFreq6(float sliderPos);
static void sliderBowserTrail(float sliderPos);

static void Level_Save(const string& filename);
static void Level_Load(const string& filename);
static void Level_LoadEntry();
static void Level_LoadObjects(ifstream& levelFile);
static void Level_Test();
static void Level_New();

static void Elements_Essential(unsigned int elementNumb);
static void Elements_Platforms(unsigned int elementNumb);
static void Elements_Bonus(unsigned int elementNumb);
static void Elements_Pipes(unsigned int elementNumb);
static void Elements_Sceneries(unsigned int elementNumb);
static void Elements_Enemies(unsigned int elementNumb);
static void Elements_Hazards(unsigned int elementNumb);

bool Scene::Editor()
{
    bool exitLoop = false;

    if (!InitAssets())
    {
        MessageBox(NULL, "Failed to initialize the assets on the Editor !", "Assets Error !", MB_OK | MB_ICONERROR | MB_TASKMODAL);

        mainWindow->close();

        exitLoop = true;
    }

    Event eventSystem;

    while (!exitLoop)
    {
        while (mainWindow->pollEvent(eventSystem))
        {
            switch (eventSystem.type)
            {
                case Event::Closed      :
                    exitLoop = true;

                    mainWindow->close();

                    break;

                case Event::KeyPressed :

                    if (blockEditor)
                        break;

                    switch (eventSystem.key.code)
                    {
                        case Keyboard::Escape :

                            if (MessageBox(NULL, "Do you want to back to the Title Screen ?\nAll unsaved work will be lost !", "Back to the Title ?", MB_YESNO | MB_ICONQUESTION | MB_TASKMODAL) == IDYES)
                            {
                                returnToTitle = true;
                                blockEditor = true;

                                fadeRect->setPosition(camPos.x-320, camPos.y-240);
                            }

                            break;

                        case Keyboard::Space :
                            if (currentMenu == EDITION || currentMenu == LIQUID || currentMenu == AUTOSCROLL)
                            {
                                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(8), switchVisibility, 0, NULL);

                                if (toolbarVisible)
                                    toolbarVisible = false;
                                else
                                    toolbarVisible = true;
                            }

                            break;

                        case Keyboard::S :
                            if (currentMenu != EDITION)
                                break;

                            if (eventSystem.key.control)
                            {
                                if (levelDir.empty())
                                {
                                    OPENFILENAME dialogParms;
                                    TCHAR personalPath[MAX_PATH];

                                    SHGetFolderPath(mainWindow->getSystemHandle(), CSIDL_PERSONAL | CSIDL_FLAG_CREATE, NULL, 0, personalPath);

                                    StrCat(personalPath, "/Mario Constructor Master/Levels");

                                    ZeroMemory(&dialogParms, sizeof(OPENFILENAME));

                                    dialogParms.lStructSize = sizeof(OPENFILENAME);
                                    dialogParms.hwndOwner = mainWindow->getSystemHandle();
                                    dialogParms.hInstance = *mainInstance;
                                    dialogParms.lpstrFile = filegrab;
                                    dialogParms.nFilterIndex = 1;
                                    dialogParms.nMaxFile = sizeof(filegrab);
                                    dialogParms.lpstrInitialDir = personalPath;
                                    dialogParms.lpstrTitle = "Save a Level :";
                                    dialogParms.lpstrFilter = "Constructor Master Levels (.cml)\0*.cml\0";
                                    dialogParms.Flags = OFN_PATHMUSTEXIST | OFN_HIDEREADONLY | OFN_ENABLESIZING | OFN_NOCHANGEDIR | OFN_OVERWRITEPROMPT;

                                    if (GetSaveFileName(&dialogParms))
                                    {
                                        PathRenameExtension(filegrab, ".cml");

                                        levelDir = filegrab;

                                        checkResources(levelDir.c_str(), false);

                                        Level_Save(levelDir);
                                    }
                                }
                                else
                                    Level_Save(levelDir);
                            }

                            break;

                        case Keyboard::L :
                            if (currentMenu != EDITION)
                                break;

                            if (eventSystem.key.control)
                            {
                                OPENFILENAME dialogParms;
                                TCHAR personalPath[MAX_PATH];

                                SHGetFolderPath(mainWindow->getSystemHandle(), CSIDL_PERSONAL | CSIDL_FLAG_CREATE, NULL, 0, personalPath);

                                StrCat(personalPath, "/Mario Constructor Master/Levels");

                                ZeroMemory(&dialogParms, sizeof(OPENFILENAME));

                                dialogParms.lStructSize = sizeof(OPENFILENAME);
                                dialogParms.hwndOwner = mainWindow->getSystemHandle();
                                dialogParms.hInstance = *mainInstance;
                                dialogParms.lpstrFile = filegrab;
                                dialogParms.nFilterIndex = 1;
                                dialogParms.nMaxFile = sizeof(filegrab);
                                dialogParms.lpstrInitialDir = personalPath;
                                dialogParms.lpstrTitle = "Load a Level :";
                                dialogParms.lpstrFilter = "Constructor Master Levels (.cml)\0*.cml\0";
                                dialogParms.Flags = OFN_FILEMUSTEXIST | OFN_PATHMUSTEXIST | OFN_HIDEREADONLY | OFN_ENABLESIZING | OFN_NOCHANGEDIR;

                                if (GetOpenFileName(&dialogParms))
                                    Level_Load(filegrab);
                            }

                            break;
                        case Keyboard::T :
                            if (currentMenu != EDITION)
                                break;

                            if (eventSystem.key.control)
                            {
                                if (startArea == 0)
                                {
                                    MessageBox(NULL, "There is no Start Point in the Level !", "No Start Point", MB_ICONINFORMATION | MB_TASKMODAL | MB_OK);
                                    break;
                                }

                                if (MessageBox(NULL, "Do you want to Test your current Level ?", "Test Level", MB_ICONQUESTION | MB_TASKMODAL | MB_YESNO) == IDYES)
                                {
                                    circleFadeTex = new Texture;

                                    if (!circleFadeTex->loadFromFile("Data/Gfx/CircleFade.bmp"))
                                    {
                                        MessageBox(NULL, "Error ! Failed to load Texture :\nData/Gfx/CircleFade.bmp", "Failed to load Texture", MB_OK | MB_ICONERROR | MB_TASKMODAL);

                                        mainWindow->close();

                                        return false;
                                    }

                                    circleFadeTex->setSmooth(true);

                                    circleSpr = new Sprite(*circleFadeTex);
                                    circleSpr->setPosition(camPos.x, camPos.y);
                                    circleSpr->setScale(1.5, 1.5);
                                    circleSpr->setOrigin(240, 240);

                                    fadeCircle = true;
                                    blockEditor = true;

                                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(3), testLevel, 0, NULL);

                                    if (editorMusic)
                                        FMOD_Channel_Stop(musicChannel);
                                }
                            }

                            break;
                        case Keyboard::N :
                            if (currentMenu != EDITION)
                                break;

                            if (eventSystem.key.control)
                            {
                                if (MessageBox(NULL, "You are going to reset the Level.\nAll your placements will be deleted.\nAre you sure ?", "New Level", MB_ICONQUESTION | MB_TASKMODAL | MB_YESNO) == IDYES)
                                    Level_New();
                            }

                            break;

                        default : break;
                    }

                    break;

                case Event::Resized :
                    windowScale = min(eventSystem.size.width / 640.0, eventSystem.size.height / 480.0);
                    wpos = Vector2f((eventSystem.size.width - (windowScale * 640)) / 2, (eventSystem.size.height - (windowScale * 480)) / 2);

                    mainWindow->setView(View(FloatRect(0, 0, eventSystem.size.width, eventSystem.size.height)));

                    textureRender.setPosition(wpos);
                    textureRender.setScale(windowScale, windowScale);

                    break;

                case Event::MouseMoved          :

                    mpos_absolute = Vector2i((eventSystem.mouseMove.x - wpos.x) / windowScale, (eventSystem.mouseMove.y - wpos.y) / windowScale);
                    mpos_relative = mainTexture.mapPixelToCoords(mpos_absolute);

                    break;

                case Event::MouseButtonPressed :
                    if (blockEditor)
                        break;

                    if (currentMenu == LIQUID)
                    {
                        if (setLiquidSpots)
                        {
                            if (eventSystem.mouseButton.button != Mouse::Right)
                                break;

                            if (toolbarVisible)
                            {
                                if ((mpos_absolute.x > 572 && mpos_absolute.y > 448) || (mpos_absolute.x < 75 && mpos_absolute.y < 478 && mpos_absolute.y > 414))
                                    break;
                            }

                            vector<Trigger>::iterator toDelete;

                            if (sectionb)
                            {
                                bool recountNexts = false;

                                if (levelLiquidTriggerb.empty())
                                    break;

                                for (vector<Trigger>::iterator it = levelLiquidTriggerb.begin(); it != levelLiquidTriggerb.end(); it++)
                                {
                                    if (recountNexts)
                                        it->decreaseNumb();
                                    else
                                    {
                                        Vector2f triggerPos = it->getFullPosition();
                                        Vector2f triggerSize = it->getFullSize();

                                        if (FloatRect(triggerPos.x, triggerPos.y, triggerSize.x, triggerSize.y).contains(mpos_relative))
                                        {
                                            toDelete = it;

                                            recountNexts = true;

                                            continue;
                                        }
                                    }
                                }

                                if (recountNexts)
                                {
                                    levelLiquidTriggerb.erase(toDelete);

                                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);
                                }
                            }
                            else
                            {
                                bool recountNexts = false;

                                if (levelLiquidTrigger.empty())
                                    break;

                                for (vector<Trigger>::iterator it = levelLiquidTrigger.begin(); it != levelLiquidTrigger.end(); it++)
                                {
                                    if (recountNexts)
                                        it->decreaseNumb();
                                    else
                                    {
                                        Vector2f triggerPos = it->getFullPosition();
                                        Vector2f triggerSize = it->getFullSize();

                                        if (FloatRect(triggerPos.x, triggerPos.y, triggerSize.x, triggerSize.y).contains(mpos_relative))
                                        {
                                            toDelete = it;

                                            recountNexts = true;

                                            continue;
                                        }
                                    }
                                }

                                if (recountNexts)
                                {
                                    levelLiquidTrigger.erase(toDelete);

                                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);
                                }
                            }
                        }
                        break;
                    }
                    else if (currentMenu != EDITION)
                        break;

                    if (eventSystem.mouseButton.button == Mouse::Right)
                    {
                        if (currentSelection == WARPS)
                        {
                            if (toolbarVisible)
                            {
                                if (mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448))
                                    break;
                            }

                            Erasment_Warps(listWarps);
                        }
                    }

                    break;

                case Event::MouseWheelScrolled :
                    if (blockEditor)
                        break;

                    if (currentMenu != EDITION)
                        break;

                    if (!toolbarVisible)
                        break;

                    if (eventSystem.mouseWheelScroll.delta < 0)
                        ScrollDown();
                    else
                        ScrollUp();

                    break;

                default             : break;
            }
        }

        {
            bool focus = mainWindow->hasFocus();

            if (Mouse::isButtonPressed(Mouse::Left) && focus)
            {
                if (mousePressed < 2)
                    mousePressed++;
            }
            else
            {
                mousePressed = 0;
                blockMouse = false;
            }

            if (Mouse::isButtonPressed(Mouse::Right) && focus)
            {
                if (rightPressed < 2)
                    rightPressed++;
            }
            else
                rightPressed = 0;

            if (Mouse::isButtonPressed(Mouse::Middle) && focus)
            {
                if (middlPressed < 2)
                    middlPressed++;
            }
            else
                middlPressed = 0;
        }

        switch (currentMenu)
        {
            case EDITION :
                if (!blockEditor)
                    UpdateAssetsEdition();

                if (sectionb)
                {
                    if (levelbGradient != 0)
                        mainTexture.clear(backColorb);

                    switch (levelbBackground)
                    {
                        case 1  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[0]);     break;
                        case 2  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[1]);     break;
                        case 3  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[2]);     break;
                        case 4  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[3]);     break;
                        case 5  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[4]);     break;
                        case 6  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[5]);     break;
                        case 7  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[6]);     break;
                        case 8  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[7]);     break;
                        case 9  : mainTexture.draw(*background[8]);     break;
                        case 10 : mainTexture.draw(*background[9]);     break;
                        case 11 : mainTexture.draw(*background[10]);    break;
                        case 12 : mainTexture.draw(*background[11]);    break;
                        case 13 : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[13]);    break;
                        case 14 : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[14]);     break;
                        case 15 : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[15]);     break;
                        default : mainTexture.draw(&backGradient[0], 4, Quads); break;
                    }

                    if (levelbEffectb > 0)
                    {
                        if (levelbEffectb > 3)
                            mainTexture.draw(*effectClouds[1]);

                        mainTexture.draw(*effectClouds[0]);
                    }

                    if (!listTileb1.empty())
                    {
                        for (list<Tile>::iterator it = listTileb1.begin(); it != listTileb1.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listTileb2.empty())
                    {
                        for (list<Tile>::iterator it = listTileb2.begin(); it != listTileb2.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listSceneriesb.empty())
                    {
                        for (list<Entity*>::iterator it = listSceneriesb.begin(); it != listSceneriesb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listEntitiesb.empty())
                    {
                        for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                            {
                                if (!blockEditor)
                                    (*it)->update();

                                mainTexture.draw(**it);
                            }
                        }
                    }

                    if (!listBonusb.empty())
                    {
                        for (list<Entity*>::iterator it = listBonusb.begin(); it != listBonusb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listTileb3.empty())
                    {
                        for (list<Tile>::iterator it = listTileb3.begin(); it != listTileb3.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (levelLiquidTypeb != 0)
                        mainTexture.draw(*liquidRect[1]);
                }
                else
                {
                    if (levelGradient != 0)
                        mainTexture.clear(backColor);

                    switch (levelBackground)
                    {
                        case 1  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[0]);     break;
                        case 2  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[1]);     break;
                        case 3  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[2]);     break;
                        case 4  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[3]);     break;
                        case 5  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[4]);     break;
                        case 6  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[5]);     break;
                        case 7  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[6]);     break;
                        case 8  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[7]);     break;
                        case 9  : mainTexture.draw(*background[8]);     break;
                        case 10 : mainTexture.draw(*background[9]);     break;
                        case 11 : mainTexture.draw(*background[10]);    break;
                        case 12 : mainTexture.draw(*background[11]);    break;
                        case 13 : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[12]);    break;
                        case 14 : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[14]);     break;
                        case 15 : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[15]);     break;
                        default : mainTexture.draw(&backGradient[0], 4, Quads); break;
                    }

                    if (levelEffectb > 0)
                    {
                        if (levelEffectb > 3)
                            mainTexture.draw(*effectClouds[1]);

                        mainTexture.draw(*effectClouds[0]);
                    }

                    if (!listTile1.empty())
                    {
                        for (list<Tile>::iterator it = listTile1.begin(); it != listTile1.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listTile2.empty())
                    {
                        for (list<Tile>::iterator it = listTile2.begin(); it != listTile2.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listSceneries.empty())
                    {
                        for (list<Entity*>::iterator it = listSceneries.begin(); it != listSceneries.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listEntities.empty())
                    {
                        for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                            {
                                if (!blockEditor)
                                    (*it)->update();

                                mainTexture.draw(**it);
                            }
                        }
                    }

                    if (!listBonus.empty())
                    {
                        for (list<Entity*>::iterator it = listBonus.begin(); it != listBonus.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listTile3.empty())
                    {
                        for (list<Tile>::iterator it = listTile3.begin(); it != listTile3.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (levelLiquidType != 0)
                        mainTexture.draw(*liquidRect[0]);
                }

                if (!listWarps.empty())
                {
                    for (list<EntWarps>::iterator it = listWarps.begin(); it != listWarps.end(); it++)
                    {
                        if (it->getSection() != sectionb)
                            continue;

                        Vector2f warpPos(it->getPosition());

                        if (warpPos.x + 64 > camPos.x-320 && warpPos.x < camPos.x+320 && warpPos.y + 64 > camPos.y-240 && warpPos.y < camPos.y+240)
                        {
                            if (!blockEditor)
                                it->update();

                            mainTexture.draw(*it);
                        }
                    }
                }

                mainTexture.draw(*grid);

                if (currentSelection != NONE)
                    mainTexture.draw(*itemHandled);

                if (sectionb)
                {
                    if (!listEntitiesb.empty())
                    {
                        for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                (*it)->drawb(&mainTexture);
                        }
                    }
                }
                else
                {
                    if (!listEntities.empty())
                    {
                        for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                (*it)->drawb(&mainTexture);
                        }
                    }
                }

                if (toolbarVisible)
                {
                    mainTexture.draw(*toolbox);
                    mainTexture.draw(*layerPanel);
                    mainTexture.draw(*stringPanel);

                    mainTexture.draw(*resizerButton[0]);
                    mainTexture.draw(*resizerButton[1]);
                    mainTexture.draw(*resizerButton[2]);
                    mainTexture.draw(*resizerButton[3]);

                    mainTexture.draw(*scrollButton[0]);
                    mainTexture.draw(*scrollButton[1]);

                    mainTexture.draw(*layerButton[0]);
                    mainTexture.draw(*layerButton[1]);
                    mainTexture.draw(*layerButton[2]);

                    mainTexture.draw(*typeButton[0]);
                    mainTexture.draw(*typeButton[1]);
                    mainTexture.draw(*typeButton[2]);
                    mainTexture.draw(*typeButton[3]);
                    mainTexture.draw(*typeButton[4]);
                    mainTexture.draw(*typeButton[5]);
                    mainTexture.draw(*typeButton[6]);
                    mainTexture.draw(*typeButton[7]);
                    mainTexture.draw(*typeButton[8]);

                    mainTexture.draw(*prefsButton[0]);
                    mainTexture.draw(*prefsButton[1]);
                    mainTexture.draw(*prefsButton[2]);
                    mainTexture.draw(*prefsButton[3]);
                    mainTexture.draw(*prefsButton[4]);
                    mainTexture.draw(*prefsButton[5]);

                    switch (elementsLine)
                    {
                        case 0 :
                            mainTexture.draw(*elementsEsssential[0]);
                            mainTexture.draw(*elementsEsssential[1]);
                            mainTexture.draw(*elementsEsssential[2]);
                            break;
                        case 1 :
                            mainTexture.draw(*elementsPlatforms[0]);
                            mainTexture.draw(*elementsPlatforms[1]);
                            mainTexture.draw(*elementsPlatforms[2]);
                            mainTexture.draw(*elementsPlatforms[3]);
                            mainTexture.draw(*elementsPlatforms[4]);
                            break;
                        case 2 :
                            mainTexture.draw(*elementsPlatforms[5]);
                            mainTexture.draw(*elementsPlatforms[6]);
                            mainTexture.draw(*elementsPlatforms[7]);
                            mainTexture.draw(*elementsPlatforms[8]);
                            mainTexture.draw(*elementsPlatforms[9]);
                            break;
                        case 3 :
                            mainTexture.draw(*elementsPlatforms[10]);
                            mainTexture.draw(*elementsPlatforms[11]);
                            mainTexture.draw(*elementsPlatforms[12]);
                            mainTexture.draw(*elementsPlatforms[13]);
                            mainTexture.draw(*elementsPlatforms[14]);
                            break;
                        case 4 :
                            mainTexture.draw(*elementsPlatforms[15]);
                            mainTexture.draw(*elementsPlatforms[16]);
                            mainTexture.draw(*elementsPlatforms[17]);
                            mainTexture.draw(*elementsPlatforms[18]);
                            mainTexture.draw(*elementsPlatforms[19]);
                            break;
                        case 5 :
                            mainTexture.draw(*elementsPlatforms[20]);
                            mainTexture.draw(*elementsPlatforms[21]);
                            mainTexture.draw(*elementsPlatforms[22]);
                            break;
                        case 6 :
                            mainTexture.draw(*elementsPlatforms[23]);
                            mainTexture.draw(*elementsPlatforms[24]);
                            mainTexture.draw(*elementsPlatforms[25]);
                            mainTexture.draw(*elementsPlatforms[26]);
                            mainTexture.draw(*elementsPlatforms[27]);
                            mainTexture.draw(*elementsPlatforms[28]);
                            break;
                        case 7 :
                            mainTexture.draw(*elementsPlatforms[29]);
                            mainTexture.draw(*elementsPlatforms[30]);
                            mainTexture.draw(*elementsPlatforms[31]);
                            mainTexture.draw(*elementsPlatforms[32]);
                            mainTexture.draw(*elementsPlatforms[33]);
                            mainTexture.draw(*elementsPlatforms[34]);
                            break;
                        case 8 :
                            mainTexture.draw(*elementsBonus[0]);
                            mainTexture.draw(*elementsBonus[1]);
                            mainTexture.draw(*elementsBonus[2]);
                            mainTexture.draw(*elementsBonus[3]);
                            mainTexture.draw(*elementsBonus[4]);
                            mainTexture.draw(*elementsBonus[5]);
                            break;
                        case 9 :
                            mainTexture.draw(*elementsBonus[6]);
                            mainTexture.draw(*elementsBonus[7]);
                            mainTexture.draw(*elementsBonus[8]);
                            mainTexture.draw(*elementsBonus[9]);
                            mainTexture.draw(*elementsBonus[10]);
                            mainTexture.draw(*elementsBonus[11]);
                            break;
                        case 10 :
                            mainTexture.draw(*elementsBonus[12]);
                            mainTexture.draw(*elementsBonus[13]);
                            mainTexture.draw(*elementsBonus[14]);
                            mainTexture.draw(*elementsBonus[15]);
                            mainTexture.draw(*elementsBonus[16]);
                            mainTexture.draw(*elementsBonus[17]);
                            break;
                        case 11 :
                            mainTexture.draw(*elementsBonus[18]);
                            mainTexture.draw(*elementsBonus[19]);
                            mainTexture.draw(*elementsBonus[20]);
                            mainTexture.draw(*elementsBonus[21]);
                            mainTexture.draw(*elementsBonus[22]);
                            mainTexture.draw(*elementsBonus[23]);
                            break;
                        case 12 :
                            mainTexture.draw(*elementsBonus[24]);
                            mainTexture.draw(*elementsBonus[25]);
                            mainTexture.draw(*elementsBonus[26]);
                            mainTexture.draw(*elementsBonus[27]);
                            mainTexture.draw(*elementsBonus[28]);
                            mainTexture.draw(*elementsBonus[29]);
                            break;
                        case 13 :
                            mainTexture.draw(*elementsPipes[0]);
                            mainTexture.draw(*elementsPipes[1]);
                            mainTexture.draw(*elementsPipes[2]);
                            mainTexture.draw(*elementsPipes[3]);
                            mainTexture.draw(*elementsPipes[4]);
                            mainTexture.draw(*elementsPipes[5]);
                            break;
                        case 14 :
                            mainTexture.draw(*elementsPipes[6]);
                            mainTexture.draw(*elementsPipes[7]);
                            mainTexture.draw(*elementsPipes[8]);
                            mainTexture.draw(*elementsPipes[9]);
                            mainTexture.draw(*elementsPipes[10]);
                            mainTexture.draw(*elementsPipes[11]);
                            break;
                        case 15 :
                            mainTexture.draw(*elementsPipes[12]);
                            mainTexture.draw(*elementsPipes[13]);
                            mainTexture.draw(*elementsPipes[14]);
                            mainTexture.draw(*elementsPipes[15]);
                            mainTexture.draw(*elementsPipes[16]);
                            mainTexture.draw(*elementsPipes[17]);
                            break;
                        case 16 :
                            mainTexture.draw(*elementsPipes[18]);
                            mainTexture.draw(*elementsPipes[19]);
                            mainTexture.draw(*elementsPipes[20]);
                            mainTexture.draw(*elementsPipes[21]);
                            mainTexture.draw(*elementsPipes[22]);
                            mainTexture.draw(*elementsPipes[23]);
                            break;
                        case 17 :
                            mainTexture.draw(*elementsPipes[24]);
                            mainTexture.draw(*elementsPipes[25]);
                            mainTexture.draw(*elementsPipes[26]);
                            mainTexture.draw(*elementsPipes[27]);
                            mainTexture.draw(*elementsPipes[28]);
                            mainTexture.draw(*elementsPipes[29]);
                            break;
                        case 18 :
                            mainTexture.draw(*elementsPipes[30]);
                            mainTexture.draw(*elementsPipes[31]);
                            mainTexture.draw(*elementsPipes[32]);
                            mainTexture.draw(*elementsPipes[33]);
                            mainTexture.draw(*elementsPipes[34]);
                            mainTexture.draw(*elementsPipes[35]);
                            break;
                        case 19 :
                            mainTexture.draw(*elementsSceneries[0]);
                            mainTexture.draw(*elementsSceneries[1]);
                            mainTexture.draw(*elementsSceneries[2]);
                            break;
                        case 20 :
                            mainTexture.draw(*elementsSceneries[3]);
                            mainTexture.draw(*elementsSceneries[4]);
                            mainTexture.draw(*elementsSceneries[5]);
                            break;
                        case 21 :
                            mainTexture.draw(*elementsSceneries[6]);
                            mainTexture.draw(*elementsSceneries[7]);
                            mainTexture.draw(*elementsSceneries[8]);
                            break;
                        case 22 :
                            mainTexture.draw(*elementsSceneries[9]);
                            mainTexture.draw(*elementsSceneries[10]);
                            mainTexture.draw(*elementsSceneries[11]);
                            break;
                        case 23 :
                            mainTexture.draw(*elementsSceneries[12]);
                            mainTexture.draw(*elementsSceneries[13]);
                            mainTexture.draw(*elementsSceneries[14]);
                            break;
                        case 24 :
                            mainTexture.draw(*elementsSceneries[15]);
                            mainTexture.draw(*elementsSceneries[16]);
                            mainTexture.draw(*elementsSceneries[17]);
                            mainTexture.draw(*elementsSceneries[18]);
                            break;
                        case 25 :
                            mainTexture.draw(*elementsSceneries[19]);
                            mainTexture.draw(*elementsSceneries[22]);
                            mainTexture.draw(*elementsSceneries[23]);
                            break;
                        case 26 :
                            mainTexture.draw(*elementsSceneries[20]);
                            mainTexture.draw(*elementsSceneries[21]);
                            mainTexture.draw(*elementsSceneries[24]);
                            mainTexture.draw(*elementsSceneries[25]);
                            break;
                        case 27 :
                            mainTexture.draw(*elementsEnemies[0]);
                            mainTexture.draw(*elementsEnemies[1]);
                            mainTexture.draw(*elementsEnemies[2]);
                            mainTexture.draw(*elementsEnemies[3]);
                            mainTexture.draw(*elementsEnemies[4]);
                            break;
                        case 28 :
                            mainTexture.draw(*elementsEnemies[5]);
                            mainTexture.draw(*elementsEnemies[6]);
                            mainTexture.draw(*elementsEnemies[7]);
                            mainTexture.draw(*elementsEnemies[8]);
                            break;
                        case 29 :
                            mainTexture.draw(*elementsEnemies[9]);
                            mainTexture.draw(*elementsEnemies[10]);
                            mainTexture.draw(*elementsEnemies[11]);
                            mainTexture.draw(*elementsEnemies[12]);
                            break;
                        case 30 :
                            mainTexture.draw(*elementsEnemies[13]);
                            mainTexture.draw(*elementsEnemies[14]);
                            mainTexture.draw(*elementsEnemies[15]);
                            mainTexture.draw(*elementsEnemies[16]);
                            mainTexture.draw(*elementsEnemies[17]);
                            mainTexture.draw(*elementsEnemies[18]);
                            break;
                        case 31 :
                            mainTexture.draw(*elementsEnemies[19]);
                            mainTexture.draw(*elementsEnemies[20]);
                            mainTexture.draw(*elementsEnemies[21]);
                            mainTexture.draw(*elementsEnemies[22]);
                            break;
                        case 32 :
                            mainTexture.draw(*elementsEnemies[53]);
                            mainTexture.draw(*elementsEnemies[54]);
                            mainTexture.draw(*elementsEnemies[55]);
                            mainTexture.draw(*elementsEnemies[56]);
                            break;
                        case 33 :
                            mainTexture.draw(*elementsEnemies[23]);
                            mainTexture.draw(*elementsEnemies[24]);
                            mainTexture.draw(*elementsEnemies[25]);
                            mainTexture.draw(*elementsEnemies[26]);
                            break;
                        case 34 :
                            mainTexture.draw(*elementsEnemies[27]);
                            mainTexture.draw(*elementsEnemies[28]);
                            mainTexture.draw(*elementsEnemies[29]);
                            mainTexture.draw(*elementsEnemies[30]);
                            break;
                        case 35 :
                            mainTexture.draw(*elementsEnemies[31]);
                            mainTexture.draw(*elementsEnemies[32]);
                            mainTexture.draw(*elementsEnemies[33]);
                            mainTexture.draw(*elementsEnemies[34]);
                            break;
                        case 36 :
                            mainTexture.draw(*elementsEnemies[35]);
                            mainTexture.draw(*elementsEnemies[36]);
                            mainTexture.draw(*elementsEnemies[37]);
                            mainTexture.draw(*elementsEnemies[38]);
                            break;
                        case 37 :
                            mainTexture.draw(*elementsEnemies[39]);
                            mainTexture.draw(*elementsEnemies[40]);
                            mainTexture.draw(*elementsEnemies[41]);
                            mainTexture.draw(*elementsEnemies[42]);
                            mainTexture.draw(*elementsEnemies[43]);
                            break;
                        case 38 :
                            mainTexture.draw(*elementsEnemies[44]);
                            mainTexture.draw(*elementsEnemies[45]);
                            mainTexture.draw(*elementsEnemies[46]);
                            break;
                        case 39 :
                            mainTexture.draw(*elementsEnemies[47]);
                            mainTexture.draw(*elementsEnemies[48]);
                            mainTexture.draw(*elementsEnemies[49]);
                            break;
                        case 40 :
                            mainTexture.draw(*elementsEnemies[50]);
                            mainTexture.draw(*elementsEnemies[51]);
                            mainTexture.draw(*elementsEnemies[52]);
                            break;
                        case 41 :
                            mainTexture.draw(*elementsHazards[0]);
                            mainTexture.draw(*elementsHazards[1]);
                            mainTexture.draw(*elementsHazards[2]);
                            mainTexture.draw(*elementsHazards[3]);
                            mainTexture.draw(*elementsHazards[4]);
                            break;
                        case 42 :
                            mainTexture.draw(*elementsHazards[5]);
                            mainTexture.draw(*elementsHazards[6]);
                            mainTexture.draw(*elementsHazards[7]);
                            mainTexture.draw(*elementsHazards[8]);
                            break;
                        case 43 :
                            mainTexture.draw(*elementsHazards[9]);
                            mainTexture.draw(*elementsHazards[10]);
                            mainTexture.draw(*elementsHazards[11]);
                            mainTexture.draw(*elementsHazards[12]);
                            break;
                        case 44 :
                            mainTexture.draw(*elementsHazards[13]);
                            mainTexture.draw(*elementsHazards[14]);
                            mainTexture.draw(*elementsHazards[15]);
                            mainTexture.draw(*elementsHazards[16]);
                            break;
                        case 45 :
                            mainTexture.draw(*elementsHazards[17]);
                            mainTexture.draw(*elementsHazards[18]);
                            mainTexture.draw(*elementsHazards[19]);
                            mainTexture.draw(*elementsHazards[20]);
                            break;
                        case 46 :
                            mainTexture.draw(*elementsHazards[21]);
                            mainTexture.draw(*elementsHazards[22]);
                            mainTexture.draw(*elementsHazards[23]);
                            mainTexture.draw(*elementsHazards[24]);
                            break;
                        case 47 :
                            mainTexture.draw(*elementsHazards[25]);
                            mainTexture.draw(*elementsHazards[26]);
                            mainTexture.draw(*elementsHazards[27]);
                            mainTexture.draw(*elementsHazards[28]);
                            mainTexture.draw(*elementsHazards[29]);
                            break;
                        case 48 :
                            mainTexture.draw(*elementsHazards[30]);
                            mainTexture.draw(*elementsHazards[31]);
                            mainTexture.draw(*elementsHazards[32]);
                            mainTexture.draw(*elementsHazards[33]);
                            mainTexture.draw(*elementsHazards[34]);
                            break;
                        case 49 :
                            mainTexture.draw(*elementsHazards[35]);
                            mainTexture.draw(*elementsHazards[36]);
                            mainTexture.draw(*elementsHazards[37]);
                            mainTexture.draw(*elementsHazards[38]);
                            break;
                        case 50 :
                            mainTexture.draw(*elementsHazards[39]);
                            mainTexture.draw(*elementsHazards[40]);
                            mainTexture.draw(*elementsHazards[41]);
                            mainTexture.draw(*elementsHazards[42]);
                            break;
                        case 51 :
                            mainTexture.draw(*elementsHazards[43]);
                            mainTexture.draw(*elementsHazards[44]);
                            mainTexture.draw(*elementsHazards[45]);
                            break;
                    }

                    if (helpText->getString() != "")
                        mainTexture.draw(*helpText);

                    if (!blockEditor)
                    {
                        resizerButton[0]->update();
                        resizerButton[1]->update();
                        resizerButton[2]->update();
                        resizerButton[3]->update();

                        scrollButton[0]->update();
                        scrollButton[1]->update();

                        if (currentSelection == NONE || currentSelection == TILE || currentSelection == PIPES)
                        {
                            layerButton[0]->update();
                            layerButton[1]->update();
                            layerButton[2]->update();
                        }

                        typeButton[0]->update();
                        typeButton[1]->update();
                        typeButton[2]->update();
                        typeButton[3]->update();
                        typeButton[4]->update();
                        typeButton[5]->update();
                        typeButton[6]->update();
                        typeButton[7]->update();
                        typeButton[8]->update();

                        prefsButton[0]->update();
                        prefsButton[1]->update();
                        prefsButton[2]->update();
                        prefsButton[3]->update();
                        prefsButton[4]->update();
                        prefsButton[5]->update();

                        switch (elementsLine)
                        {
                            case 0 :
                                elementsEsssential[0]->update();
                                elementsEsssential[1]->update();
                                elementsEsssential[2]->update();
                                break;
                            case 1 :
                                elementsPlatforms[0]->update();
                                elementsPlatforms[1]->update();
                                elementsPlatforms[2]->update();
                                elementsPlatforms[3]->update();
                                elementsPlatforms[4]->update();
                                break;
                            case 2 :
                                elementsPlatforms[5]->update();
                                elementsPlatforms[6]->update();
                                elementsPlatforms[7]->update();
                                elementsPlatforms[8]->update();
                                elementsPlatforms[9]->update();
                                break;
                            case 3 :
                                elementsPlatforms[10]->update();
                                elementsPlatforms[11]->update();
                                elementsPlatforms[12]->update();
                                elementsPlatforms[13]->update();
                                elementsPlatforms[14]->update();
                                break;
                            case 4 :
                                elementsPlatforms[15]->update();
                                elementsPlatforms[16]->update();
                                elementsPlatforms[17]->update();
                                elementsPlatforms[18]->update();
                                elementsPlatforms[19]->update();
                                break;
                            case 5 :
                                elementsPlatforms[20]->update();
                                elementsPlatforms[21]->update();
                                elementsPlatforms[22]->update();
                                break;
                            case 6 :
                                elementsPlatforms[23]->update();
                                elementsPlatforms[24]->update();
                                elementsPlatforms[25]->update();
                                elementsPlatforms[26]->update();
                                elementsPlatforms[27]->update();
                                elementsPlatforms[28]->update();
                                break;
                            case 7 :
                                elementsPlatforms[29]->update();
                                elementsPlatforms[30]->update();
                                elementsPlatforms[31]->update();
                                elementsPlatforms[32]->update();
                                elementsPlatforms[33]->update();
                                elementsPlatforms[34]->update();
                                break;
                            case 8 :
                                elementsBonus[0]->update();
                                elementsBonus[1]->update();
                                elementsBonus[2]->update();
                                elementsBonus[3]->update();
                                elementsBonus[4]->update();
                                elementsBonus[5]->update();
                                break;
                            case 9 :
                                elementsBonus[6]->update();
                                elementsBonus[7]->update();
                                elementsBonus[8]->update();
                                elementsBonus[9]->update();
                                elementsBonus[10]->update();
                                elementsBonus[11]->update();
                                break;
                            case 10 :
                                elementsBonus[12]->update();
                                elementsBonus[13]->update();
                                elementsBonus[14]->update();
                                elementsBonus[15]->update();
                                elementsBonus[16]->update();
                                elementsBonus[17]->update();
                                break;
                            case 11 :
                                elementsBonus[18]->update();
                                elementsBonus[19]->update();
                                elementsBonus[20]->update();
                                elementsBonus[21]->update();
                                elementsBonus[22]->update();
                                elementsBonus[23]->update();
                                break;
                            case 12 :
                                elementsBonus[24]->update();
                                elementsBonus[25]->update();
                                elementsBonus[26]->update();
                                elementsBonus[27]->update();
                                elementsBonus[28]->update();
                                elementsBonus[29]->update();
                                break;
                            case 13 :
                                elementsPipes[0]->update();
                                elementsPipes[1]->update();
                                elementsPipes[2]->update();
                                elementsPipes[3]->update();
                                elementsPipes[4]->update();
                                elementsPipes[5]->update();
                                break;
                            case 14 :
                                elementsPipes[6]->update();
                                elementsPipes[7]->update();
                                elementsPipes[8]->update();
                                elementsPipes[9]->update();
                                elementsPipes[10]->update();
                                elementsPipes[11]->update();
                                break;
                            case 15 :
                                elementsPipes[12]->update();
                                elementsPipes[13]->update();
                                elementsPipes[14]->update();
                                elementsPipes[15]->update();
                                elementsPipes[16]->update();
                                elementsPipes[17]->update();
                                break;
                            case 16 :
                                elementsPipes[18]->update();
                                elementsPipes[19]->update();
                                elementsPipes[20]->update();
                                elementsPipes[21]->update();
                                elementsPipes[22]->update();
                                elementsPipes[23]->update();
                                break;
                            case 17 :
                                elementsPipes[24]->update();
                                elementsPipes[25]->update();
                                elementsPipes[26]->update();
                                elementsPipes[27]->update();
                                elementsPipes[28]->update();
                                elementsPipes[29]->update();
                                break;
                            case 18 :
                                elementsPipes[30]->update();
                                elementsPipes[31]->update();
                                elementsPipes[32]->update();
                                elementsPipes[33]->update();
                                elementsPipes[34]->update();
                                elementsPipes[35]->update();
                                break;
                            case 19 :
                                elementsSceneries[0]->update();
                                elementsSceneries[1]->update();
                                elementsSceneries[2]->update();
                                break;
                            case 20 :
                                elementsSceneries[3]->update();
                                elementsSceneries[4]->update();
                                elementsSceneries[5]->update();
                                break;
                            case 21 :
                                elementsSceneries[6]->update();
                                elementsSceneries[7]->update();
                                elementsSceneries[8]->update();
                                break;
                            case 22 :
                                elementsSceneries[9]->update();
                                elementsSceneries[10]->update();
                                elementsSceneries[11]->update();
                                break;
                            case 23 :
                                elementsSceneries[12]->update();
                                elementsSceneries[13]->update();
                                elementsSceneries[14]->update();
                                break;
                            case 24 :
                                elementsSceneries[15]->update();
                                elementsSceneries[16]->update();
                                elementsSceneries[17]->update();
                                elementsSceneries[18]->update();
                                break;
                            case 25 :
                                elementsSceneries[19]->update();
                                elementsSceneries[22]->update();
                                elementsSceneries[23]->update();
                                break;
                            case 26 :
                                elementsSceneries[20]->update();
                                elementsSceneries[21]->update();
                                elementsSceneries[24]->update();
                                elementsSceneries[25]->update();
                                break;
                            case 27 :
                                elementsEnemies[0]->update();
                                elementsEnemies[1]->update();
                                elementsEnemies[2]->update();
                                elementsEnemies[3]->update();
                                elementsEnemies[4]->update();
                                break;
                            case 28 :
                                elementsEnemies[5]->update();
                                elementsEnemies[6]->update();
                                elementsEnemies[7]->update();
                                elementsEnemies[8]->update();
                                break;
                            case 29 :
                                elementsEnemies[9]->update();
                                elementsEnemies[10]->update();
                                elementsEnemies[11]->update();
                                elementsEnemies[12]->update();
                                break;
                            case 30 :
                                elementsEnemies[13]->update();
                                elementsEnemies[14]->update();
                                elementsEnemies[15]->update();
                                elementsEnemies[16]->update();
                                elementsEnemies[17]->update();
                                elementsEnemies[18]->update();
                                break;
                            case 31 :
                                elementsEnemies[19]->update();
                                elementsEnemies[20]->update();
                                elementsEnemies[21]->update();
                                elementsEnemies[22]->update();
                                break;
                            case 32 :
                                elementsEnemies[53]->update();
                                elementsEnemies[54]->update();
                                elementsEnemies[55]->update();
                                elementsEnemies[56]->update();
                                break;
                            case 33 :
                                elementsEnemies[23]->update();
                                elementsEnemies[24]->update();
                                elementsEnemies[25]->update();
                                elementsEnemies[26]->update();
                                break;
                            case 34 :
                                elementsEnemies[27]->update();
                                elementsEnemies[28]->update();
                                elementsEnemies[29]->update();
                                elementsEnemies[30]->update();
                                break;
                            case 35 :
                                elementsEnemies[31]->update();
                                elementsEnemies[32]->update();
                                elementsEnemies[33]->update();
                                elementsEnemies[34]->update();
                                break;
                            case 36 :
                                elementsEnemies[35]->update();
                                elementsEnemies[36]->update();
                                elementsEnemies[37]->update();
                                elementsEnemies[38]->update();
                                break;
                            case 37 :
                                elementsEnemies[39]->update();
                                elementsEnemies[40]->update();
                                elementsEnemies[41]->update();
                                elementsEnemies[42]->update();
                                elementsEnemies[43]->update();
                                break;
                            case 38 :
                                elementsEnemies[44]->update();
                                elementsEnemies[45]->update();
                                elementsEnemies[46]->update();
                                break;
                            case 39 :
                                elementsEnemies[47]->update();
                                elementsEnemies[48]->update();
                                elementsEnemies[49]->update();
                                break;
                            case 40 :
                                elementsEnemies[50]->update();
                                elementsEnemies[51]->update();
                                elementsEnemies[52]->update();
                                break;
                            case 41 :
                                elementsHazards[0]->update();
                                elementsHazards[1]->update();
                                elementsHazards[2]->update();
                                elementsHazards[3]->update();
                                elementsHazards[4]->update();
                                break;
                            case 42 :
                                elementsHazards[5]->update();
                                elementsHazards[6]->update();
                                elementsHazards[7]->update();
                                elementsHazards[8]->update();
                                break;
                            case 43 :
                                elementsHazards[9]->update();
                                elementsHazards[10]->update();
                                elementsHazards[11]->update();
                                elementsHazards[12]->update();
                                break;
                            case 44 :
                                elementsHazards[13]->update();
                                elementsHazards[14]->update();
                                elementsHazards[15]->update();
                                elementsHazards[16]->update();
                                break;
                            case 45 :
                                elementsHazards[17]->update();
                                elementsHazards[18]->update();
                                elementsHazards[19]->update();
                                elementsHazards[20]->update();
                                break;
                            case 46 :
                                elementsHazards[21]->update();
                                elementsHazards[22]->update();
                                elementsHazards[23]->update();
                                elementsHazards[24]->update();
                                break;
                            case 47 :
                                elementsHazards[25]->update();
                                elementsHazards[26]->update();
                                elementsHazards[27]->update();
                                elementsHazards[28]->update();
                                elementsHazards[29]->update();
                                break;
                            case 48 :
                                elementsHazards[30]->update();
                                elementsHazards[31]->update();
                                elementsHazards[32]->update();
                                elementsHazards[33]->update();
                                elementsHazards[34]->update();
                                break;
                            case 49 :
                                elementsHazards[35]->update();
                                elementsHazards[36]->update();
                                elementsHazards[37]->update();
                                elementsHazards[38]->update();
                                break;
                            case 50 :
                                elementsHazards[39]->update();
                                elementsHazards[40]->update();
                                elementsHazards[41]->update();
                                elementsHazards[42]->update();
                                break;
                            case 51 :
                                elementsHazards[43]->update();
                                elementsHazards[44]->update();
                                elementsHazards[45]->update();
                                break;
                        }
                    }
                }

                if (!blockEditor)
                {
                    switch (currentSelection)
                    {
                        case TILE : Selection_Tiles(); break;
                        case ESSENTIAL : Selection_Essential(); break;
                        case PLATFORMS : Selection_Platforms(); break;
                        case BONUS : Selection_Bonus(); break;
                        case PIPES : Selection_Pipes(); break;
                        case SCENERIES : Selection_Sceneries(); break;
                        case ENEMIES : Selection_Enemies(); break;
                        case HAZARDS : Selection_Hazards(); break;
                        case WARPS : Selection_Warps(); break;
                    }
                }

                if (mousePressed == 0)
                    blockPlacements = false;

                break;

            case TILESET :
                mainTexture.clear(Color(173, 116, 84));

                if (!blockEditor)
                {
                    UpdateAssetsTileset();

                    if (helpText->getString() != "")
                        helpText->setString("");

                }

                mainTexture.draw(*tilesetSpr);
                mainTexture.draw(*tilesetRect);

                mainTexture.draw(*returnButton);

                mainTexture.draw(*menuText[0]);

                mainTexture.draw(*tileSelection);

                break;

            case MUSIC :
                mainTexture.clear(Color(173, 116, 84));

                mainTexture.draw(*musicButton[0]);
                mainTexture.draw(*musicButton[1]);
                mainTexture.draw(*musicButton[2]);
                mainTexture.draw(*musicButton[3]);
                mainTexture.draw(*musicButton[4]);
                mainTexture.draw(*musicButton[5]);
                mainTexture.draw(*musicButton[6]);
                mainTexture.draw(*musicButton[7]);
                mainTexture.draw(*musicButton[8]);
                mainTexture.draw(*musicButton[9]);
                mainTexture.draw(*musicButton[10]);
                mainTexture.draw(*musicButton[11]);
                mainTexture.draw(*musicButton[12]);
                mainTexture.draw(*musicButton[13]);
                mainTexture.draw(*musicButton[14]);
                mainTexture.draw(*musicButton[15]);
                mainTexture.draw(*musicButton[16]);
                mainTexture.draw(*musicButton[17]);
                mainTexture.draw(*musicButton[18]);
                mainTexture.draw(*musicButton[19]);
                mainTexture.draw(*musicButton[20]);
                mainTexture.draw(*musicButton[21]);
                mainTexture.draw(*musicButton[22]);

                mainTexture.draw(*returnButton);

                mainTexture.draw(*menuText[1]);

                if (!blockEditor)
                {
                    if (helpText->getString() != "")
                        helpText->setString("");

                    musicButton[0]->update();
                    musicButton[1]->update();
                    musicButton[2]->update();
                    musicButton[3]->update();
                    musicButton[4]->update();
                    musicButton[5]->update();
                    musicButton[6]->update();
                    musicButton[7]->update();
                    musicButton[8]->update();
                    musicButton[9]->update();
                    musicButton[10]->update();
                    musicButton[11]->update();
                    musicButton[12]->update();
                    musicButton[13]->update();
                    musicButton[14]->update();
                    musicButton[15]->update();
                    musicButton[16]->update();
                    musicButton[17]->update();
                    musicButton[18]->update();
                    musicButton[19]->update();
                    musicButton[20]->update();
                    musicButton[21]->update();
                    musicButton[22]->update();

                    returnButton->update();
                }

                break;

            case BACKGROUND :
                mainTexture.clear(Color(173, 116, 84));

                mainTexture.draw(panelInfo, 36, Quads, panelTex);

                gradientPreview[0].position = Vector2f(camPos.x-254, camPos.y-168);
                gradientPreview[1].position = Vector2f(camPos.x-166, camPos.y-168);
                gradientPreview[2].position = Vector2f(camPos.x-166, camPos.y-104);
                gradientPreview[3].position = Vector2f(camPos.x-254, camPos.y-104);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x+26, camPos.y-168);
                gradientPreview[1].position = Vector2f(camPos.x+114, camPos.y-168);
                gradientPreview[2].position = Vector2f(camPos.x+114, camPos.y-104);
                gradientPreview[3].position = Vector2f(camPos.x+26, camPos.y-104);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x-254, camPos.y-88);
                gradientPreview[1].position = Vector2f(camPos.x-166, camPos.y-88);
                gradientPreview[2].position = Vector2f(camPos.x-166, camPos.y-24);
                gradientPreview[3].position = Vector2f(camPos.x-254, camPos.y-24);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x+26, camPos.y-88);
                gradientPreview[1].position = Vector2f(camPos.x+114, camPos.y-88);
                gradientPreview[2].position = Vector2f(camPos.x+114, camPos.y-24);
                gradientPreview[3].position = Vector2f(camPos.x+26, camPos.y-24);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x+166, camPos.y-88);
                gradientPreview[1].position = Vector2f(camPos.x+254, camPos.y-88);
                gradientPreview[2].position = Vector2f(camPos.x+254, camPos.y-24);
                gradientPreview[3].position = Vector2f(camPos.x+166, camPos.y-24);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x-254, camPos.y-8);
                gradientPreview[1].position = Vector2f(camPos.x-166, camPos.y-8);
                gradientPreview[2].position = Vector2f(camPos.x-166, camPos.y+56);
                gradientPreview[3].position = Vector2f(camPos.x-254, camPos.y+56);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x+26, camPos.y-8);
                gradientPreview[1].position = Vector2f(camPos.x+114, camPos.y-8);
                gradientPreview[2].position = Vector2f(camPos.x+114, camPos.y+56);
                gradientPreview[3].position = Vector2f(camPos.x+26, camPos.y+56);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x+166, camPos.y-8);
                gradientPreview[1].position = Vector2f(camPos.x+254, camPos.y-8);
                gradientPreview[2].position = Vector2f(camPos.x+254, camPos.y+56);
                gradientPreview[3].position = Vector2f(camPos.x+166, camPos.y+56);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x-114, camPos.y+72);
                gradientPreview[1].position = Vector2f(camPos.x-26, camPos.y+72);
                gradientPreview[2].position = Vector2f(camPos.x-26, camPos.y+136);
                gradientPreview[3].position = Vector2f(camPos.x-114, camPos.y+136);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x+26, camPos.y+72);
                gradientPreview[1].position = Vector2f(camPos.x+114, camPos.y+72);
                gradientPreview[2].position = Vector2f(camPos.x+114, camPos.y+136);
                gradientPreview[3].position = Vector2f(camPos.x+26, camPos.y+136);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x-191, camPos.y+152);
                gradientPreview[1].position = Vector2f(camPos.x-10, camPos.y+152);
                gradientPreview[2].position = Vector2f(camPos.x-10, camPos.y+216);
                gradientPreview[3].position = Vector2f(camPos.x-191, camPos.y+216);

                mainTexture.draw(gradientPreview, 4, Quads);

                gradientPreview[0].position = Vector2f(camPos.x+8, camPos.y+152);
                gradientPreview[1].position = Vector2f(camPos.x+189, camPos.y+152);
                gradientPreview[2].position = Vector2f(camPos.x+189, camPos.y+216);
                gradientPreview[3].position = Vector2f(camPos.x+8, camPos.y+216);

                mainTexture.draw(gradientPreview, 4, Quads);

                mainTexture.draw(*backgroundButton[0]);
                mainTexture.draw(*backgroundButton[1]);
                mainTexture.draw(*backgroundButton[2]);
                mainTexture.draw(*backgroundButton[3]);
                mainTexture.draw(*backgroundButton[4]);
                mainTexture.draw(*backgroundButton[5]);
                mainTexture.draw(*backgroundButton[6]);
                mainTexture.draw(*backgroundButton[7]);
                mainTexture.draw(*backgroundButton[8]);
                mainTexture.draw(*backgroundButton[9]);
                mainTexture.draw(*backgroundButton[10]);
                mainTexture.draw(*backgroundButton[11]);
                mainTexture.draw(*backgroundButton[12]);
                mainTexture.draw(*backgroundButton[13]);
                mainTexture.draw(*backgroundButton[14]);
                mainTexture.draw(*backgroundButton[15]);

                mainTexture.draw(*returnButton);

                mainTexture.draw(*menuText[2]);

                if (!blockEditor)
                {
                    if (helpText->getString() != "")
                        helpText->setString("");

                    backgroundButton[0]->update();
                    backgroundButton[1]->update();
                    backgroundButton[2]->update();
                    backgroundButton[3]->update();
                    backgroundButton[4]->update();
                    backgroundButton[5]->update();
                    backgroundButton[6]->update();
                    backgroundButton[7]->update();
                    backgroundButton[8]->update();
                    backgroundButton[9]->update();
                    backgroundButton[10]->update();
                    backgroundButton[11]->update();
                    backgroundButton[12]->update();
                    backgroundButton[13]->update();
                    backgroundButton[14]->update();
                    backgroundButton[15]->update();

                    returnButton->update();
                }

                break;
            case GRADIENT :
                mainTexture.clear(Color(173, 116, 84));

                mainTexture.draw(panelInfo, 36, Quads, panelTex);

                if (!blockEditor)
                {
                    UpdateAssetsGradient();

                    if (helpText->getString() != "")
                        helpText->setString("");

                    gradientButton[0]->update();
                    gradientButton[1]->update();
                    gradientButton[2]->update();

                    returnButton->update();
                }

                mainTexture.draw(*gradientColor[0]);
                mainTexture.draw(*gradientColor[1]);

                mainTexture.draw(gradientPreview, 4, Quads);

                mainTexture.draw(*gradientButton[0]);
                mainTexture.draw(*gradientButton[1]);
                mainTexture.draw(*gradientButton[2]);

                mainTexture.draw(*tileSelection);

                mainTexture.draw(*gradientElements[0]);
                mainTexture.draw(*gradientElements[1]);
                mainTexture.draw(*gradientElements[2]);

                mainTexture.draw(*returnButton);

                mainTexture.draw(*menuText[3]);
                mainTexture.draw(*menuText[4]);

                break;

            case EFFECTS :
                mainTexture.clear(Color(173, 116, 84));

                mainTexture.draw(panelInfo, 36, Quads, panelTex);

                gradientPreview[0].position = Vector2f(camPos.x-234, camPos.y-148);
                gradientPreview[1].position = Vector2f(camPos.x-125, camPos.y-148);
                gradientPreview[2].position = Vector2f(camPos.x-125, camPos.y-84);
                gradientPreview[3].position = Vector2f(camPos.x-234, camPos.y-84);

                mainTexture.draw(gradientPreview, 4, Quads);

                mainTexture.draw(*effectElements[0]);

                gradientPreview[0].position = Vector2f(camPos.x-54, camPos.y-148);
                gradientPreview[1].position = Vector2f(camPos.x+55, camPos.y-148);
                gradientPreview[2].position = Vector2f(camPos.x+55, camPos.y-84);
                gradientPreview[3].position = Vector2f(camPos.x-54, camPos.y-84);

                mainTexture.draw(gradientPreview, 4, Quads);

                mainTexture.draw(*effectElements[1]);

                gradientPreview[0].position = Vector2f(camPos.x+126, camPos.y-148);
                gradientPreview[1].position = Vector2f(camPos.x+235, camPos.y-148);
                gradientPreview[2].position = Vector2f(camPos.x+235, camPos.y-84);
                gradientPreview[3].position = Vector2f(camPos.x+126, camPos.y-84);

                mainTexture.draw(gradientPreview, 4, Quads);

                mainTexture.draw(*effectElements[2]);

                gradientPreview[0].position = Vector2f(camPos.x-234, camPos.y-62);
                gradientPreview[1].position = Vector2f(camPos.x-125, camPos.y-62);
                gradientPreview[2].position = Vector2f(camPos.x-125, camPos.y+2);
                gradientPreview[3].position = Vector2f(camPos.x-234, camPos.y+2);

                mainTexture.draw(gradientPreview, 4, Quads);

                mainTexture.draw(*effectElements[3]);

                gradientPreview[0].position = Vector2f(camPos.x-54, camPos.y-62);
                gradientPreview[1].position = Vector2f(camPos.x+55, camPos.y-62);
                gradientPreview[2].position = Vector2f(camPos.x+55, camPos.y+2);
                gradientPreview[3].position = Vector2f(camPos.x-54, camPos.y+2);

                mainTexture.draw(gradientPreview, 4, Quads);

                mainTexture.draw(*effectElements[4]);

                gradientPreview[0].position = Vector2f(camPos.x+126, camPos.y-62);
                gradientPreview[1].position = Vector2f(camPos.x+235, camPos.y-62);
                gradientPreview[2].position = Vector2f(camPos.x+235, camPos.y+2);
                gradientPreview[3].position = Vector2f(camPos.x+126, camPos.y+2);

                mainTexture.draw(gradientPreview, 4, Quads);

                mainTexture.draw(*effectElements[5]);

                mainTexture.draw(*effectCheckButton[0]);
                mainTexture.draw(*effectCheckButton[1]);
                mainTexture.draw(*effectCheckButton[2]);
                mainTexture.draw(*effectCheckButton[3]);
                mainTexture.draw(*effectCheckButton[4]);
                mainTexture.draw(*effectCheckButton[5]);

                mainTexture.draw(*effectButton[0]);
                mainTexture.draw(*effectButton[1]);
                mainTexture.draw(*effectButton[2]);
                mainTexture.draw(*effectButton[3]);

                mainTexture.draw(*returnButton);

                if (!blockEditor)
                {
                    if (helpText->getString() != "")
                        helpText->setString("");

                    effectButton[0]->update();
                    effectButton[1]->update();
                    effectButton[2]->update();
                    effectButton[3]->update();

                    effectCheckButton[0]->update();
                    effectCheckButton[1]->update();
                    effectCheckButton[2]->update();
                    effectCheckButton[3]->update();
                    effectCheckButton[4]->update();
                    effectCheckButton[5]->update();

                    returnButton->update();
                }

                mainTexture.draw(*menuText[5]);

                break;

            case INFOS :
                mainTexture.clear(Color(173, 116, 84));

                mainTexture.draw(panelInfo, 36, Quads, panelTex);

                switch (currentInfo)
                {
                    case 0 :
                        mainTexture.draw(*infosText[0]);
                        mainTexture.draw(*infosText[1]);
                        mainTexture.draw(*infosText[2]);
                        mainTexture.draw(*infosText[3]);

                        infoText->setString(levelName);
                        infoText->setPosition(camPos.x-118, camPos.y-78);

                        mainTexture.draw(*infoText);

                        infoText->setString(levelAuthor);
                        infoText->setPosition(camPos.x-118, camPos.y-33);

                        mainTexture.draw(*infoText);

                        infoRegulator->setPosition(camPos.x-118, camPos.y+10);

                        mainTexture.draw(*infoRegulator);

                        infoRegulator->setPosition(camPos.x-118, camPos.y+55);

                        mainTexture.draw(*infoRegulator);

                        mainTexture.draw(*infoSlider[0]);
                        mainTexture.draw(*infoSlider[1]);

                        mainTexture.draw(*editButton[0]);
                        mainTexture.draw(*editButton[1]);
                        mainTexture.draw(*editButton[2]);
                        mainTexture.draw(*editButton[3]);
                        break;
                    case 1 :
                        mainTexture.draw(*fileButton[0]);
                        mainTexture.draw(*fileButton[1]);
                        mainTexture.draw(*fileButton[2]);
                        mainTexture.draw(*fileButton[3]);
                        break;
                    case 2 :
                        mainTexture.draw(*infosText[4]);
                        mainTexture.draw(*infosText[5]);
                        mainTexture.draw(*infosText[6]);

                        infoRegulator->setPosition(camPos.x-132, camPos.y+8);

                        mainTexture.draw(*infoRegulator);

                        infoRegulator->setPosition(camPos.x-132, camPos.y+90);

                        mainTexture.draw(*infoRegulator);

                        mainTexture.draw(*infoSlider[2]);
                        mainTexture.draw(*infoSlider[3]);

                        mainTexture.draw(*editButton[4]);
                        mainTexture.draw(*editButton[5]);

                        break;
                    case 3 :
                        mainTexture.draw(*infosText[4]);
                        mainTexture.draw(*infosText[7]);
                        mainTexture.draw(*infosText[8]);

                        mainTexture.draw(*liquidButton[0]);
                        mainTexture.draw(*liquidButton[1]);
                        mainTexture.draw(*liquidButton[2]);
                        mainTexture.draw(*liquidButton[3]);

                        infoRegulator->setPosition(camPos.x-118, camPos.y+120);

                        mainTexture.draw(*infoRegulator);

                        mainTexture.draw(*infoSlider[4]);

                        break;
                    case 4 :
                        mainTexture.draw(*infosText[9]);
                        mainTexture.draw(*infosText[10]);

                        mainTexture.draw(*autoscrollButton[0]);
                        mainTexture.draw(*autoscrollButton[1]);
                        mainTexture.draw(*autoscrollButton[2]);
                        mainTexture.draw(*autoscrollButton[3]);

                        infoRegulator->setPosition(camPos.x-118, camPos.y+120);

                        mainTexture.draw(*infoRegulator);

                        mainTexture.draw(*infoSlider[5]);

                        break;
                    case 5 :
                        mainTexture.draw(*infosText[11]);

                        mainTexture.draw(*bowserCheckButton[0]);
                        mainTexture.draw(*bowserCheckButton[1]);
                        mainTexture.draw(*bowserCheckButton[2]);
                        mainTexture.draw(*bowserCheckButton[3]);
                        mainTexture.draw(*bowserCheckButton[4]);
                        mainTexture.draw(*bowserCheckButton[5]);
                        mainTexture.draw(*bowserCheckButton[6]);

                        if (bowserAttacks[0])
                        {
                            infoSRegulator->setPosition(camPos.x-128, camPos.y-136);

                            mainTexture.draw(*infoSRegulator);

                            infoSRegulator->setPosition(camPos.x+84, camPos.y-136);

                            mainTexture.draw(*infoSRegulator);

                            mainTexture.draw(*infoSlider[6]);
                            mainTexture.draw(*infoSlider[7]);
                        }

                        if (bowserAttacks[1])
                        {
                            infoSRegulator->setPosition(camPos.x-128, camPos.y-90);

                            mainTexture.draw(*infoSRegulator);

                            infoSRegulator->setPosition(camPos.x+84, camPos.y-90);

                            mainTexture.draw(*infoSRegulator);

                            mainTexture.draw(*infoSlider[8]);
                            mainTexture.draw(*infoSlider[9]);
                        }

                        if (bowserAttacks[2])
                        {
                            infoSRegulator->setPosition(camPos.x-128, camPos.y-44);

                            mainTexture.draw(*infoSRegulator);

                            infoSRegulator->setPosition(camPos.x+84, camPos.y-44);

                            mainTexture.draw(*infoSRegulator);

                            mainTexture.draw(*infoSlider[10]);
                            mainTexture.draw(*infoSlider[11]);
                        }

                        if (bowserAttacks[3])
                        {
                            infoSRegulator->setPosition(camPos.x-128, camPos.y+2);

                            mainTexture.draw(*infoSRegulator);

                            infoSRegulator->setPosition(camPos.x+84, camPos.y+2);

                            mainTexture.draw(*infoSRegulator);

                            mainTexture.draw(*infoSlider[12]);
                            mainTexture.draw(*infoSlider[13]);
                        }

                        if (bowserAttacks[4])
                        {
                            infoSRegulator->setPosition(camPos.x-128, camPos.y+48);

                            mainTexture.draw(*infoSRegulator);

                            infoSRegulator->setPosition(camPos.x+84, camPos.y+48);

                            mainTexture.draw(*infoSRegulator);

                            mainTexture.draw(*infoSlider[14]);
                            mainTexture.draw(*infoSlider[15]);
                        }

                        if (bowserAttacks[5])
                        {
                            infoSRegulator->setPosition(camPos.x-128, camPos.y+94);

                            mainTexture.draw(*infoSRegulator);

                            infoSRegulator->setPosition(camPos.x+84, camPos.y+94);

                            mainTexture.draw(*infoSRegulator);

                            mainTexture.draw(*infoSlider[16]);
                            mainTexture.draw(*infoSlider[17]);
                        }

                        infoRegulator->setPosition(camPos.x-128, camPos.y+140);

                        mainTexture.draw(*infoRegulator);

                        mainTexture.draw(*infoSlider[18]);

                        mainTexture.draw(*editButton[6]);

                        if (bowserMusic)
                            mainTexture.draw(*editButton[7]);

                        if (helpText->getString() != "")
                            mainTexture.draw(*helpText);

                        break;
                }

                mainTexture.draw(*InfoButtons[0]);
                mainTexture.draw(*InfoButtons[1]);
                mainTexture.draw(*InfoButtons[2]);
                mainTexture.draw(*InfoButtons[3]);
                mainTexture.draw(*InfoButtons[4]);
                mainTexture.draw(*InfoButtons[5]);

                mainTexture.draw(*returnButton);

                if (!blockEditor)
                {
                    if (helpText->getString() != "")
                        helpText->setString("");

                    InfoButtons[0]->update();
                    InfoButtons[1]->update();
                    InfoButtons[2]->update();
                    InfoButtons[3]->update();
                    InfoButtons[4]->update();
                    InfoButtons[5]->update();

                    returnButton->update();

                    switch (currentInfo)
                    {
                        case 0 :
                            editButton[0]->update();
                            editButton[1]->update();
                            editButton[2]->update();
                            editButton[3]->update();

                            infoSlider[0]->update();
                            infoSlider[1]->update();

                            break;
                        case 1 :
                            fileButton[0]->update();
                            fileButton[1]->update();
                            fileButton[2]->update();
                            fileButton[3]->update();
                            break;
                        case 2 :
                            editButton[4]->update();
                            editButton[5]->update();

                            infoSlider[2]->update();
                            infoSlider[3]->update();

                            break;
                        case 3 :
                            liquidButton[0]->update();
                            liquidButton[1]->update();
                            liquidButton[2]->update();

                            infoSlider[4]->update();

                            if (sectionb)
                            {
                                if (levelLiquidTypeb != 0)
                                    liquidButton[3]->update();
                            }
                            else
                            {
                                if (levelLiquidType != 0)
                                    liquidButton[3]->update();
                            }

                            break;
                        case 4 :
                            autoscrollButton[0]->update();
                            autoscrollButton[1]->update();
                            autoscrollButton[2]->update();

                            infoSlider[5]->update();

                            if (levelAutoscroll != 0)
                                autoscrollButton[3]->update();

                            break;
                        case 5 :
                            bowserCheckButton[0]->update();
                            bowserCheckButton[1]->update();
                            bowserCheckButton[2]->update();
                            bowserCheckButton[3]->update();
                            bowserCheckButton[4]->update();
                            bowserCheckButton[5]->update();
                            bowserCheckButton[6]->update();

                            if (bowserAttacks[0])
                            {
                                infoSlider[6]->update();
                                infoSlider[7]->update();
                            }

                            if (bowserAttacks[1])
                            {
                                infoSlider[8]->update();
                                infoSlider[9]->update();
                            }

                            if (bowserAttacks[2])
                            {
                                infoSlider[10]->update();
                                infoSlider[11]->update();
                            }

                            if (bowserAttacks[3])
                            {
                                infoSlider[12]->update();
                                infoSlider[13]->update();
                            }

                            if (bowserAttacks[4])
                            {
                                infoSlider[14]->update();
                                infoSlider[15]->update();
                            }

                            if (bowserAttacks[5])
                            {
                                infoSlider[16]->update();
                                infoSlider[17]->update();
                            }

                            infoSlider[18]->update();

                            editButton[6]->update();

                            if (bowserMusic)
                                editButton[7]->update();

                            if (helpText->getString() != "")
                            {
                                FloatRect textBounds(helpText->getGlobalBounds());
                                Uint8 textColor = helpText->getFillColor().r;

                                helpText->setOrigin(textBounds.width / 2, 0);
                                helpText->setPosition(mpos_relative.x, mpos_relative.y-22);

                                textBounds = helpText->getGlobalBounds();

                                if (selectionWillFadeOut)
                                {
                                    if (textColor > 8)
                                    {
                                        textColor -= 8;
                                        helpText->setFillColor(Color(textColor, textColor, 0, 255));
                                    }
                                    else
                                    {
                                        helpText->setFillColor(Color(0, 0, 0, 255));
                                        selectionWillFadeOut = false;
                                    }
                                }
                                else
                                {
                                    if (textColor < 247)
                                    {
                                        textColor += 8;
                                        helpText->setFillColor(Color(textColor, textColor, 0, 255));
                                    }
                                    else
                                    {
                                        helpText->setFillColor(Color(255, 255, 0, 255));
                                        selectionWillFadeOut = true;
                                    }
                                }

                                if (textBounds.left + textBounds.width > camPos.x+320)
                                    helpText->setPosition((camPos.x+320) - (textBounds.width/2), (mpos_relative.y-22) + (camPos.y-240));
                            }

                            break;
                    }
                }

                break;
            case LIQUID :
                if (!blockEditor)
                    UpdateAssetsLiquids();

                if (sectionb)
                {
                    if (levelbGradient != 0)
                        mainTexture.clear(backColorb);

                    switch (levelbBackground)
                    {
                        case 1  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[0]);     break;
                        case 2  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[1]);     break;
                        case 3  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[2]);     break;
                        case 4  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[3]);     break;
                        case 5  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[4]);     break;
                        case 6  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[5]);     break;
                        case 7  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[6]);     break;
                        case 8  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[7]);     break;
                        case 9  : mainTexture.draw(*background[8]);     break;
                        case 10 : mainTexture.draw(*background[9]);     break;
                        case 11 : mainTexture.draw(*background[10]);    break;
                        case 12 : mainTexture.draw(*background[11]);    break;
                        case 13 : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[13]);    break;
                        default : mainTexture.draw(&backGradient[0], 4, Quads); break;
                    }

                    if (levelbEffectb > 0)
                    {
                        if (levelbEffectb > 3)
                            mainTexture.draw(*effectClouds[1]);

                        mainTexture.draw(*effectClouds[0]);
                    }

                    if (!listTileb1.empty())
                    {
                        for (list<Tile>::iterator it = listTileb1.begin(); it != listTileb1.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listTileb2.empty())
                    {
                        for (list<Tile>::iterator it = listTileb2.begin(); it != listTileb2.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listTileb3.empty())
                    {
                        for (list<Tile>::iterator it = listTileb3.begin(); it != listTileb3.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listSceneriesb.empty())
                    {
                        for (list<Entity*>::iterator it = listSceneriesb.begin(); it != listSceneriesb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listEntitiesb.empty())
                    {
                        for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listBonusb.empty())
                    {
                        for (list<Entity*>::iterator it = listBonusb.begin(); it != listBonusb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (grabSpot)
                        mainTexture.draw(*spotRect);

                    mainTexture.draw(*liquidRect[1]);

                    if (!levelLiquidTriggerb.empty())
                    {
                        for (vector<Trigger>::iterator it = levelLiquidTriggerb.begin(); it != levelLiquidTriggerb.end(); it++)
                        {
                            Vector2f entityPos(it->getPosition());
                            Vector2u entitySze(it->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                            {
                                it->safeUpdate();

                                if (setLiquidSpots)
                                    it->update();

                                mainTexture.draw(*it);
                            }
                        }
                    }
                }
                else
                {
                    if (levelGradient != 0)
                        mainTexture.clear(backColor);

                    switch (levelBackground)
                    {
                        case 1  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[0]);     break;
                        case 2  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[1]);     break;
                        case 3  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[2]);     break;
                        case 4  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[3]);     break;
                        case 5  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[4]);     break;
                        case 6  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[5]);     break;
                        case 7  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[6]);     break;
                        case 8  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[7]);     break;
                        case 9  : mainTexture.draw(*background[8]);     break;
                        case 10 : mainTexture.draw(*background[9]);     break;
                        case 11 : mainTexture.draw(*background[10]);    break;
                        case 12 : mainTexture.draw(*background[11]);    break;
                        case 13 : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[12]);    break;
                        default : mainTexture.draw(&backGradient[0], 4, Quads); break;
                    }

                    if (levelEffectb > 0)
                    {
                        if (levelEffectb > 3)
                            mainTexture.draw(*effectClouds[1]);

                        mainTexture.draw(*effectClouds[0]);
                    }

                    if (!listTile1.empty())
                    {
                        for (list<Tile>::iterator it = listTile1.begin(); it != listTile1.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listTile2.empty())
                    {
                        for (list<Tile>::iterator it = listTile2.begin(); it != listTile2.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listTile3.empty())
                    {
                        for (list<Tile>::iterator it = listTile3.begin(); it != listTile3.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listSceneries.empty())
                    {
                        for (list<Entity*>::iterator it = listSceneries.begin(); it != listSceneries.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listEntities.empty())
                    {
                        for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listBonus.empty())
                    {
                        for (list<Entity*>::iterator it = listBonus.begin(); it != listBonus.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (grabSpot)
                        mainTexture.draw(*spotRect);

                    mainTexture.draw(*liquidRect[0]);

                    if (!levelLiquidTrigger.empty())
                    {
                        for (vector<Trigger>::iterator it = levelLiquidTrigger.begin(); it != levelLiquidTrigger.end(); it++)
                        {
                            Vector2f entityPos(it->getPosition());
                            Vector2u entitySze(it->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                            {
                                it->safeUpdate();

                                if (setLiquidSpots)
                                    it->update();

                                mainTexture.draw(*it);
                            }
                        }
                    }
                }

                mainTexture.draw(*grid);

                if (setLiquidSpots && !grabSpot)
                    mainTexture.draw(*spotCursor);

                if (sectionb)
                {
                    if (!listEntitiesb.empty())
                    {
                        for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                (*it)->drawb(&mainTexture);
                        }
                    }
                }
                else
                {
                    if (!listEntities.empty())
                    {
                        for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                (*it)->drawb(&mainTexture);
                        }
                    }
                }

                if (toolbarVisible)
                {
                    if (!blockEditor)
                    {
                        if (setLiquidSpots)
                        {
                            {
                                Vector2f itemPos(roundf((mpos_absolute.x + (camPos.x-320)) / 32) * 32, roundf((mpos_absolute.y + (camPos.y-240)) / 32) * 32);

                                if (sectionb)
                                {
                                    if (itemPos.x < 0)
                                        itemPos.x = 0;

                                    if (itemPos.x > (roomScaleb.x * 640) - 32)
                                        itemPos.x = (roomScaleb.x * 640) - 32;

                                    if (itemPos.y < 0)
                                        itemPos.y = 0;

                                    if (itemPos.y > (roomScaleb.y * 480) - 32)
                                        itemPos.y = (roomScaleb.y * 480) - 32;
                                }
                                else
                                {
                                    if (itemPos.x < 0)
                                        itemPos.x = 0;

                                    if (itemPos.x > (roomScale.x * 640) - 32)
                                        itemPos.x = (roomScale.x * 640) - 32;

                                    if (itemPos.y < 0)
                                        itemPos.y = 0;

                                    if (itemPos.y > (roomScale.y * 480) - 32)
                                        itemPos.y = (roomScale.y * 480) - 32;
                                }

                                spotCursor->setPosition(itemPos);
                            }

                            if (!((mpos_absolute.x > 572 && mpos_absolute.y > 448) || (mpos_absolute.x < 75 && mpos_absolute.y < 478 && mpos_absolute.y > 414)))
                            {
                                if (mousePressed == 1)
                                {
                                    grabSpot = true;

                                    spotRect->setPosition(spotCursor->getPosition());
                                }
                            }

                            if (mousePressed == 0 && grabSpot)
                            {
                                if (sectionb)
                                {
                                    unsigned int triggerCount = levelLiquidTriggerb.size();

                                    if (triggerCount < 26)
                                    {
                                        levelLiquidTriggerb.emplace_back(Trigger(spotRect->getPosition(), spotRect->getSize(), triggerCount, liquidTriggerText, editorMoveable, liquidRegulatorTex));

                                        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
                                    }
                                    else
                                        MessageBox(NULL, "You cannot place more than 26 Liquid Triggers !", "Trigger Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);

                                    #ifdef DEBUGMODE
                                    cout << levelLiquidTriggerb.size() << endl;
                                    #endif
                                }
                                else
                                {
                                    unsigned int triggerCount = levelLiquidTrigger.size();

                                    if (triggerCount < 26)
                                    {
                                        levelLiquidTrigger.emplace_back(Trigger(spotRect->getPosition(), spotRect->getSize(), triggerCount, liquidTriggerText, editorMoveable, liquidRegulatorTex));

                                        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
                                    }
                                    else
                                        MessageBox(NULL, "You cannot place more than 26 Liquid Triggers !", "Trigger Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);

                                    #ifdef DEBUGMODE
                                    cout << levelLiquidTrigger.size() << endl;
                                    #endif
                                }

                                grabSpot = false;
                            }
                        }
                        else
                        {
                            if (sectionb)
                            {
                                FloatRect rectBound(liquidRect[1]->getGlobalBounds());

                                liquidRect[1]->setOutlineColor(Color::Black);

                                if (!((mpos_absolute.x > 572 && mpos_absolute.y > 448) || (mpos_absolute.x < 75 && mpos_absolute.y < 478 && mpos_absolute.y > 414)))
                                {
                                    if (FloatRect(0, rectBound.top - 2, rectBound.width, rectBound.height + 4).contains(mpos_relative))
                                    {
                                        liquidRect[1]->setOutlineColor(Color::Yellow);

                                        if (mousePressed == 1)
                                            grabLiquid = true;
                                    }
                                }
                                else
                                    grabLiquid = false;

                                if (mousePressed == 0)
                                    grabLiquid = false;
                            }
                            else
                            {
                                FloatRect rectBound(liquidRect[0]->getGlobalBounds());

                                liquidRect[0]->setOutlineColor(Color::Black);

                                if (!((mpos_absolute.x > 572 && mpos_absolute.y > 448) || (mpos_absolute.x < 75 && mpos_absolute.y < 478 && mpos_absolute.y > 414)))
                                {
                                    if (FloatRect(0, rectBound.top - 2, rectBound.width, rectBound.height + 4).contains(mpos_relative))
                                    {
                                        liquidRect[0]->setOutlineColor(Color::Yellow);

                                        if (mousePressed == 1)
                                            grabLiquid = true;
                                    }
                                }
                                else
                                    grabLiquid = false;

                                if (mousePressed == 0)
                                    grabLiquid = false;
                            }
                        }

                        returnButton->setPosition(camPos.x-282, camPos.y+206);

                        liquidButton2[0]->setPosition(camPos.x+290, camPos.y+226);
                        liquidButton2[1]->setPosition(camPos.x+318, camPos.y+226);

                        stringPanel->setPosition(camPos.x+432, camPos.y+240);
                    }

                    mainTexture.draw(*returnButton);

                    mainTexture.draw(*stringPanel);

                    mainTexture.draw(*liquidButton2[0]);
                    mainTexture.draw(*liquidButton2[1]);

                    if (helpText->getString() != "")
                        mainTexture.draw(*helpText);

                    if (!blockEditor)
                    {
                        returnButton->update();

                        liquidButton2[0]->update();
                        liquidButton2[1]->update();
                    }
                }
                else
                {
                    if (!blockEditor)
                    {
                        if (setLiquidSpots)
                        {
                            {
                                Vector2f itemPos(roundf((mpos_absolute.x + (camPos.x-320)) / 32) * 32, roundf((mpos_absolute.y + (camPos.y-240)) / 32) * 32);

                                if (sectionb)
                                {
                                    if (itemPos.x < 0)
                                        itemPos.x = 0;

                                    if (itemPos.x > (roomScaleb.x * 640) - 32)
                                        itemPos.x = (roomScaleb.x * 640) - 32;

                                    if (itemPos.y < 0)
                                        itemPos.y = 0;

                                    if (itemPos.y > (roomScaleb.y * 480) - 32)
                                        itemPos.y = (roomScaleb.y * 480) - 32;
                                }
                                else
                                {
                                    if (itemPos.x < 0)
                                        itemPos.x = 0;

                                    if (itemPos.x > (roomScale.x * 640) - 32)
                                        itemPos.x = (roomScale.x * 640) - 32;

                                    if (itemPos.y < 0)
                                        itemPos.y = 0;

                                    if (itemPos.y > (roomScale.y * 480) - 32)
                                        itemPos.y = (roomScale.y * 480) - 32;
                                }

                                spotCursor->setPosition(itemPos);
                            }

                            if (mousePressed == 1)
                            {
                                grabSpot = true;

                                spotRect->setPosition(spotCursor->getPosition());
                            }

                            if (mousePressed == 0 && grabSpot)
                            {
                                if (sectionb)
                                {
                                    unsigned int triggerCount = levelLiquidTriggerb.size();

                                    if (triggerCount < 26)
                                        levelLiquidTriggerb.emplace_back(Trigger(spotRect->getPosition(), spotRect->getSize(), triggerCount, liquidTriggerText, editorMoveable, liquidRegulatorTex));
                                    else
                                        MessageBox(NULL, "You cannot place more than 26 Liquid Triggers !", "Trigger Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);

                                    #ifdef DEBUGMODE
                                    cout << levelLiquidTriggerb.size() << endl;
                                    #endif
                                }
                                else
                                {
                                    unsigned int triggerCount = levelLiquidTrigger.size();

                                    if (triggerCount < 26)
                                        levelLiquidTrigger.emplace_back(Trigger(spotRect->getPosition(), spotRect->getSize(), triggerCount, liquidTriggerText, editorMoveable, liquidRegulatorTex));
                                    else
                                        MessageBox(NULL, "You cannot place more than 26 Liquid Triggers !", "Trigger Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);

                                    #ifdef DEBUGMODE
                                    cout << levelLiquidTrigger.size() << endl;
                                    #endif
                                }

                                grabSpot = false;
                            }
                        }
                        else
                        {
                            if (sectionb)
                            {
                                FloatRect rectBound(liquidRect[1]->getGlobalBounds());

                                liquidRect[1]->setOutlineColor(Color::Black);

                                if (FloatRect(0, rectBound.top - 2, rectBound.width, rectBound.height + 4).contains(mpos_relative))
                                {
                                    liquidRect[1]->setOutlineColor(Color::Yellow);

                                    if (mousePressed == 1)
                                        grabLiquid = true;
                                }

                                if (mousePressed == 0)
                                    grabLiquid = false;
                            }
                            else
                            {
                                FloatRect rectBound(liquidRect[0]->getGlobalBounds());

                                liquidRect[0]->setOutlineColor(Color::Black);

                                if (FloatRect(0, rectBound.top - 2, rectBound.width, rectBound.height + 4).contains(mpos_relative))
                                {
                                    liquidRect[0]->setOutlineColor(Color::Yellow);

                                    if (mousePressed == 1)
                                        grabLiquid = true;
                                }

                                if (mousePressed == 0)
                                    grabLiquid = false;
                            }
                        }
                    }
                }

                if (grabLiquid && !blockEditor)
                {
                    float mouseY = mpos_relative.y;

                    if (sectionb)
                    {
                        liquidRect[1]->setOutlineColor(Color::White);

                        if (levelLiquidTypeb == 1)
                        {
                            if (mouseY < 0)
                            {
                                levelLiquidHeightb = 0;
                                liquidRect[1]->setPosition(0, -16);
                            }
                            else if (mouseY > roomScaleb.y * 480)
                            {
                                levelLiquidHeightb = roomScaleb.y * 480;
                                liquidRect[1]->setPosition(0, (roomScaleb.y * 480) - 16);
                            }
                            else
                            {
                                levelLiquidHeightb = mouseY;
                                liquidRect[1]->setPosition(0, mouseY - 16);
                            }
                        }
                        else
                        {
                            if (mouseY < 0)
                            {
                                levelLiquidHeightb = 0;
                                liquidRect[1]->setPosition(0, -32);
                            }
                            else if (mouseY > roomScaleb.y * 480)
                            {
                                levelLiquidHeightb = roomScaleb.y * 480;
                                liquidRect[1]->setPosition(0, (roomScaleb.y * 480) - 32);
                            }
                            else
                            {
                                levelLiquidHeightb = mouseY;
                                liquidRect[1]->setPosition(0, mouseY - 32);
                            }
                        }
                    }
                    else
                    {
                        liquidRect[0]->setOutlineColor(Color::White);

                        if (levelLiquidType == 1)
                        {
                            if (mouseY < 0)
                            {
                                levelLiquidHeight = 0;
                                liquidRect[0]->setPosition(0, -16);
                            }
                            else if (mouseY > roomScale.y * 480)
                            {
                                levelLiquidHeight = roomScale.y * 480;
                                liquidRect[0]->setPosition(0, (roomScale.y * 480) - 16);
                            }
                            else
                            {
                                levelLiquidHeight = mouseY;
                                liquidRect[0]->setPosition(0, mouseY - 16);
                            }
                        }
                        else
                        {
                            if (mouseY < 0)
                            {
                                levelLiquidHeight = 0;
                                liquidRect[0]->setPosition(0, -32);
                            }
                            else if (mouseY > roomScale.y * 480)
                            {
                                levelLiquidHeight = roomScale.y * 480;
                                liquidRect[0]->setPosition(0, (roomScale.y * 480) - 32);
                            }
                            else
                            {
                                levelLiquidHeight = mouseY;
                                liquidRect[0]->setPosition(0, mouseY - 32);
                            }
                        }
                    }
                }

                if (grabSpot && !blockEditor)
                {
                    Vector2f rectPos(spotRect->getPosition());

                    Vector2f newSize(roundf((mpos_relative.x - rectPos.x) / 32) * 32, roundf((mpos_relative.y - rectPos.y) / 32) * 32);

                    if (newSize.x < 32)
                        newSize.x = 32;

                    if (newSize.y < 32)
                        newSize.y = 32;

                    if (sectionb)
                    {
                        if (newSize.x > (roomScaleb.x * 640) - rectPos.x)
                            newSize.x = (roomScaleb.x * 640) - rectPos.x;

                        if (newSize.y > (roomScaleb.y * 480) - rectPos.y)
                            newSize.y = (roomScaleb.y * 480) - rectPos.y;
                    }
                    else
                    {
                        if (newSize.x > (roomScale.x * 640) - rectPos.x)
                            newSize.x = (roomScale.x * 640) - rectPos.x;

                        if (newSize.y > (roomScale.y * 480) - rectPos.y)
                            newSize.y = (roomScale.y * 480) - rectPos.y;
                    }

                    spotRect->setSize(newSize);
                }

                break;
            case AUTOSCROLL :
                if (!blockEditor)
                    UpdateAssetsLiquids();

                if (sectionb)
                {
                    if (levelbGradient != 0)
                        mainTexture.clear(backColorb);

                    switch (levelbBackground)
                    {
                        case 1  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[0]);     break;
                        case 2  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[1]);     break;
                        case 3  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[2]);     break;
                        case 4  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[3]);     break;
                        case 5  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[4]);     break;
                        case 6  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[5]);     break;
                        case 7  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[6]);     break;
                        case 8  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[7]);     break;
                        case 9  : mainTexture.draw(*background[8]);     break;
                        case 10 : mainTexture.draw(*background[9]);     break;
                        case 11 : mainTexture.draw(*background[10]);    break;
                        case 12 : mainTexture.draw(*background[11]);    break;
                        case 13 : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[13]);    break;
                        default : mainTexture.draw(&backGradient[0], 4, Quads); break;
                    }

                    if (levelbEffectb > 0)
                    {
                        if (levelbEffectb > 3)
                            mainTexture.draw(*effectClouds[1]);

                        mainTexture.draw(*effectClouds[0]);
                    }

                    if (!listTileb1.empty())
                    {
                        for (list<Tile>::iterator it = listTileb1.begin(); it != listTileb1.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listTileb2.empty())
                    {
                        for (list<Tile>::iterator it = listTileb2.begin(); it != listTileb2.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listTileb3.empty())
                    {
                        for (list<Tile>::iterator it = listTileb3.begin(); it != listTileb3.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listSceneriesb.empty())
                    {
                        for (list<Entity*>::iterator it = listSceneriesb.begin(); it != listSceneriesb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listEntitiesb.empty())
                    {
                        for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listBonusb.empty())
                    {
                        for (list<Entity*>::iterator it = listBonusb.begin(); it != listBonusb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (levelLiquidTypeb != 0)
                        mainTexture.draw(*liquidRect[1]);

                    if (!levelAutoscrollPath.empty())
                    {
                        unsigned int i = 0;

                        for (vector<Dragger>::iterator it = levelAutoscrollPath.begin(); it != levelAutoscrollPath.end(); it++)
                        {
                            Vector2f entityPos(it->getPosition() - Vector2f(304, 224));

                            if (entityPos.x + 640 > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + 480 > camPos.y-240 && entityPos.y < camPos.y+240)
                            {
                                it->update();
                                mainTexture.draw(*it);
                            }

                            (*autoscrollPathLine)[i].position = entityPos + Vector2f(320, 240);

                            i++;
                        }

                        mainTexture.draw(*autoscrollPathLine);
                    }
                }
                else
                {
                    if (levelGradient != 0)
                        mainTexture.clear(backColor);

                    switch (levelBackground)
                    {
                        case 1  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[0]);     break;
                        case 2  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[1]);     break;
                        case 3  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[2]);     break;
                        case 4  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[3]);     break;
                        case 5  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[4]);     break;
                        case 6  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[5]);     break;
                        case 7  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[6]);     break;
                        case 8  : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[7]);     break;
                        case 9  : mainTexture.draw(*background[8]);     break;
                        case 10 : mainTexture.draw(*background[9]);     break;
                        case 11 : mainTexture.draw(*background[10]);    break;
                        case 12 : mainTexture.draw(*background[11]);    break;
                        case 13 : mainTexture.draw(&backGradient[0], 4, Quads); mainTexture.draw(*background[12]);    break;
                        default : mainTexture.draw(&backGradient[0], 4, Quads); break;
                    }

                    if (levelEffectb > 0)
                    {
                        if (levelEffectb > 3)
                            mainTexture.draw(*effectClouds[1]);

                        mainTexture.draw(*effectClouds[0]);
                    }

                    if (!listTile1.empty())
                    {
                        for (list<Tile>::iterator it = listTile1.begin(); it != listTile1.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listTile2.empty())
                    {
                        for (list<Tile>::iterator it = listTile2.begin(); it != listTile2.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listTile3.empty())
                    {
                        for (list<Tile>::iterator it = listTile3.begin(); it != listTile3.end(); it++)
                        {
                            Vector2f tilePos(it->getPosition());

                            if (tilePos.x > camPos.x-352 && tilePos.x < camPos.x+320 && tilePos.y > camPos.y-272 && tilePos.y < camPos.y+240)
                                mainTexture.draw(*it, mainTileset);
                        }
                    }

                    if (!listSceneries.empty())
                    {
                        for (list<Entity*>::iterator it = listSceneries.begin(); it != listSceneries.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listEntities.empty())
                    {
                        for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (!listBonus.empty())
                    {
                        for (list<Entity*>::iterator it = listBonus.begin(); it != listBonus.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                mainTexture.draw(**it);
                        }
                    }

                    if (levelLiquidType != 0)
                        mainTexture.draw(*liquidRect[0]);

                    if (!levelAutoscrollPath.empty())
                    {
                        unsigned int i = 0;

                        for (vector<Dragger>::iterator it = levelAutoscrollPath.begin(); it != levelAutoscrollPath.end(); it++)
                        {
                            Vector2f entityPos(it->getPosition() - Vector2f(304, 224));

                            if (entityPos.x + 640 > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + 480 > camPos.y-240 && entityPos.y < camPos.y+240)
                            {
                                it->update();
                                mainTexture.draw(*it);
                            }

                            (*autoscrollPathLine)[i].position = entityPos + Vector2f(320, 240);

                            i++;
                        }

                        mainTexture.draw(*autoscrollPathLine);
                    }
                }

                mainTexture.draw(*grid);

                if (sectionb)
                {
                    if (!listEntitiesb.empty())
                    {
                        for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                (*it)->drawb(mainWindow);
                        }
                    }
                }
                else
                {
                    if (!listEntities.empty())
                    {
                        for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
                        {
                            Vector2f entityPos((*it)->getPosition());
                            Vector2u entitySze((*it)->getSize());

                            if (entityPos.x + entitySze.x > camPos.x-320 && entityPos.x < camPos.x+320 && entityPos.y + entitySze.y > camPos.y-240 && entityPos.y < camPos.y+240)
                                (*it)->drawb(mainWindow);
                        }
                    }
                }

                if (toolbarVisible)
                {
                    if (!blockEditor)
                    {
                        returnButton->setPosition(camPos.x-282, camPos.y+206);

                        autoscrollButton2[0]->setPosition(camPos.x+290, camPos.y+226);
                        autoscrollButton2[1]->setPosition(camPos.x+318, camPos.y+226);
                    }

                    mainTexture.draw(*returnButton);

                    stringPanel->setPosition(camPos.x+432, camPos.y+240);

                    mainTexture.draw(*stringPanel);

                    mainTexture.draw(*autoscrollButton2[0]);
                    mainTexture.draw(*autoscrollButton2[1]);

                    if (helpText->getString() != "")
                        mainTexture.draw(*helpText);

                    if (!blockEditor)
                    {
                        returnButton->update();

                        autoscrollButton2[0]->update();
                        autoscrollButton2[1]->update();
                    }
                }

                break;
        }

        if (returnToTitle)
        {
            if (fadeAlpha < 255 - FADESPEED)
                fadeAlpha += FADESPEED;
            else
            {
                exitLoop = true;
                targetScene = SCENE_TITLE;

                fadeRect->setPosition(0, 0);

                mainTexture.setView(View(Vector2f(320, 240), Vector2f(640, 480)));
            }
        }
        else
        {
            if (fadeAlpha > FADESPEED)
                fadeAlpha -= FADESPEED;
            else
                fadeAlpha = 0;
        }

        fadeRect->setFillColor(Color(0, 0, 0, fadeAlpha));

        if (fadeAlpha > 0)
            mainTexture.draw(*fadeRect);

        if (fadeCircle)
        {
            Vector2f circleSize = circleSpr->getScale();

            mainTexture.draw(*circleSpr, BlendMultiply);

            if (fadeAlpha > FADESPEED)
                fadeAlpha -= FADESPEED;
            else
                fadeAlpha = 0;

            if (circleSize.x > 0.01)
                circleSpr->scale(0.96, 0.96);
            else
            {
                Level_Test();

                delete circleSpr;
                circleSpr = NULL;

                delete circleFadeTex;
                circleFadeTex = NULL;

                fadeCircle = false;

                if (mainWindow->isOpen())
                    blockEditor = false;
                else
                    exitLoop = true;
            }

            blackBorder->setPosition(camPos.x-320, camPos.y-240);
            blackBorder->setSize(Vector2f(320 - (240 * circleSize.x), 480));

            mainTexture.draw(*blackBorder);

            blackBorder->setPosition(camPos.x + (240 * circleSize.x), camPos.y-240);
            blackBorder->setSize(Vector2f(320 - (240 * circleSize.x), 480));

            mainTexture.draw(*blackBorder);

            blackBorder->setPosition(camPos.x-320, camPos.y-240);
            blackBorder->setSize(Vector2f(640, 240 - (240 * circleSize.y)));

            mainTexture.draw(*blackBorder);

            blackBorder->setPosition(camPos.x - 320, camPos.y + (240 * circleSize.y));
            blackBorder->setSize(Vector2f(640, 240 - (240 * circleSize.y)));

            mainTexture.draw(*blackBorder);
        }

        if (exitLoop)
            mainTexture.clear(Color::Black);

        cursor->setPosition(mpos_relative);

        mainTexture.draw(*cursor);

        if (exitLoop)
            mainTexture.draw(*loading);

        mainTexture.display();

        mainWindow->clear(Color::Black);
        mainWindow->draw(textureRender);
        mainWindow->display();
    }

    listTile1.clear();
    listTile2.clear();
    listTile3.clear();

    for (list<Entity*>::iterator it = listSceneries.begin(); it != listSceneries.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listBonus.begin(); it != listBonus.end(); it++)
        delete *it;

    listSceneries.clear();
    listEntities.clear();
    listBonus.clear();

    listTileb1.clear();
    listTileb2.clear();
    listTileb3.clear();

    for (list<Entity*>::iterator it = listSceneriesb.begin(); it != listSceneriesb.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listBonusb.begin(); it != listBonusb.end(); it++)
        delete *it;

    listSceneriesb.clear();
    listEntitiesb.clear();
    listBonusb.clear();

    listWarps.clear();

    levelLiquidTrigger.clear();
    levelLiquidTriggerb.clear();

    levelAutoscrollPath.clear();

    if (resourcesArray[0] != NULL)
        delete resourcesArray[0];

    if (resourcesArray[1] != NULL)
        delete resourcesArray[1];

    if (resourcesArray[2] != NULL)
        delete resourcesArray[2];

    if (resourcesArray[3] != NULL)
        delete resourcesArray[3];

    if (resourcesArray[4] != NULL)
        delete resourcesArray[4];

    delete layer1TileMatrix;
    delete layer2TileMatrix;
    delete layer3TileMatrix;

    delete entityMatrix;

    delete layer1TileMatrixb;
    delete layer2TileMatrixb;
    delete layer3TileMatrixb;

    delete entityMatrixb;

    if (circleFadeTex != NULL)
        delete circleFadeTex;

    delete fadeRect;

    delete effectLightningSpr;

    delete gridTex;
    delete toolboxTex;
    delete stringPanelTex;
    delete resizerTex;
    delete scrollTex;
    delete layerTex;
    delete typeTex;
    delete prefsTex;
    delete checkButtonTex;
    delete editorMoveable;
    delete nodesTex;
    delete speedRegTex;
    delete sliderTex;
    delete sliderSTex;
    delete warpsTex;
    delete notesTex;
    delete panelTex;
    delete liquidButtonTex;
    delete liquidTriggerText;
    delete liquidRegulatorTex;
    delete autoscrollButtonTex;
    delete infoTexts[0];
    delete infoTexts[1];
    delete infoTexts[2];
    delete infoTexts[3];
    delete infoTexts[4];
    delete infoTexts[5];
    delete infoTexts[6];
    delete infoTexts[7];
    delete infoTexts[8];
    delete infoTexts[9];
    delete infoTexts[10];
    delete infoTexts[11];
    delete infoTexts[12];
    delete returnButtonTex;
    delete elements[0];
    delete elements[1];
    delete elements[2];
    delete elements[3];
    delete elements[4];
    delete elements[5];
    delete elements[6];
    delete menuTextTex[0];
    delete menuTextTex[1];
    delete menuTextTex[2];
    delete menuTextTex[3];
    delete menuTextTex[4];
    delete menuTextTex[5];
    delete menuButtonTex[0];
    delete menuButtonTex[1];
    delete menuButtonTex[2];
    delete menuButtonTex[3];
    delete menuButtonTex[4];
    delete menuButtonTex[5];
    delete menuButtonTex[6];
    delete menuButtonTex[7];
    delete mainTileset;
    delete backgroundTxt[0];
    delete backgroundTxt[1];
    delete backgroundTxt[2];
    delete backgroundTxt[3];
    delete backgroundTxt[4];
    delete backgroundTxt[5];
    delete backgroundTxt[6];
    delete backgroundTxt[7];
    delete backgroundTxt[8];
    delete backgroundTxt[9];
    delete backgroundTxt[10];
    delete backgroundTxt[11];
    delete backgroundTxt[14];
    delete backgroundTxt[15];
    delete effectTex[0];
    delete effectTex[1];
    delete effectTex[2];

    delete editorTxt[0];
    delete editorTxt[1];
    delete editorTxt[2];
    delete editorTxt[3];
    delete editorTxt[4];

    if (backgroundTxt[12] != NULL)
        delete backgroundTxt[12];

    if (backgroundTxt[13] != NULL)
        delete backgroundTxt[13];

    if (circleSpr != NULL)
        delete circleSpr;

    delete blackBorder;
    delete toolbox;
    delete layerPanel;
    delete stringPanel;
    delete returnButton;
    delete menuText[0];
    delete menuText[1];
    delete menuText[2];
    delete menuText[3];
    delete menuText[4];
    delete menuText[5];
    delete musicButton[0];
    delete musicButton[1];
    delete musicButton[2];
    delete musicButton[3];
    delete musicButton[4];
    delete musicButton[5];
    delete musicButton[6];
    delete musicButton[7];
    delete musicButton[8];
    delete musicButton[9];
    delete musicButton[10];
    delete musicButton[11];
    delete musicButton[12];
    delete musicButton[13];
    delete musicButton[14];
    delete musicButton[15];
    delete musicButton[16];
    delete musicButton[17];
    delete musicButton[18];
    delete musicButton[19];
    delete musicButton[20];
    delete musicButton[21];
    delete musicButton[22];
    delete backgroundButton[0];
    delete backgroundButton[1];
    delete backgroundButton[2];
    delete backgroundButton[3];
    delete backgroundButton[4];
    delete backgroundButton[5];
    delete backgroundButton[6];
    delete backgroundButton[7];
    delete backgroundButton[8];
    delete backgroundButton[9];
    delete backgroundButton[10];
    delete backgroundButton[11];
    delete backgroundButton[12];
    delete backgroundButton[13];
    delete backgroundButton[14];
    delete backgroundButton[15];
    delete gradientButton[0];
    delete gradientButton[1];
    delete gradientButton[2];
    delete gradientElements[0];
    delete gradientElements[1];
    delete gradientElements[2];
    delete effectButton[0];
    delete effectButton[1];
    delete effectButton[2];
    delete effectButton[3];
    delete effectCheckButton[0];
    delete effectCheckButton[1];
    delete effectCheckButton[2];
    delete effectCheckButton[3];
    delete effectCheckButton[4];
    delete effectCheckButton[5];
    delete bowserCheckButton[0];
    delete bowserCheckButton[1];
    delete bowserCheckButton[2];
    delete bowserCheckButton[3];
    delete bowserCheckButton[4];
    delete bowserCheckButton[5];
    delete bowserCheckButton[6];
    delete fileButton[0];
    delete fileButton[1];
    delete fileButton[2];
    delete fileButton[3];
    delete editButton[0];
    delete editButton[1];
    delete editButton[2];
    delete editButton[3];
    delete editButton[4];
    delete editButton[5];
    delete editButton[6];
    delete editButton[7];
    delete liquidButton[0];
    delete liquidButton[1];
    delete liquidButton[2];
    delete liquidButton[3];
    delete autoscrollButton[0];
    delete autoscrollButton[1];
    delete autoscrollButton[2];
    delete autoscrollButton[3];
    delete InfoButtons[0];
    delete InfoButtons[1];
    delete InfoButtons[2];
    delete InfoButtons[3];
    delete InfoButtons[4];
    delete InfoButtons[5];
    delete infoRegulator;
    delete infoSRegulator;
    delete effectElements[0];
    delete effectElements[1];
    delete effectElements[2];
    delete effectElements[3];
    delete effectElements[4];
    delete effectElements[5];
    delete tilesetSpr;
    delete background[0];
    delete background[1];
    delete background[2];
    delete background[3];
    delete background[4];
    delete background[5];
    delete background[6];
    delete background[7];
    delete background[8];
    delete background[9];
    delete background[10];
    delete background[11];
    delete background[14];
    delete background[15];
    delete effectClouds[0];
    delete effectClouds[1];

    if (background[12] != NULL)
        delete background[12];

    if (background[13] != NULL)
        delete background[13];

    delete liquidRect[0];
    delete liquidRect[1];

    delete spotRect;
    delete spotCursor;

    delete itemHandled;

    delete resizerButton[0];
    delete resizerButton[1];
    delete resizerButton[2];
    delete resizerButton[3];

    delete scrollButton[0];
    delete scrollButton[1];

    delete layerButton[0];
    delete layerButton[1];
    delete layerButton[2];

    delete typeButton[0];
    delete typeButton[1];
    delete typeButton[2];
    delete typeButton[3];
    delete typeButton[4];
    delete typeButton[5];
    delete typeButton[6];
    delete typeButton[7];
    delete typeButton[8];

    delete prefsButton[0];
    delete prefsButton[1];
    delete prefsButton[2];
    delete prefsButton[3];
    delete prefsButton[4];
    delete prefsButton[5];

    delete liquidButton2[0];
    delete liquidButton2[1];

    delete autoscrollButton2[0];
    delete autoscrollButton2[1];

    delete helpText;
    delete helpFont;

    delete infoSlider[0];
    delete infoSlider[1];
    delete infoSlider[2];
    delete infoSlider[3];
    delete infoSlider[4];
    delete infoSlider[5];
    delete infoSlider[6];
    delete infoSlider[7];
    delete infoSlider[8];
    delete infoSlider[9];
    delete infoSlider[10];
    delete infoSlider[11];
    delete infoSlider[12];
    delete infoSlider[13];
    delete infoSlider[14];
    delete infoSlider[15];
    delete infoSlider[16];
    delete infoSlider[17];
    delete infoSlider[18];

    delete infoText;
    delete infoFont;

    delete autoscrollPathLine;

    delete grid;
    delete tilesetRect;
    delete tileSelection;
    delete infosText[0];
    delete infosText[1];
    delete infosText[2];
    delete infosText[3];
    delete infosText[4];
    delete infosText[5];
    delete infosText[6];
    delete infosText[7];
    delete infosText[8];
    delete infosText[9];
    delete infosText[10];
    delete infosText[11];
    delete gradientColor[0];
    delete gradientColor[1];

    delete elementsEsssential[0];
    delete elementsEsssential[1];
    delete elementsEsssential[2];

    delete effectTxt[0];
    delete effectTxt[1];
    delete effectTxt[2];
    delete effectTxt[3];
    delete effectTxt[4];
    delete effectTxt[5];
    delete effectTxt[6];
    delete effectTxt[7];
    delete effectTxt[8];
    delete effectTxt[9];
    delete effectTxt[10];
    delete effectTxt[11];
    delete effectTxt[12];
    delete effectTxt[13];
    delete effectTxt[14];
    delete effectTxt[15];

    delete itemsTxt[0];
    delete itemsTxt[1];
    delete itemsTxt[2];
    delete itemsTxt[3];
    delete itemsTxt[4];
    delete itemsTxt[5];
    delete itemsTxt[6];
    delete itemsTxt[7];
    delete itemsTxt[8];
    delete itemsTxt[9];
    delete itemsTxt[10];

    delete sceneriesTxt[0];
    delete sceneriesTxt[1];
    delete sceneriesTxt[2];
    delete sceneriesTxt[3];
    delete sceneriesTxt[4];
    delete sceneriesTxt[5];
    delete sceneriesTxt[6];
    delete sceneriesTxt[7];
    delete sceneriesTxt[8];
    delete sceneriesTxt[9];
    delete sceneriesTxt[10];
    delete sceneriesTxt[11];
    delete sceneriesTxt[12];
    delete sceneriesTxt[13];

    delete enemiesTxt[0];
    delete enemiesTxt[1];
    delete enemiesTxt[2];
    delete enemiesTxt[3];
    delete enemiesTxt[4];
    delete enemiesTxt[5];
    delete enemiesTxt[6];
    delete enemiesTxt[7];
    delete enemiesTxt[8];
    delete enemiesTxt[9];
    delete enemiesTxt[10];
    delete enemiesTxt[11];
    delete enemiesTxt[12];
    delete enemiesTxt[13];
    delete enemiesTxt[14];
    delete enemiesTxt[15];
    delete enemiesTxt[16];
    delete enemiesTxt[17];
    delete enemiesTxt[18];
    delete enemiesTxt[19];
    delete enemiesTxt[20];
    delete enemiesTxt[21];
    delete enemiesTxt[22];
    delete enemiesTxt[23];
    delete enemiesTxt[24];
    delete enemiesTxt[25];
    delete enemiesTxt[26];
    delete enemiesTxt[27];
    delete enemiesTxt[28];
    delete enemiesTxt[29];
    delete enemiesTxt[30];
    delete enemiesTxt[31];
    delete enemiesTxt[32];
    delete enemiesTxt[33];
    delete enemiesTxt[34];
    delete enemiesTxt[35];
    delete enemiesTxt[36];
    delete enemiesTxt[37];
    delete enemiesTxt[38];
    delete enemiesTxt[39];
    delete enemiesTxt[40];
    delete enemiesTxt[41];

    delete hazardsTxt[0];
    delete hazardsTxt[1];
    delete hazardsTxt[2];
    delete hazardsTxt[3];
    delete hazardsTxt[4];
    delete hazardsTxt[5];
    delete hazardsTxt[6];
    delete hazardsTxt[7];
    delete hazardsTxt[8];
    delete hazardsTxt[9];
    delete hazardsTxt[10];

    delete marksTxt[0];
    delete marksTxt[1];
    delete marksTxt[2];
    delete marksTxt[3];
    delete marksTxt[4];
    delete marksTxt[5];
    delete marksTxt[6];
    delete marksTxt[7];
    delete marksTxt[8];
    delete marksTxt[9];
    delete marksTxt[10];
    delete marksTxt[11];

    delete marioTxt[0];
    delete marioTxt[1];
    delete marioTxt[2];
    delete marioTxt[3];
    delete marioTxt[4];
    delete marioTxt[5];

    delete hudTxt[0];
    delete hudTxt[1];
    delete hudTxt[2];
    delete hudTxt[3];
    delete hudTxt[4];
    delete hudTxt[5];
    delete hudTxt[6];

    for (register unsigned int i = 0; i < 35; i++)
        delete elementsPlatforms[i];

    for (register unsigned int i = 0; i < 30; i++)
        delete elementsBonus[i];

    for (register unsigned int i = 0; i < 36; i++)
        delete elementsPipes[i];

    for (register unsigned int i = 0; i < 26; i++)
        delete elementsSceneries[i];

    for (register unsigned int i = 0; i < 57; i++)
        delete elementsEnemies[i];

    for (register unsigned int i = 0; i < 46; i++)
        delete elementsHazards[i];

    delete camera;

    #ifndef NOMUSIC
    {
        FMOD_BOOL isPlaying;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_Sound_Release(sfxSamples[0]);
        FMOD_Sound_Release(sfxSamples[1]);
        FMOD_Sound_Release(sfxSamples[2]);
        FMOD_Sound_Release(sfxSamples[3]);
        FMOD_Sound_Release(sfxSamples[4]);
        FMOD_Sound_Release(sfxSamples[5]);
        FMOD_Sound_Release(sfxSamples[6]);
        FMOD_Sound_Release(sfxSamples[7]);
        FMOD_Sound_Release(sfxSamples[8]);
        FMOD_Sound_Release(sfxSamples[9]);
        FMOD_Sound_Release(sfxSamples[10]);
        FMOD_Sound_Release(sfxSamples[11]);
        FMOD_Sound_Release(sfxSamples[12]);
        FMOD_Sound_Release(sfxSamples[13]);
        FMOD_Sound_Release(sfxSamples[14]);
        FMOD_Sound_Release(sfxSamples[15]);
        FMOD_Sound_Release(sfxSamples[16]);
        FMOD_Sound_Release(sfxSamples[17]);
        FMOD_Sound_Release(sfxSamples[18]);
        FMOD_Sound_Release(sfxSamples[19]);
        FMOD_Sound_Release(sfxSamples[20]);
        FMOD_Sound_Release(sfxSamples[21]);
        FMOD_Sound_Release(sfxSamples[22]);
        FMOD_Sound_Release(sfxSamples[23]);
        FMOD_Sound_Release(sfxSamples[24]);
        FMOD_Sound_Release(sfxSamples[25]);
        FMOD_Sound_Release(sfxSamples[26]);
        FMOD_Sound_Release(sfxSamples[27]);
        FMOD_Sound_Release(sfxSamples[28]);
        FMOD_Sound_Release(sfxSamples[29]);
        FMOD_Sound_Release(sfxSamples[30]);
        FMOD_Sound_Release(sfxSamples[31]);
        FMOD_Sound_Release(sfxSamples[32]);
        FMOD_Sound_Release(sfxSamples[33]);
        FMOD_Sound_Release(sfxSamples[34]);

        FMOD_Sound_Release(musicSamples[0]);
        FMOD_Sound_Release(musicSamples[1]);
        FMOD_Sound_Release(musicSamples[2]);
        FMOD_Sound_Release(musicSamples[3]);
        FMOD_Sound_Release(musicSamples[4]);
        FMOD_Sound_Release(musicSamples[5]);
        FMOD_Sound_Release(musicSamples[6]);
        FMOD_Sound_Release(musicSamples[7]);
        FMOD_Sound_Release(musicSamples[8]);
        FMOD_Sound_Release(musicSamples[9]);
        FMOD_Sound_Release(musicSamples[10]);
        FMOD_Sound_Release(musicSamples[11]);
        FMOD_Sound_Release(musicSamples[12]);
        FMOD_Sound_Release(musicSamples[13]);
        FMOD_Sound_Release(musicSamples[14]);
        FMOD_Sound_Release(musicSamples[15]);
        FMOD_Sound_Release(musicSamples[16]);
        FMOD_Sound_Release(musicSamples[17]);
        FMOD_Sound_Release(musicSamples[18]);
        FMOD_Sound_Release(musicSamples[19]);
        FMOD_Sound_Release(musicSamples[20]);
        FMOD_Sound_Release(musicSamples[21]);
        FMOD_Sound_Release(musicSamples[25]);
        FMOD_Sound_Release(musicSamples[26]);
        FMOD_Sound_Release(musicSamples[27]);
    }
    #endif

    FMOD_Sound_Release(switchVisibility);
    FMOD_Sound_Release(buttonClick);
    FMOD_Sound_Release(itemPut);
    FMOD_Sound_Release(itemDelete);
    FMOD_Sound_Release(testLevel);

    if (editorMusic)
    {
        FMOD_BOOL isPlaying;

        FMOD_Channel_IsPlaying(musicChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicChannel);

        FMOD_Sound_Release(edMusic);
    }

    return true;
}

static bool InitAssets()
{
    bool allright = true;
    FMOD_RESULT result;

    int musicNumber = (rand() % 4) + 1;

    topColor = Color(0, 111, 223);
    bottomColor = Color(242, 253, 252);

    topColorb = Color(0, 111, 223);
    bottomColorb = Color(242, 253, 252);

    backColor = Color::Black;
    backColorb = Color::Black;

    roomScale = Vector2i(2, 1);
    roomScaleb = Vector2i(1, 1);

    cameraSpeed = Vector2f(0, 0);

    helpFont = new Font();

    if (!helpFont->loadFromFile("Data/Fonts/Font_EditorHelp.ttf"))
        allright = false;

    infoFont = new Font();

    if (!infoFont->loadFromFile("Data/Fonts/Font_Infos.otf"))
        allright = false;

    helpText = new Text("", *helpFont, 20);
    helpText->setFillColor(Color(255, 255, 255, 255));
    helpText->setStyle(Text::Bold | Text::Italic);

    infoText = new Text("", *infoFont, 20);
    infoText->setFillColor(Color(255, 200, 200, 255));

    toolbarVisible = true;
    selectionWillFadeOut = true;
    blockMouse = false;
    blockPlacements = false;
    returnToTitle = false;
    blockEditor = false;
    sectionb = false;
    fadeCircle = false;

    elementsLine = 0;

    lastLine_platforms = 1;
    lastLine_bonuses = 8;
    lastLine_sceneries = 13;
    lastLine_pipes = 19;
    lastLine_enemies = 27;
    lastLine_hazards = 41;

    setLiquidSpots = false;

    grabLiquid = false;
    grabSpot = false;

    filegrab[0] = '\0';

    currentMenu = EDITION;
    currentSelection = NONE;

    layerNumb = 1;

    tileNumbX = 0;
    tileNumbY = 0;

    elementSelected = 0;

    levelMusic = 0;
    levelBackground = 0;
    levelGradient = 0;
    levelEffect = 0;
    levelEffectb = 0;

    levelbMusic = 1;
    levelbBackground = 10;
    levelbGradient = 0;
    levelbEffect = 0;
    levelbEffectb = 0;

    startArea = 0;

    levelName = "World Name";
    levelAuthor = "Author Name";

    levelGravity = 5;
    levelTime = 400;

    levelAutoscroll = 0;
    levelAutoscrollSpeed = 1;

    levelBackAlpha = 255;
    levelFrontAlpha = 255;

    levelBackAlphab = 255;
    levelFrontAlphab = 255;

    levelLiquidType = 0;
    levelLiquidHeight = 280;

    levelLiquidTypeb = 0;
    levelLiquidHeightb = 280;

    levelLiquidSpeed = 1;

    bowserAttacks[0] = 1;
    bowserAttacks[1] = 1;
    bowserAttacks[2] = 1;
    bowserAttacks[3] = 0;
    bowserAttacks[4] = 0;
    bowserAttacks[5] = 0;

    bowserFrequences[0] = 5;
    bowserFrequences[1] = 5;
    bowserFrequences[2] = 10;
    bowserFrequences[3] = 10;
    bowserFrequences[4] = 10;
    bowserFrequences[5] = 10;

    bowserSpeeds[0] = 5;
    bowserSpeeds[1] = 1;
    bowserSpeeds[2] = 5;
    bowserSpeeds[3] = 5;
    bowserSpeeds[4] = 5;
    bowserSpeeds[5] = 5;

    bowserTrail = 0;
    bowserHealth = 6;

    bowserMusic = 0;

    startPosition = Vector2f(-1, -1);

    camPos.x = 320;
    camPos.y = 240;

    camPosMem.x = 320;
    camPosMem.y = 240;

    levelDir = "";

    resourcesArray[0] = NULL;
    resourcesArray[1] = NULL;
    resourcesArray[2] = NULL;
    resourcesArray[3] = NULL;
    resourcesArray[4] = NULL;

    backGradient[0].position = Vector2f(0, 0);
    backGradient[1].position = Vector2f(1280, 0);
    backGradient[2].position = Vector2f(1280, 480);
    backGradient[3].position = Vector2f(0, 480);

    backGradient[0].color = topColor;
    backGradient[1].color = topColor;
    backGradient[2].color = bottomColor;
    backGradient[3].color = bottomColor;

    panelInfo[0].texCoords = Vector2f(0, 0);
    panelInfo[1].texCoords = Vector2f(16, 0);
    panelInfo[2].texCoords = Vector2f(16, 16);
    panelInfo[3].texCoords = Vector2f(0, 16);
    panelInfo[4].texCoords = Vector2f(16, 0);
    panelInfo[5].texCoords = Vector2f(32, 0);
    panelInfo[6].texCoords = Vector2f(32, 16);
    panelInfo[7].texCoords = Vector2f(16, 16);
    panelInfo[8].texCoords = Vector2f(32, 0);
    panelInfo[9].texCoords = Vector2f(48, 0);
    panelInfo[10].texCoords = Vector2f(48, 16);
    panelInfo[11].texCoords = Vector2f(32, 16);
    panelInfo[12].texCoords = Vector2f(0, 16);
    panelInfo[13].texCoords = Vector2f(16, 16);
    panelInfo[14].texCoords = Vector2f(16, 32);
    panelInfo[15].texCoords = Vector2f(0, 32);
    panelInfo[16].texCoords = Vector2f(16, 16);
    panelInfo[17].texCoords = Vector2f(32, 16);
    panelInfo[18].texCoords = Vector2f(32, 32);
    panelInfo[19].texCoords = Vector2f(16, 32);
    panelInfo[20].texCoords = Vector2f(32, 16);
    panelInfo[21].texCoords = Vector2f(48, 16);
    panelInfo[22].texCoords = Vector2f(48, 32);
    panelInfo[23].texCoords = Vector2f(32, 32);
    panelInfo[24].texCoords = Vector2f(0, 32);
    panelInfo[25].texCoords = Vector2f(16, 32);
    panelInfo[26].texCoords = Vector2f(16, 48);
    panelInfo[27].texCoords = Vector2f(0, 48);
    panelInfo[28].texCoords = Vector2f(16, 32);
    panelInfo[29].texCoords = Vector2f(32, 32);
    panelInfo[30].texCoords = Vector2f(32, 48);
    panelInfo[31].texCoords = Vector2f(16, 48);
    panelInfo[32].texCoords = Vector2f(32, 32);
    panelInfo[33].texCoords = Vector2f(48, 32);
    panelInfo[34].texCoords = Vector2f(48, 48);
    panelInfo[35].texCoords = Vector2f(32, 48);

    layer1TileMatrix = new Matrix(40, 15);
    layer2TileMatrix = new Matrix(40, 15);
    layer3TileMatrix = new Matrix(40, 15);

    entityMatrix = new Matrix(40, 15);

    layer1TileMatrixb = new Matrix(20, 15);
    layer2TileMatrixb = new Matrix(20, 15);
    layer3TileMatrixb = new Matrix(20, 15);

    entityMatrixb = new Matrix(20, 15);

    lastWarp = NULL;

    warpsCount = 0;
    currentInfo = 0;

    {
        Image tempImg;

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Grid.bmp"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        gridTex = new Texture;
        gridTex->loadFromImage(tempImg);
        gridTex->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Arrow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        resizerTex = new Texture;
        resizerTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Scroll.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        scrollTex = new Texture;
        scrollTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_StringBox.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        stringPanelTex = new Texture;
        stringPanelTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_LayerButtons.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        layerTex = new Texture;
        layerTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Categories.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        typeTex = new Texture;
        typeTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_SettingsButtons.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        prefsTex = new Texture;
        prefsTex->loadFromImage(tempImg);

        panelTex = new Texture;

        if (!panelTex->loadFromFile("Data/Gfx/Editor/Editor_Panel.png"))
            allright = false;

        returnButtonTex = new Texture;

        if (!returnButtonTex->loadFromFile("Data/Gfx/Editor/Buttons/Button_Return.png"))
            allright = false;

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_Musics.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        menuButtonTex[0] = new Texture;
        menuButtonTex[0]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_GradientMode.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        menuButtonTex[2] = new Texture;
        menuButtonTex[2]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_GradientColor.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        menuButtonTex[3] = new Texture;
        menuButtonTex[3]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_GradientMix.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        menuButtonTex[4] = new Texture;
        menuButtonTex[4]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_Effects.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        menuButtonTex[5] = new Texture;
        menuButtonTex[5]->loadFromImage(tempImg);

        menuButtonTex[7] = new Texture;

        if (!menuButtonTex[7]->loadFromFile("Data/Gfx/Editor/Buttons/Button_Infos.png"))
            allright = false;

        if (!tempImg.loadFromFile("Data/Gfx/Tilesets/Tileset_Default.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        mainTileset = new Texture;
        mainTileset->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Backgrounds/Background_Lands.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        backgroundTxt[0] = new Texture;
        backgroundTxt[0]->loadFromImage(tempImg);
        backgroundTxt[0]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Backgrounds/Background_Autumn.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        backgroundTxt[1] = new Texture;
        backgroundTxt[1]->loadFromImage(tempImg);
        backgroundTxt[1]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Backgrounds/Background_Desert.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        backgroundTxt[2] = new Texture;
        backgroundTxt[2]->loadFromImage(tempImg);
        backgroundTxt[2]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Backgrounds/Background_Blue.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        backgroundTxt[14] = new Texture;
        backgroundTxt[14]->loadFromImage(tempImg);
        backgroundTxt[14]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Backgrounds/Background_Snow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        backgroundTxt[15] = new Texture;
        backgroundTxt[15]->loadFromImage(tempImg);
        backgroundTxt[15]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Backgrounds/Background_Night.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        backgroundTxt[3] = new Texture;
        backgroundTxt[3]->loadFromImage(tempImg);
        backgroundTxt[3]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Backgrounds/Background_Underwater.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        backgroundTxt[4] = new Texture;
        backgroundTxt[4]->loadFromImage(tempImg);
        backgroundTxt[4]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Backgrounds/Background_Rocky.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        backgroundTxt[5] = new Texture;
        backgroundTxt[5]->loadFromImage(tempImg);
        backgroundTxt[5]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Backgrounds/Background_Clouds.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        backgroundTxt[6] = new Texture;
        backgroundTxt[6]->loadFromImage(tempImg);
        backgroundTxt[6]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Backgrounds/Background_DarkClouds.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        backgroundTxt[7] = new Texture;
        backgroundTxt[7]->loadFromImage(tempImg);
        backgroundTxt[7]->setRepeated(true);

        backgroundTxt[8] = new Texture;

        if (!backgroundTxt[8]->loadFromFile("Data/Gfx/Backgrounds/Background_Castle.png"))
            allright = false;

        backgroundTxt[8]->setRepeated(true);

        backgroundTxt[9] = new Texture;

        if (!backgroundTxt[9]->loadFromFile("Data/Gfx/Backgrounds/Background_Underground.png"))
            allright = false;

        backgroundTxt[9]->setRepeated(true);

        backgroundTxt[10] = new Texture;

        if (!backgroundTxt[10]->loadFromFile("Data/Gfx/Backgrounds/Background_DarkCave.png"))
            allright = false;

        backgroundTxt[10]->setRepeated(true);

        backgroundTxt[11] = new Texture;

        if (!backgroundTxt[11]->loadFromFile("Data/Gfx/Backgrounds/Background_LavaCave.png"))
            allright = false;

        backgroundTxt[11]->setRepeated(true);

        backgroundTxt[12] = NULL;
        backgroundTxt[13] = NULL;

        checkButtonTex = new Texture;

        if (!checkButtonTex->loadFromFile("Data/Gfx/Editor/Buttons/Button_Check.png"))
            allright = false;

        checkButtonTex->setSmooth(true);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_SpeedRegulator.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        speedRegTex = new Texture;
        speedRegTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Warps.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        warpsTex = new Texture;
        warpsTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_WarpNotes.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        notesTex = new Texture;
        notesTex->loadFromImage(tempImg);

        menuTextTex[0] = new Texture;

        if (!menuTextTex[0]->loadFromFile("Data/Gfx/Editor/Texts/Tileset_Help.png"))
            allright = false;

        menuTextTex[1] = new Texture;

        if (!menuTextTex[1]->loadFromFile("Data/Gfx/Editor/Texts/Music_Help.png"))
            allright = false;

        menuTextTex[2] = new Texture;

        if (!menuTextTex[2]->loadFromFile("Data/Gfx/Editor/Texts/Background_Help.png"))
            allright = false;

        menuTextTex[3] = new Texture;

        if (!menuTextTex[3]->loadFromFile("Data/Gfx/Editor/Texts/Gradient_Help.png"))
            allright = false;

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Texts/Gradient_Mode.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        menuTextTex[4] = new Texture;
        menuTextTex[4]->loadFromImage(tempImg);

        menuTextTex[5] = new Texture;

        if (!menuTextTex[5]->loadFromFile("Data/Gfx/Editor/Texts/Effects_Help.png"))
            allright = false;

        menuButtonTex[1] = new Texture;

        if (!menuButtonTex[1]->loadFromFile("Data/Gfx/Editor/Buttons/Button_Backgrounds.png"))
            allright = false;

        menuButtonTex[6] = new Texture;

        if (!menuButtonTex[6]->loadFromFile("Data/Gfx/Editor/Buttons/Button_EffectClouds.png"))
            allright = false;

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_DayClouds.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTex[0] = new Texture;
        effectTex[0]->loadFromImage(tempImg);
        effectTex[0]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_SandClouds.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTex[1] = new Texture;
        effectTex[1]->loadFromImage(tempImg);
        effectTex[1]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_DarkClouds.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTex[2] = new Texture;
        effectTex[2]->loadFromImage(tempImg);
        effectTex[2]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_Liquid.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        liquidButtonTex = new Texture;
        liquidButtonTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_TriggerText.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        liquidTriggerText = new Texture;
        liquidTriggerText->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_LiquidRegulator.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        liquidRegulatorTex = new Texture;
        liquidRegulatorTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_Autoscroll.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        autoscrollButtonTex = new Texture;
        autoscrollButtonTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_DayClouds.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[0] = new Texture;
        effectTxt[0]->loadFromImage(tempImg);
        effectTxt[0]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_DarkClouds.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[1] = new Texture;
        effectTxt[1]->loadFromImage(tempImg);
        effectTxt[1]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_SandClouds.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[2] = new Texture;
        effectTxt[2]->loadFromImage(tempImg);
        effectTxt[2]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_Rain.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[3] = new Texture;
        effectTxt[3]->loadFromImage(tempImg);
        effectTxt[3]->setRepeated(true);

        effectTxt[4] = new Texture;

        if (!effectTxt[4]->loadFromFile("Data/Gfx/Effects/Effect_Lightning.jpg"))
            allright = false;

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_Snow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[5] = new Texture;
        effectTxt[5]->loadFromImage(tempImg);
        effectTxt[5]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_LevelEndBar.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[6] = new Texture;
        effectTxt[6]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_Water.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[7] = new Texture;
        effectTxt[7]->loadFromImage(tempImg);
        effectTxt[7]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_BlockCoin.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[8] = new Texture;
        effectTxt[8]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_FireExplosion.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[9] = new Texture;
        effectTxt[9]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_WaterSplash.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[10] = new Texture;
        effectTxt[10]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_LavaSplash.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[11] = new Texture;
        effectTxt[11]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_CoinSparks.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[12] = new Texture;
        effectTxt[12]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_Points.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[13] = new Texture;
        effectTxt[13]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Effects/Effect_Shard.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        effectTxt[14] = new Texture;
        effectTxt[14]->loadFromImage(tempImg);

        effectTxt[15] = new Texture;

        if (!effectTxt[15]->loadFromFile("Data/Gfx/Effects/Effect_Invincibility.png"))
            allright = false;

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Moveable.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        editorMoveable = new Texture;
        editorMoveable->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_AddNodes.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        nodesTex = new Texture;
        nodesTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Slider.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sliderTex = new Texture;
        sliderTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Regulator.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sliderSTex = new Texture;
        sliderSTex->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_ElementsEssentials.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        elements[0] = new Texture;
        elements[0]->loadFromImage(tempImg);
        elements[0]->setSmooth(true);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_ElementsPlatforms.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        elements[1] = new Texture;
        elements[1]->loadFromImage(tempImg);
        elements[1]->setSmooth(true);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_ElementsBonus.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        elements[2] = new Texture;
        elements[2]->loadFromImage(tempImg);
        elements[2]->setSmooth(true);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_ElementsPipes.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        elements[3] = new Texture;
        elements[3]->loadFromImage(tempImg);
        elements[3]->setSmooth(true);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_ElementsSceneries.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        elements[4] = new Texture;
        elements[4]->loadFromImage(tempImg);
        elements[4]->setSmooth(true);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_ElementsEnemies.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        elements[5] = new Texture;
        elements[5]->loadFromImage(tempImg);
        elements[5]->setSmooth(true);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_ElementsHazards.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        elements[6] = new Texture;
        elements[6]->loadFromImage(tempImg);
        elements[6]->setSmooth(true);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Item_Block.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[0] = new Texture;
        itemsTxt[0]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Item_Brick.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[1] = new Texture;
        itemsTxt[1]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Item_Coin.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[2] = new Texture;
        itemsTxt[2]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Item_Mushroom.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[3] = new Texture;
        itemsTxt[3]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Item_FireFlower.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[4] = new Texture;
        itemsTxt[4]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Item_Beetroot.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[5] = new Texture;
        itemsTxt[5]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Item_Lui.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[6] = new Texture;
        itemsTxt[6]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Item_Star.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[7] = new Texture;
        itemsTxt[7]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Item_1up.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[8] = new Texture;
        itemsTxt[8]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Projectiles/Item_Fireball.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[9] = new Texture;
        itemsTxt[9]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Items/Projectiles/Item_Beet.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        itemsTxt[10] = new Texture;
        itemsTxt[10]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_GoombaBrown.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[0] = new Texture;
        enemiesTxt[0]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_GoombaGrey.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[1] = new Texture;
        enemiesTxt[1]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_Spiny.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[2] = new Texture;
        enemiesTxt[2]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_GreySpiny.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[3] = new Texture;
        enemiesTxt[3]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_BuzzyBeetle.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[4] = new Texture;
        enemiesTxt[4]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_KoopaGreen.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[5] = new Texture;
        enemiesTxt[5]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_KoopaRed.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[6] = new Texture;
        enemiesTxt[6]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_KoopaBlue.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[7] = new Texture;
        enemiesTxt[7]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_KoopaYellow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[8] = new Texture;
        enemiesTxt[8]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_ParatroopaGreen.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[9] = new Texture;
        enemiesTxt[9]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_ParatroopaRed.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[10] = new Texture;
        enemiesTxt[10]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_ParatroopaBlue.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[11] = new Texture;
        enemiesTxt[11]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_ParatroopaYellow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[12] = new Texture;
        enemiesTxt[12]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_ShellBuzzy.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[13] = new Texture;
        enemiesTxt[13]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_ShellGreen.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[14] = new Texture;
        enemiesTxt[14]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_ShellRed.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[15] = new Texture;
        enemiesTxt[15]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_ShellBlue.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[16] = new Texture;
        enemiesTxt[16]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_ShellYellow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[17] = new Texture;
        enemiesTxt[17]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_PlantGreen.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[18] = new Texture;
        enemiesTxt[18]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_PlantPink.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[19] = new Texture;
        enemiesTxt[19]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_PlantGrey.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[20] = new Texture;
        enemiesTxt[20]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_FishRed.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[21] = new Texture;
        enemiesTxt[21]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_FishGreen.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[22] = new Texture;
        enemiesTxt[22]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_FishBlue.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[23] = new Texture;
        enemiesTxt[23]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_FishYellow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[24] = new Texture;
        enemiesTxt[24]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_HammerBro.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[25] = new Texture;
        enemiesTxt[25]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_SilverBro.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[26] = new Texture;
        enemiesTxt[26]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_FireBro.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[27] = new Texture;
        enemiesTxt[27]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_BeetBro.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[28] = new Texture;
        enemiesTxt[28]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_SpikeBro.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[29] = new Texture;
        enemiesTxt[29]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_Hammer.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[30] = new Texture;
        enemiesTxt[30]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_SilverHammer.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[31] = new Texture;
        enemiesTxt[31]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_Lakitu.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[32] = new Texture;
        enemiesTxt[32]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_LakituDark.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[33] = new Texture;
        enemiesTxt[33]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_LakituGold.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[34] = new Texture;
        enemiesTxt[34]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_SpinyEgg.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[35] = new Texture;
        enemiesTxt[35]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_DarkSpinyEgg.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[36] = new Texture;
        enemiesTxt[36]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_PoisonMushroom.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[37] = new Texture;
        enemiesTxt[37]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_Thwomp.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[38] = new Texture;
        enemiesTxt[38]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_Bowser.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[39] = new Texture;
        enemiesTxt[39]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_BowserFlame.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[40] = new Texture;
        enemiesTxt[40]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Enemies/Enemy_Plant.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        enemiesTxt[41] = new Texture;
        enemiesTxt[41]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_Lava.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[0] = new Texture;
        hazardsTxt[0]->loadFromImage(tempImg);
        hazardsTxt[0]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_Podoboo.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[1] = new Texture;
        hazardsTxt[1]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_Cannon.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[2] = new Texture;
        hazardsTxt[2]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_BulletBill.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[3] = new Texture;
        hazardsTxt[3]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_Rotodisc.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[4] = new Texture;
        hazardsTxt[4]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_LavaThrower.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[5] = new Texture;
        hazardsTxt[5]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_DiagonalLavaThrower.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[6] = new Texture;
        hazardsTxt[6]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_LavaThrow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[7] = new Texture;
        hazardsTxt[7]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_SpikeballLauncher.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[8] = new Texture;
        hazardsTxt[8]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_SpikeBall.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[9] = new Texture;
        hazardsTxt[9]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hazards/Hazard_CentipedePlatform.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hazardsTxt[10] = new Texture;
        hazardsTxt[10]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Platforms/Platform_Red.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[0] = new Texture;
        marksTxt[0]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Platforms/Platform_Short.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[1] = new Texture;
        marksTxt[1]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Platforms/Platform_Cloud.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[2] = new Texture;
        marksTxt[2]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Platforms/Platform_Stone.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[3] = new Texture;
        marksTxt[3]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Mark_SpringRed.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[4] = new Texture;
        marksTxt[4]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Mark_SpringGreen.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[5] = new Texture;
        marksTxt[5]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Mark_SpringBlue.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[6] = new Texture;
        marksTxt[6]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Mark_CheckPoint.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[7] = new Texture;
        marksTxt[7]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Mark_LevelEnd.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[8] = new Texture;
        marksTxt[8]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Mark_LevelEndArrow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[9] = new Texture;
        marksTxt[9]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Switches/Switch_Activator.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[10] = new Texture;
        marksTxt[10]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Marks/Switches/Switch_Blocks.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marksTxt[11] = new Texture;
        marksTxt[11]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_GreenBush.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[0] = new Texture;
        sceneriesTxt[0]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_GreyBush.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[1] = new Texture;
        sceneriesTxt[1]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_YellowBush.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[2] = new Texture;
        sceneriesTxt[2]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_RedBush.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[3] = new Texture;
        sceneriesTxt[3]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_BlueBush.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[4] = new Texture;
        sceneriesTxt[4]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_Cloud.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[5] = new Texture;
        sceneriesTxt[5]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_DarkCloud.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[6] = new Texture;
        sceneriesTxt[6]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_BowserPaint.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[7] = new Texture;
        sceneriesTxt[7]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_SmallCastle.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[8] = new Texture;
        sceneriesTxt[8]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_BigCastle.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[9] = new Texture;
        sceneriesTxt[9]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_Waterfall.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[10] = new Texture;
        sceneriesTxt[10]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_Lavafall.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[11] = new Texture;
        sceneriesTxt[11]->loadFromImage(tempImg);
        sceneriesTxt[11]->setRepeated(true);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_SmallCastleSnow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[12] = new Texture;
        sceneriesTxt[12]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Sceneries/Scenery_BigCastleSnow.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        sceneriesTxt[13] = new Texture;
        sceneriesTxt[13]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Mario/Mario_Small.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marioTxt[0] = new Texture;
        marioTxt[0]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Mario/Mario_Big.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marioTxt[1] = new Texture;
        marioTxt[1]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Mario/Mario_Fire.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marioTxt[2] = new Texture;
        marioTxt[2]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Mario/Mario_Beet.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marioTxt[3] = new Texture;
        marioTxt[3]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Mario/Mario_Lui.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marioTxt[4] = new Texture;
        marioTxt[4]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Mario/Mario_Dead.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        marioTxt[5] = new Texture;
        marioTxt[5]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hud/Hud_Lives.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hudTxt[0] = new Texture;
        hudTxt[0]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hud/Hud_Coins.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hudTxt[1] = new Texture;
        hudTxt[1]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hud/Hud_World.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hudTxt[2] = new Texture;
        hudTxt[2]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hud/Hud_Time.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hudTxt[3] = new Texture;
        hudTxt[3]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hud/Hud_Font.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hudTxt[4] = new Texture;
        hudTxt[4]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hud/Hud_BowserHealth.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hudTxt[5] = new Texture;
        hudTxt[5]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Hud/Hud_GameOver.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        hudTxt[6] = new Texture;
        hudTxt[6]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_PlatformText.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        editorTxt[0] = new Texture;
        editorTxt[0]->loadFromImage(tempImg);

        editorTxt[1] = new Texture;

        if (!editorTxt[1]->loadFromFile("Data/Gfx/Editor/Editor_PlatformEnd.png"))
            allright = false;

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Bonuses.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        editorTxt[2] = new Texture;
        editorTxt[2]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Hazards.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        editorTxt[3] = new Texture;
        editorTxt[3]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_Enemies.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        editorTxt[4] = new Texture;
        editorTxt[4]->loadFromImage(tempImg);

        infoTexts[0] = new Texture;

        if (!infoTexts[0]->loadFromFile("Data/Gfx/Editor/Texts/Info_Infos.png"))
            allright = false;

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_File.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        infoTexts[1] = new Texture;
        infoTexts[1]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_Edit.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        infoTexts[2] = new Texture;
        infoTexts[2]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_BigRegulator.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        infoTexts[3] = new Texture;
        infoTexts[3]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Editor_BigSlider.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        infoTexts[4] = new Texture;
        infoTexts[4]->loadFromImage(tempImg);

        infoTexts[5] = new Texture;

        if (!infoTexts[5]->loadFromFile("Data/Gfx/Editor/Texts/Info_Section.png"))
            allright = false;

        infoTexts[6] = new Texture;

        if (!infoTexts[6]->loadFromFile("Data/Gfx/Editor/Texts/Info_Layers.png"))
            allright = false;

        infoTexts[7] = new Texture;

        if (!infoTexts[7]->loadFromFile("Data/Gfx/Editor/Texts/Info_Liquids.png"))
            allright = false;

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_Liquids.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        infoTexts[8] = new Texture;
        infoTexts[8]->loadFromImage(tempImg);

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_SetupLiquids.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        infoTexts[9] = new Texture;
        infoTexts[9]->loadFromImage(tempImg);

        infoTexts[10] = new Texture;

        if (!infoTexts[10]->loadFromFile("Data/Gfx/Editor/Texts/Info_Autoscroll.png"))
            allright = false;

        if (!tempImg.loadFromFile("Data/Gfx/Editor/Buttons/Button_SetupAutoscroll.png"))
            allright = false;

        tempImg.createMaskFromColor(Color::Magenta);

        infoTexts[11] = new Texture;
        infoTexts[11]->loadFromImage(tempImg);

        infoTexts[12] = new Texture;

        if (!infoTexts[12]->loadFromFile("Data/Gfx/Editor/Buttons/Button_Bowser.png"))
            allright = false;

        toolboxTex = new Texture;

        if (!toolboxTex->loadFromFile("Data/Gfx/Editor/Editor_Toolbar.png"))
            allright = false;
    }

    circleFadeTex = NULL;

    grid = new RectangleShape(Vector2f(704, 544));
    grid->setPosition(-32, -32);
    grid->setTexture(gridTex);
    grid->setTextureRect(IntRect(0, 0, 704, 544));
    grid->setFillColor(Color::Black);

    blackBorder = new RectangleShape;
    blackBorder->setFillColor(Color::Black);

    toolbox = new Sprite(*toolboxTex);

    layerPanel = new Sprite(*stringPanelTex);
    layerPanel->setOrigin(133, 32);
    layerPanel->setScale(-1, 1);

    stringPanel = new Sprite(*stringPanelTex);
    stringPanel->setOrigin(181, 32);

    menuText[0] = new Sprite(*menuTextTex[0]);
    menuText[1] = new Sprite(*menuTextTex[1]);
    menuText[2] = new Sprite(*menuTextTex[2]);
    menuText[3] = new Sprite(*menuTextTex[3]);
    menuText[4] = new Sprite(*menuTextTex[4]);
    menuText[5] = new Sprite(*menuTextTex[5]);

    infosText[0] = new Sprite(*infoTexts[0], IntRect(0, 0, 134, 21));
    infosText[1] = new Sprite(*infoTexts[0], IntRect(0, 21, 134, 21));
    infosText[2] = new Sprite(*infoTexts[0], IntRect(0, 42, 134, 21));
    infosText[3] = new Sprite(*infoTexts[0], IntRect(0, 63, 134, 21));
    infosText[4] = new Sprite(*infoTexts[5]);
    infosText[5] = new Sprite(*infoTexts[6], IntRect(0, 0, 226, 21));
    infosText[6] = new Sprite(*infoTexts[6], IntRect(0, 21, 226, 21));
    infosText[7] = new Sprite(*infoTexts[7], IntRect(0, 0, 104, 21));
    infosText[8] = new Sprite(*infoTexts[7], IntRect(0, 21, 104, 21));
    infosText[9] = new Sprite(*infoTexts[10], IntRect(0, 0, 140, 21));
    infosText[10] = new Sprite(*infoTexts[10], IntRect(0, 21, 140, 21));
    infosText[11] = new Sprite(*infoTexts[12]);

    infoRegulator = new Sprite(*infoTexts[3]);
    infoSRegulator = new Sprite(*sliderSTex);

    gradientElements[0] = new Sprite(*menuButtonTex[3]);
    gradientElements[1] = new Sprite(*menuButtonTex[3]);
    gradientElements[2] = new Sprite(*menuButtonTex[4]);

    effectElements[0] = new Sprite(*menuButtonTex[6], IntRect(0, 0, 111, 68));
    effectElements[1] = new Sprite(*menuButtonTex[6], IntRect(111, 0, 111, 68));
    effectElements[2] = new Sprite(*menuButtonTex[6], IntRect(222, 0, 111, 68));
    effectElements[3] = new Sprite(*menuButtonTex[6], IntRect(0, 68, 111, 68));
    effectElements[4] = new Sprite(*menuButtonTex[6], IntRect(111, 68, 111, 68));
    effectElements[5] = new Sprite(*menuButtonTex[6], IntRect(222, 68, 111, 68));

    effectElements[0]->setOrigin(55, 34);
    effectElements[1]->setOrigin(55, 34);
    effectElements[2]->setOrigin(55, 34);
    effectElements[3]->setOrigin(55, 34);
    effectElements[4]->setOrigin(55, 34);
    effectElements[5]->setOrigin(55, 34);

    circleSpr = NULL;

    returnButton = new Button(*returnButtonTex, Button_Back, "");

    musicButton[0] = new Button(*menuButtonTex[0], Music_World1, "", IntRect(0, 0, 200, 32));
    musicButton[1] = new Button(*menuButtonTex[0], Music_Cave, "", IntRect(0, 32, 200, 32));
    musicButton[2] = new Button(*menuButtonTex[0], Music_Underground, "", IntRect(0, 64, 200, 32));
    musicButton[3] = new Button(*menuButtonTex[0], Music_Rockland, "", IntRect(0, 96, 200, 32));
    musicButton[4] = new Button(*menuButtonTex[0], Music_Starland, "", IntRect(0, 128, 200, 32));
    musicButton[5] = new Button(*menuButtonTex[0], Music_StarPlatforms, "", IntRect(0, 160, 200, 32));
    musicButton[6] = new Button(*menuButtonTex[0], Music_Underwater, "", IntRect(0, 192, 200, 32));
    musicButton[7] = new Button(*menuButtonTex[0], Music_SelectSave, "", IntRect(0, 224, 200, 32));
    musicButton[8] = new Button(*menuButtonTex[0], Music_GhostHouse, "", IntRect(0, 256, 200, 32));
    musicButton[9] = new Button(*menuButtonTex[0], Music_Castle1, "", IntRect(0, 288, 200, 32));
    musicButton[10] = new Button(*menuButtonTex[0], Music_Castle2, "", IntRect(0, 320, 200, 32));
    musicButton[11] = new Button(*menuButtonTex[0], Music_Yoshi1, "", IntRect(0, 352, 200, 32));
    musicButton[12] = new Button(*menuButtonTex[0], Music_Yoshi2, "", IntRect(0, 384, 200, 32));
    musicButton[13] = new Button(*menuButtonTex[0], Music_Map1, "", IntRect(0, 416, 200, 32));
    musicButton[14] = new Button(*menuButtonTex[0], Music_Map2, "", IntRect(0, 448, 200, 32));
    musicButton[15] = new Button(*menuButtonTex[0], Music_Map3, "", IntRect(0, 480, 200, 32));
    musicButton[16] = new Button(*menuButtonTex[0], Music_Fastrun1, "", IntRect(0, 512, 200, 32));
    musicButton[17] = new Button(*menuButtonTex[0], Music_Fastrun2, "", IntRect(0, 544, 200, 32));
    musicButton[18] = new Button(*menuButtonTex[0], Music_InDaKitchen, "", IntRect(0, 576, 200, 32));
    musicButton[19] = new Button(*menuButtonTex[0], Music_Yky, "", IntRect(0, 608, 200, 32));
    musicButton[20] = new Button(*menuButtonTex[0], Music_YetBonus, "", IntRect(0, 640, 200, 32));
    musicButton[21] = new Button(*menuButtonTex[0], Music_Apoplexy, "", IntRect(0, 672, 200, 32));
    musicButton[22] = new Button(*menuButtonTex[0], Music_Import, "", IntRect(0, 704, 200, 32));

    backgroundButton[0] = new Button(*menuButtonTex[1], Background_None, "", IntRect(0, 0, 185, 68));
    backgroundButton[1] = new Button(*menuButtonTex[1], Background_Import, "", IntRect(185, 0, 185, 68));
    backgroundButton[2] = new Button(*menuButtonTex[1], Background_GreenHills, "", IntRect(0, 68, 92, 68));
    backgroundButton[3] = new Button(*menuButtonTex[1], Background_Cave, "", IntRect(92, 68, 92, 68));
    backgroundButton[4] = new Button(*menuButtonTex[1], Background_Rocks, "", IntRect(184, 68, 92, 68));
    backgroundButton[5] = new Button(*menuButtonTex[1], Background_Castle, "", IntRect(276, 68, 92, 68));
    backgroundButton[6] = new Button(*menuButtonTex[1], Background_RedHills, "", IntRect(0, 136, 92, 68));
    backgroundButton[7] = new Button(*menuButtonTex[1], Background_LavaCave, "", IntRect(92, 136, 92, 68));
    backgroundButton[8] = new Button(*menuButtonTex[1], Background_Water, "", IntRect(184, 136, 92, 68));
    backgroundButton[9] = new Button(*menuButtonTex[1], Background_DesertHills, "", IntRect(276, 136, 92, 68));
    backgroundButton[10] = new Button(*menuButtonTex[1], Background_BlueHills, "", IntRect(0, 204, 92, 68));
    backgroundButton[11] = new Button(*menuButtonTex[1], Background_DarkCave, "", IntRect(92, 204, 92, 68));
    backgroundButton[12] = new Button(*menuButtonTex[1], Background_Night, "", IntRect(184, 204, 92, 68));
    backgroundButton[13] = new Button(*menuButtonTex[1], Background_SnowHills, "", IntRect(276, 204, 92, 68));
    backgroundButton[14] = new Button(*menuButtonTex[1], Background_Clouds, "", IntRect(0, 272, 92, 68));
    backgroundButton[15] = new Button(*menuButtonTex[1], Background_DarkClouds, "", IntRect(92, 272, 92, 68));

    gradientButton[0] = new Button(*menuButtonTex[2], Gradient_Fit, "", IntRect(0, 0, 160, 54));
    gradientButton[1] = new Button(*menuButtonTex[2], Gradient_Top, "", IntRect(0, 54, 160, 54));
    gradientButton[2] = new Button(*menuButtonTex[2], Gradient_Bottom, "", IntRect(0, 108, 160, 54));

    effectButton[0] = new Button(*menuButtonTex[5], Effect_Rain, "", IntRect(0, 0, 169, 76));
    effectButton[1] = new Button(*menuButtonTex[5], Effect_Storm, "", IntRect(0, 76, 169, 76));
    effectButton[2] = new Button(*menuButtonTex[5], Effect_Snow, "", IntRect(0, 152, 169, 76));
    effectButton[3] = new Button(*menuButtonTex[5], Effect_None, "", IntRect(0, 228, 169, 76));

    fileButton[0] = new Button(*infoTexts[1], Info_LevelSave, "", IntRect(0, 0, 160, 54));
    fileButton[1] = new Button(*infoTexts[1], Info_LevelSaveas, "", IntRect(0, 54, 160, 54));
    fileButton[2] = new Button(*infoTexts[1], Info_LevelLoad, "", IntRect(0, 108, 160, 54));
    fileButton[3] = new Button(*infoTexts[1], Info_LevelTest, "", IntRect(0, 162, 160, 54));

    editButton[0] = new Button(*infoTexts[2], Info_LevelName, "", IntRect(0, 0, 160, 32));
    editButton[1] = new Button(*infoTexts[2], Info_LevelAuthor, "", IntRect(0, 0, 160, 32));
    editButton[2] = new Button(*infoTexts[2], Info_LevelGravity, "", IntRect(0, 0, 160, 32));
    editButton[3] = new Button(*infoTexts[2], Info_LevelTime, "", IntRect(0, 0, 160, 32));
    editButton[4] = new Button(*infoTexts[2], Info_BackAlpha, "", IntRect(0, 0, 160, 32));
    editButton[5] = new Button(*infoTexts[2], Info_FrontAlpha, "", IntRect(0, 0, 160, 32));
    editButton[6] = new Button(*infoTexts[2], Info_BowserHealth, "Health", IntRect(0, 0, 160, 32));
    editButton[7] = new Button(*menuButtonTex[0], Info_BowserMusic, "", IntRect(0, 704, 200, 32));

    liquidButton[0] = new Button(*infoTexts[8], Info_LiquidNone, "", IntRect(0, 0, 112, 76));
    liquidButton[1] = new Button(*infoTexts[8], Info_LiquidWater, "", IntRect(112, 0, 112, 76));
    liquidButton[2] = new Button(*infoTexts[8], Info_LiquidLava, "", IntRect(224, 0, 112, 76));
    liquidButton[3] = new Button(*infoTexts[9], Info_LiquidSetup, "", IntRect(0, 54, 160, 54));

    autoscrollButton[0] = new Button(*infoTexts[11], Info_AutoscrollNone, "", IntRect(160, 0, 128, 54));
    autoscrollButton[1] = new Button(*infoTexts[11], Info_AutoscrollA, "", IntRect(288, 0, 128, 54));
    autoscrollButton[2] = new Button(*infoTexts[11], Info_AutoscrollB, "", IntRect(416, 0, 128, 54));
    autoscrollButton[3] = new Button(*infoTexts[11], Info_AutoscrollSetup, "", IntRect(0, 54, 160, 54));

    effectCheckButton[0] = new CheckButton(Effect_But1, *checkButtonTex);
    effectCheckButton[1] = new CheckButton(Effect_But2, *checkButtonTex);
    effectCheckButton[2] = new CheckButton(Effect_But3, *checkButtonTex);
    effectCheckButton[3] = new CheckButton(Effect_But4, *checkButtonTex);
    effectCheckButton[4] = new CheckButton(Effect_But5, *checkButtonTex);
    effectCheckButton[5] = new CheckButton(Effect_But6, *checkButtonTex);

    bowserCheckButton[0] = new CheckButton(Bowser_Check1, *checkButtonTex, "Jumps");
    bowserCheckButton[1] = new CheckButton(Bowser_Check2, *checkButtonTex, "Movements");
    bowserCheckButton[2] = new CheckButton(Bowser_Check3, *checkButtonTex, "Fire");
    bowserCheckButton[3] = new CheckButton(Bowser_Check4, *checkButtonTex, "Triple-Fire");
    bowserCheckButton[4] = new CheckButton(Bowser_Check5, *checkButtonTex, "Homing-Fire");
    bowserCheckButton[5] = new CheckButton(Bowser_Check6, *checkButtonTex, "Cannon");
    bowserCheckButton[6] = new CheckButton(Bowser_Check7, *checkButtonTex, "Custom Battle Music");

    InfoButtons[0] = new InfoButton(*menuButtonTex[7], 0);
    InfoButtons[1] = new InfoButton(*menuButtonTex[7], 1);
    InfoButtons[2] = new InfoButton(*menuButtonTex[7], 2);
    InfoButtons[3] = new InfoButton(*menuButtonTex[7], 3);
    InfoButtons[4] = new InfoButton(*menuButtonTex[7], 4);
    InfoButtons[5] = new InfoButton(*menuButtonTex[7], 5);

    effectLightningSpr = new Sprite(*effectTxt[4]);
    effectLightningSpr->setColor(Color(255, 255, 255, 0));

    for (register int i = 0; i < 23; i++)
        musicButton[i]->setSound(NULL);

    for (register int i = 0; i < 16; i++)
        backgroundButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 3; i++)
        gradientButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 4; i++)
        effectButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 6; i++)
        effectCheckButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 7; i++)
        bowserCheckButton[i]->setSound(&buttonClick);

    menuText[0]->setOrigin(122, 0);
    menuText[1]->setOrigin(238, 0);
    menuText[2]->setOrigin(140, 0);
    menuText[3]->setOrigin(142, 0);
    menuText[4]->setOrigin(166, 0);
    menuText[5]->setOrigin(182, 0);

    tilesetSpr = new Sprite(*mainTileset);
    tilesetSpr->setTextureRect(IntRect(0, 0, 576, 384));

    background[0] = new RectangleShape(Vector2f(1280, 274));
    background[1] = new RectangleShape(Vector2f(1280, 274));
    background[2] = new RectangleShape(Vector2f(1280, 274));
    background[3] = new RectangleShape(Vector2f(1280, 178));
    background[4] = new RectangleShape(Vector2f(1280, 165));
    background[5] = new RectangleShape(Vector2f(1280, 101));
    background[6] = new RectangleShape(Vector2f(1280, 320));
    background[7] = new RectangleShape(Vector2f(1280, 320));
    background[8] = new RectangleShape(Vector2f(1280, 480));
    background[9] = new RectangleShape(Vector2f(1280, 480));
    background[10] = new RectangleShape(Vector2f(1280, 480));
    background[11] = new RectangleShape(Vector2f(1280, 480));
    background[14] = new RectangleShape(Vector2f(1280, 274));
    background[15] = new RectangleShape(Vector2f(1280, 274));

    background[12] = NULL;
    background[13] = NULL;

    liquidRect[0] = new RectangleShape(Vector2f(1280, 32));
    liquidRect[1] = new RectangleShape(Vector2f(1280, 32));

    liquidRect[0]->setFillColor(Color(255, 255, 255, 128));
    liquidRect[1]->setFillColor(Color(255, 255, 255, 128));

    liquidRect[0]->setOutlineColor(Color::Black);
    liquidRect[1]->setOutlineColor(Color::Black);

    spotRect = new RectangleShape;
    spotRect->setFillColor(Color(255, 0, 255, 128));
    spotRect->setOutlineColor(Color::Black);
    spotRect->setOutlineThickness(4);

    spotCursor = new RectangleShape;
    spotCursor->setFillColor(Color(255, 0, 255, 128));
    spotCursor->setSize(Vector2f(32, 32));

    background[0]->setTexture(backgroundTxt[0]);
    background[1]->setTexture(backgroundTxt[1]);
    background[2]->setTexture(backgroundTxt[2]);
    background[3]->setTexture(backgroundTxt[3]);
    background[4]->setTexture(backgroundTxt[4]);
    background[5]->setTexture(backgroundTxt[5]);
    background[6]->setTexture(backgroundTxt[6]);
    background[7]->setTexture(backgroundTxt[7]);
    background[8]->setTexture(backgroundTxt[8]);
    background[9]->setTexture(backgroundTxt[9]);
    background[10]->setTexture(backgroundTxt[10]);
    background[11]->setTexture(backgroundTxt[11]);
    background[14]->setTexture(backgroundTxt[14]);
    background[15]->setTexture(backgroundTxt[15]);

    background[0]->setPosition(0, 206);
    background[1]->setPosition(0, 206);
    background[2]->setPosition(0, 206);
    background[3]->setPosition(0, 302);
    background[4]->setPosition(0, 315);
    background[5]->setPosition(0, 379);
    background[6]->setPosition(0, 160);
    background[7]->setPosition(0, 160);
    background[14]->setPosition(0, 206);
    background[15]->setPosition(0, 206);

    background[0]->setTextureRect(IntRect(0, 0, 1280, 274));
    background[1]->setTextureRect(IntRect(0, 0, 1280, 274));
    background[2]->setTextureRect(IntRect(0, 0, 1280, 274));
    background[3]->setTextureRect(IntRect(0, 0, 1280, 178));
    background[4]->setTextureRect(IntRect(0, 0, 1280, 165));
    background[5]->setTextureRect(IntRect(0, 0, 1280, 101));
    background[6]->setTextureRect(IntRect(0, 0, 1280, 320));
    background[7]->setTextureRect(IntRect(0, 0, 1280, 320));
    background[8]->setTextureRect(IntRect(0, 0, 1280, 480));
    background[9]->setTextureRect(IntRect(0, 0, 1280, 480));
    background[10]->setTextureRect(IntRect(0, 0, 1280, 480));
    background[11]->setTextureRect(IntRect(0, 0, 1280, 480));
    background[14]->setTextureRect(IntRect(0, 0, 1280, 274));
    background[15]->setTextureRect(IntRect(0, 0, 1280, 274));

    infoSlider[0] = new Regulator(infoTexts[4], "", sliderGravity);
    infoSlider[1] = new Regulator(infoTexts[4], "", sliderTime);
    infoSlider[2] = new Regulator(infoTexts[4], "", sliderBackAlpha);
    infoSlider[3] = new Regulator(infoTexts[4], "", sliderFrontAlpha);
    infoSlider[4] = new Regulator(infoTexts[4], "", sliderLiquidSpeed);
    infoSlider[5] = new Regulator(infoTexts[4], "", sliderAutoscrollSpeed);

    infoSlider[6] = new Regulator(infoTexts[4], "Jump Speed", sliderBowserSpeed1);
    infoSlider[7] = new Regulator(infoTexts[4], "Jump Frequency", sliderBowserFreq1);
    infoSlider[8] = new Regulator(infoTexts[4], "Move Speed", sliderBowserSpeed2);
    infoSlider[9] = new Regulator(infoTexts[4], "Move Frequency", sliderBowserFreq2);
    infoSlider[10] = new Regulator(infoTexts[4], "Fire Speed", sliderBowserSpeed3);
    infoSlider[11] = new Regulator(infoTexts[4], "Fire Frequency", sliderBowserFreq3);
    infoSlider[12] = new Regulator(infoTexts[4], "Triple-Fire Speed", sliderBowserSpeed4);
    infoSlider[13] = new Regulator(infoTexts[4], "Triple-Fire Frequency", sliderBowserFreq4);
    infoSlider[14] = new Regulator(infoTexts[4], "Homing-Fire Speed", sliderBowserSpeed5);
    infoSlider[15] = new Regulator(infoTexts[4], "Homing-Fire Frequency", sliderBowserFreq5);
    infoSlider[16] = new Regulator(infoTexts[4], "Bullet-Bill Speed", sliderBowserSpeed6);
    infoSlider[17] = new Regulator(infoTexts[4], "Bullet-Bill Frequency", sliderBowserFreq6);
    infoSlider[18] = new Regulator(infoTexts[4], "Trail Effect Length", sliderBowserTrail);

    autoscrollPathLine = new VertexArray(LinesStrip);

    tilesetRect = new RectangleShape(Vector2f(577, 385));
    tilesetRect->setTexture(gridTex);
    tilesetRect->setTextureRect(IntRect(0, 0, 577, 385));

    tileSelection = new RectangleShape;

    gradientColor[0] = new RectangleShape(Vector2f(157, 76));
    gradientColor[1] = new RectangleShape(Vector2f(157, 76));

    effectClouds[0] = new RectangleShape(Vector2f(1280, 63));
    effectClouds[0]->setTextureRect(IntRect(0, 0, 1280, 63));

    effectClouds[1] = new RectangleShape(Vector2f(1280, 63));
    effectClouds[1]->setTextureRect(IntRect(0, 0, 1280, 63));
    effectClouds[1]->setPosition(0, 24);

    itemHandled = new Sprite;

    fadeRect = new RectangleShape(Vector2f(640, 480));
    fadeRect->setFillColor(Color::Black);

    camera = new View(Vector2f(320, 240), Vector2f(640, 480));

    resizerButton[0] = new Button(*resizerTex, DecreaseHeight, "Decrease Height");
    resizerButton[1] = new Button(*resizerTex, IncreaseWidth, "Increase Width");
    resizerButton[2] = new Button(*resizerTex, IncreaseHeight, "Increase Height");
    resizerButton[3] = new Button(*resizerTex, DecreaseWidth, "Decrease Width");

    scrollButton[0] = new Button(*scrollTex, ScrollUp, "Scroll Up");
    scrollButton[1] = new Button(*scrollTex, ScrollDown, "Scroll Down");

    layerButton[0] = new Button(*layerTex, ChangeLayerTo_Back, "Background Layer", IntRect(0, 0, 26, 26));
    layerButton[1] = new Button(*layerTex, ChangeLayerTo_Middle, "Middle Layer", IntRect(26, 0, 26, 26));
    layerButton[2] = new Button(*layerTex, ChangeLayerTo_Front, "Foreground Layer", IntRect(52, 0, 26, 26));

    typeButton[0] = new Button(*typeTex, Category_Essentials, "Essential Objects", IntRect(0, 0, 32, 32));
    typeButton[1] = new Button(*typeTex, Category_Platforms, "Platform Objects", IntRect(32, 0, 32, 32));
    typeButton[2] = new Button(*typeTex, Category_Bonus, "Bonus Objects", IntRect(64, 0, 32, 32));
    typeButton[3] = new Button(*typeTex, Category_Tiles, "Tileset", IntRect(96, 0, 32, 32));
    typeButton[4] = new Button(*typeTex, Category_Pipes, "Pipe Objects", IntRect(128, 0, 32, 32));
    typeButton[5] = new Button(*typeTex, Category_Sceneries, "Scenery Objects", IntRect(160, 0, 32, 32));
    typeButton[6] = new Button(*typeTex, Category_Enemies, "Enemy Objects", IntRect(192, 0, 32, 32));
    typeButton[7] = new Button(*typeTex, Category_Hazards, "Hazardous Objects", IntRect(224, 0, 32, 32));
    typeButton[8] = new Button(*typeTex, Category_Warps, "Warp Pipes", IntRect(256, 0, 32, 32));

    prefsButton[0] = new Button(*prefsTex, Prefs_Music, "Music", IntRect(0, 0, 26, 26));
    prefsButton[1] = new Button(*prefsTex, Prefs_Background, "Background", IntRect(26, 0, 26, 26));
    prefsButton[2] = new Button(*prefsTex, Prefs_Gradient, "Sky's Color", IntRect(52, 0, 26, 26));
    prefsButton[3] = new Button(*prefsTex, Prefs_Effects, "Effects", IntRect(78, 0, 26, 26));
    prefsButton[4] = new Button(*prefsTex, Prefs_Title, "Level Settings", IntRect(104, 0, 26, 26));
    prefsButton[5] = new Button(*prefsTex, Prefs_Section, "Switch Section", IntRect(130, 0, 26, 26));

    liquidButton2[0] = new Button(*liquidButtonTex, Liquid_SetHeight, "Liquid Height", IntRect(0, 0, 26, 26));
    liquidButton2[1] = new Button(*liquidButtonTex, Liquid_SetSpots, "Liquid Spots", IntRect(26, 0, 26, 26));

    autoscrollButton2[0] = new Button(*autoscrollButtonTex, Autoscroll_AddNode, "Add Node", IntRect(0, 0, 26, 26));
    autoscrollButton2[1] = new Button(*autoscrollButtonTex, Autoscroll_EraseNode, "Remove Last Node", IntRect(26, 0, 26, 26));

    elementsEsssential[0] = new ElementButton(*elements[0], IntRect(0, 0, 48, 48), 0, Elements_Essential);
    elementsEsssential[1] = new ElementButton(*elements[0], IntRect(48, 0, 48, 48), 1, Elements_Essential);
    elementsEsssential[2] = new ElementButton(*elements[0], IntRect(96, 0, 48, 48), 2, Elements_Essential);

    elementsPlatforms[0] = new ElementButton(*elements[1], IntRect(0, 0, 48, 48), 3, Elements_Platforms);
    elementsPlatforms[1] = new ElementButton(*elements[1], IntRect(48, 0, 48, 48), 4, Elements_Platforms);
    elementsPlatforms[2] = new ElementButton(*elements[1], IntRect(96, 0, 48, 48), 5, Elements_Platforms);
    elementsPlatforms[3] = new ElementButton(*elements[1], IntRect(144, 0, 48, 48), 6, Elements_Platforms);
    elementsPlatforms[4] = new ElementButton(*elements[1], IntRect(192, 0, 48, 48), 7, Elements_Platforms);
    elementsPlatforms[5] = new ElementButton(*elements[1], IntRect(240, 0, 48, 48), 8, Elements_Platforms);
    elementsPlatforms[6] = new ElementButton(*elements[1], IntRect(288, 0, 48, 48), 9, Elements_Platforms);
    elementsPlatforms[7] = new ElementButton(*elements[1], IntRect(336, 0, 48, 48), 10, Elements_Platforms);
    elementsPlatforms[8] = new ElementButton(*elements[1], IntRect(384, 0, 48, 48), 11, Elements_Platforms);
    elementsPlatforms[9] = new ElementButton(*elements[1], IntRect(432, 0, 48, 48), 12, Elements_Platforms);
    elementsPlatforms[10] = new ElementButton(*elements[1], IntRect(480, 0, 48, 48), 13, Elements_Platforms);
    elementsPlatforms[11] = new ElementButton(*elements[1], IntRect(528, 0, 48, 48), 14, Elements_Platforms);
    elementsPlatforms[12] = new ElementButton(*elements[1], IntRect(576, 0, 48, 48), 15, Elements_Platforms);
    elementsPlatforms[13] = new ElementButton(*elements[1], IntRect(624, 0, 48, 48), 16, Elements_Platforms);
    elementsPlatforms[14] = new ElementButton(*elements[1], IntRect(672, 0, 48, 48), 17, Elements_Platforms);
    elementsPlatforms[15] = new ElementButton(*elements[1], IntRect(720, 0, 48, 48), 18, Elements_Platforms);
    elementsPlatforms[16] = new ElementButton(*elements[1], IntRect(768, 0, 48, 48), 19, Elements_Platforms);
    elementsPlatforms[17] = new ElementButton(*elements[1], IntRect(816, 0, 48, 48), 20, Elements_Platforms);
    elementsPlatforms[18] = new ElementButton(*elements[1], IntRect(864, 0, 48, 48), 21, Elements_Platforms);
    elementsPlatforms[19] = new ElementButton(*elements[1], IntRect(912, 0, 48, 48), 22, Elements_Platforms);
    elementsPlatforms[20] = new ElementButton(*elements[1], IntRect(960, 0, 48, 48), 23, Elements_Platforms);
    elementsPlatforms[21] = new ElementButton(*elements[1], IntRect(1008, 0, 48, 48), 24, Elements_Platforms);
    elementsPlatforms[22] = new ElementButton(*elements[1], IntRect(1056, 0, 48, 48), 25, Elements_Platforms);
    elementsPlatforms[23] = new ElementButton(*elements[1], IntRect(1104, 0, 48, 48), 213, Elements_Platforms);
    elementsPlatforms[24] = new ElementButton(*elements[1], IntRect(1152, 0, 48, 48), 214, Elements_Platforms);
    elementsPlatforms[25] = new ElementButton(*elements[1], IntRect(1200, 0, 48, 48), 215, Elements_Platforms);
    elementsPlatforms[26] = new ElementButton(*elements[1], IntRect(1248, 0, 48, 48), 216, Elements_Platforms);
    elementsPlatforms[27] = new ElementButton(*elements[1], IntRect(1296, 0, 48, 48), 217, Elements_Platforms);
    elementsPlatforms[28] = new ElementButton(*elements[1], IntRect(1344, 0, 48, 48), 218, Elements_Platforms);
    elementsPlatforms[29] = new ElementButton(*elements[1], IntRect(1392, 0, 48, 48), 219, Elements_Platforms);
    elementsPlatforms[30] = new ElementButton(*elements[1], IntRect(1440, 0, 48, 48), 220, Elements_Platforms);
    elementsPlatforms[31] = new ElementButton(*elements[1], IntRect(1488, 0, 48, 48), 221, Elements_Platforms);
    elementsPlatforms[32] = new ElementButton(*elements[1], IntRect(1536, 0, 48, 48), 222, Elements_Platforms);
    elementsPlatforms[33] = new ElementButton(*elements[1], IntRect(1584, 0, 48, 48), 223, Elements_Platforms);
    elementsPlatforms[34] = new ElementButton(*elements[1], IntRect(1632, 0, 48, 48), 224, Elements_Platforms);

    elementsBonus[0] = new ElementButton(*elements[2], IntRect(0, 0, 48, 48), 26, Elements_Bonus);
    elementsBonus[1] = new ElementButton(*elements[2], IntRect(48, 0, 48, 48), 27, Elements_Bonus);
    elementsBonus[2] = new ElementButton(*elements[2], IntRect(96, 0, 48, 48), 28, Elements_Bonus);
    elementsBonus[3] = new ElementButton(*elements[2], IntRect(144, 0, 48, 48), 29, Elements_Bonus);
    elementsBonus[4] = new ElementButton(*elements[2], IntRect(192, 0, 48, 48), 30, Elements_Bonus);
    elementsBonus[5] = new ElementButton(*elements[2], IntRect(240, 0, 48, 48), 31, Elements_Bonus);
    elementsBonus[6] = new ElementButton(*elements[2], IntRect(288, 0, 48, 48), 32, Elements_Bonus);
    elementsBonus[7] = new ElementButton(*elements[2], IntRect(336, 0, 48, 48), 33, Elements_Bonus);
    elementsBonus[8] = new ElementButton(*elements[2], IntRect(384, 0, 48, 48), 34, Elements_Bonus);
    elementsBonus[9] = new ElementButton(*elements[2], IntRect(432, 0, 48, 48), 35, Elements_Bonus);
    elementsBonus[10] = new ElementButton(*elements[2], IntRect(480, 0, 48, 48), 36, Elements_Bonus);
    elementsBonus[11] = new ElementButton(*elements[2], IntRect(528, 0, 48, 48), 37, Elements_Bonus);
    elementsBonus[12] = new ElementButton(*elements[2], IntRect(576, 0, 48, 48), 38, Elements_Bonus);
    elementsBonus[13] = new ElementButton(*elements[2], IntRect(624, 0, 48, 48), 39, Elements_Bonus);
    elementsBonus[14] = new ElementButton(*elements[2], IntRect(672, 0, 48, 48), 40, Elements_Bonus);
    elementsBonus[15] = new ElementButton(*elements[2], IntRect(720, 0, 48, 48), 41, Elements_Bonus);
    elementsBonus[16] = new ElementButton(*elements[2], IntRect(768, 0, 48, 48), 42, Elements_Bonus);
    elementsBonus[17] = new ElementButton(*elements[2], IntRect(816, 0, 48, 48), 43, Elements_Bonus);
    elementsBonus[18] = new ElementButton(*elements[2], IntRect(864, 0, 48, 48), 44, Elements_Bonus);
    elementsBonus[19] = new ElementButton(*elements[2], IntRect(912, 0, 48, 48), 45, Elements_Bonus);
    elementsBonus[20] = new ElementButton(*elements[2], IntRect(960, 0, 48, 48), 46, Elements_Bonus);
    elementsBonus[21] = new ElementButton(*elements[2], IntRect(1008, 0, 48, 48), 47, Elements_Bonus);
    elementsBonus[22] = new ElementButton(*elements[2], IntRect(1056, 0, 48, 48), 48, Elements_Bonus);
    elementsBonus[23] = new ElementButton(*elements[2], IntRect(1104, 0, 48, 48), 49, Elements_Bonus);
    elementsBonus[24] = new ElementButton(*elements[2], IntRect(1152, 0, 48, 48), 50, Elements_Bonus);
    elementsBonus[25] = new ElementButton(*elements[2], IntRect(1200, 0, 48, 48), 51, Elements_Bonus);
    elementsBonus[26] = new ElementButton(*elements[2], IntRect(1248, 0, 48, 48), 52, Elements_Bonus);
    elementsBonus[27] = new ElementButton(*elements[2], IntRect(1296, 0, 48, 48), 53, Elements_Bonus);
    elementsBonus[28] = new ElementButton(*elements[2], IntRect(1344, 0, 48, 48), 54, Elements_Bonus);
    elementsBonus[29] = new ElementButton(*elements[2], IntRect(1392, 0, 48, 48), 55, Elements_Bonus);

    elementsPipes[0] = new ElementButton(*elements[3], IntRect(0, 0, 48, 48), 56, Elements_Pipes);
    elementsPipes[1] = new ElementButton(*elements[3], IntRect(48, 0, 48, 48), 57, Elements_Pipes);
    elementsPipes[2] = new ElementButton(*elements[3], IntRect(96, 0, 48, 48), 58, Elements_Pipes);
    elementsPipes[3] = new ElementButton(*elements[3], IntRect(144, 0, 48, 48), 59, Elements_Pipes);
    elementsPipes[4] = new ElementButton(*elements[3], IntRect(192, 0, 48, 48), 60, Elements_Pipes);
    elementsPipes[5] = new ElementButton(*elements[3], IntRect(240, 0, 48, 48), 61, Elements_Pipes);
    elementsPipes[6] = new ElementButton(*elements[3], IntRect(288, 0, 48, 48), 62, Elements_Pipes);
    elementsPipes[7] = new ElementButton(*elements[3], IntRect(336, 0, 48, 48), 63, Elements_Pipes);
    elementsPipes[8] = new ElementButton(*elements[3], IntRect(384, 0, 48, 48), 64, Elements_Pipes);
    elementsPipes[9] = new ElementButton(*elements[3], IntRect(432, 0, 48, 48), 65, Elements_Pipes);
    elementsPipes[10] = new ElementButton(*elements[3], IntRect(480, 0, 48, 48), 66, Elements_Pipes);
    elementsPipes[11] = new ElementButton(*elements[3], IntRect(528, 0, 48, 48), 67, Elements_Pipes);
    elementsPipes[12] = new ElementButton(*elements[3], IntRect(576, 0, 48, 48), 68, Elements_Pipes);
    elementsPipes[13] = new ElementButton(*elements[3], IntRect(624, 0, 48, 48), 69, Elements_Pipes);
    elementsPipes[14] = new ElementButton(*elements[3], IntRect(672, 0, 48, 48), 70, Elements_Pipes);
    elementsPipes[15] = new ElementButton(*elements[3], IntRect(720, 0, 48, 48), 71, Elements_Pipes);
    elementsPipes[16] = new ElementButton(*elements[3], IntRect(768, 0, 48, 48), 72, Elements_Pipes);
    elementsPipes[17] = new ElementButton(*elements[3], IntRect(816, 0, 48, 48), 73, Elements_Pipes);
    elementsPipes[18] = new ElementButton(*elements[3], IntRect(864, 0, 48, 48), 74, Elements_Pipes);
    elementsPipes[19] = new ElementButton(*elements[3], IntRect(912, 0, 48, 48), 75, Elements_Pipes);
    elementsPipes[20] = new ElementButton(*elements[3], IntRect(960, 0, 48, 48), 76, Elements_Pipes);
    elementsPipes[21] = new ElementButton(*elements[3], IntRect(1008, 0, 48, 48), 77, Elements_Pipes);
    elementsPipes[22] = new ElementButton(*elements[3], IntRect(1056, 0, 48, 48), 78, Elements_Pipes);
    elementsPipes[23] = new ElementButton(*elements[3], IntRect(1104, 0, 48, 48), 79, Elements_Pipes);
    elementsPipes[24] = new ElementButton(*elements[3], IntRect(1152, 0, 48, 48), 80, Elements_Pipes);
    elementsPipes[25] = new ElementButton(*elements[3], IntRect(1200, 0, 48, 48), 81, Elements_Pipes);
    elementsPipes[26] = new ElementButton(*elements[3], IntRect(1248, 0, 48, 48), 82, Elements_Pipes);
    elementsPipes[27] = new ElementButton(*elements[3], IntRect(1296, 0, 48, 48), 83, Elements_Pipes);
    elementsPipes[28] = new ElementButton(*elements[3], IntRect(1344, 0, 48, 48), 84, Elements_Pipes);
    elementsPipes[29] = new ElementButton(*elements[3], IntRect(1392, 0, 48, 48), 85, Elements_Pipes);
    elementsPipes[30] = new ElementButton(*elements[3], IntRect(1440, 0, 48, 48), 86, Elements_Pipes);
    elementsPipes[31] = new ElementButton(*elements[3], IntRect(1488, 0, 48, 48), 87, Elements_Pipes);
    elementsPipes[32] = new ElementButton(*elements[3], IntRect(1536, 0, 48, 48), 88, Elements_Pipes);
    elementsPipes[33] = new ElementButton(*elements[3], IntRect(1584, 0, 48, 48), 89, Elements_Pipes);
    elementsPipes[34] = new ElementButton(*elements[3], IntRect(1632, 0, 48, 48), 90, Elements_Pipes);
    elementsPipes[35] = new ElementButton(*elements[3], IntRect(1680, 0, 48, 48), 91, Elements_Pipes);

    elementsSceneries[0] = new ElementButton(*elements[4], IntRect(0, 0, 48, 48), 92, Elements_Sceneries);
    elementsSceneries[1] = new ElementButton(*elements[4], IntRect(48, 0, 48, 48), 93, Elements_Sceneries);
    elementsSceneries[2] = new ElementButton(*elements[4], IntRect(96, 0, 48, 48), 94, Elements_Sceneries);
    elementsSceneries[3] = new ElementButton(*elements[4], IntRect(144, 0, 48, 48), 95, Elements_Sceneries);
    elementsSceneries[4] = new ElementButton(*elements[4], IntRect(192, 0, 48, 48), 96, Elements_Sceneries);
    elementsSceneries[5] = new ElementButton(*elements[4], IntRect(240, 0, 48, 48), 97, Elements_Sceneries);
    elementsSceneries[6] = new ElementButton(*elements[4], IntRect(288, 0, 48, 48), 98, Elements_Sceneries);
    elementsSceneries[7] = new ElementButton(*elements[4], IntRect(336, 0, 48, 48), 99, Elements_Sceneries);
    elementsSceneries[8] = new ElementButton(*elements[4], IntRect(384, 0, 48, 48), 100, Elements_Sceneries);
    elementsSceneries[9] = new ElementButton(*elements[4], IntRect(432, 0, 48, 48), 101, Elements_Sceneries);
    elementsSceneries[10] = new ElementButton(*elements[4], IntRect(480, 0, 48, 48), 102, Elements_Sceneries);
    elementsSceneries[11] = new ElementButton(*elements[4], IntRect(528, 0, 48, 48), 103, Elements_Sceneries);
    elementsSceneries[12] = new ElementButton(*elements[4], IntRect(576, 0, 48, 48), 104, Elements_Sceneries);
    elementsSceneries[13] = new ElementButton(*elements[4], IntRect(624, 0, 48, 48), 105, Elements_Sceneries);
    elementsSceneries[14] = new ElementButton(*elements[4], IntRect(672, 0, 48, 48), 106, Elements_Sceneries);
    elementsSceneries[15] = new ElementButton(*elements[4], IntRect(720, 0, 48, 48), 107, Elements_Sceneries);
    elementsSceneries[16] = new ElementButton(*elements[4], IntRect(768, 0, 48, 48), 108, Elements_Sceneries);
    elementsSceneries[17] = new ElementButton(*elements[4], IntRect(816, 0, 48, 48), 109, Elements_Sceneries);
    elementsSceneries[18] = new ElementButton(*elements[4], IntRect(864, 0, 48, 48), 110, Elements_Sceneries);
    elementsSceneries[19] = new ElementButton(*elements[4], IntRect(912, 0, 48, 48), 111, Elements_Sceneries);
    elementsSceneries[20] = new ElementButton(*elements[4], IntRect(960, 0, 48, 48), 112, Elements_Sceneries);
    elementsSceneries[21] = new ElementButton(*elements[4], IntRect(1008, 0, 48, 48), 113, Elements_Sceneries);
    elementsSceneries[22] = new ElementButton(*elements[4], IntRect(1056, 0, 48, 48), 229, Elements_Sceneries);
    elementsSceneries[23] = new ElementButton(*elements[4], IntRect(1104, 0, 48, 48), 230, Elements_Sceneries);
    elementsSceneries[24] = new ElementButton(*elements[4], IntRect(1152, 0, 48, 48), 231, Elements_Sceneries);
    elementsSceneries[25] = new ElementButton(*elements[4], IntRect(1200, 0, 48, 48), 232, Elements_Sceneries);

    elementsEnemies[0] = new ElementButton(*elements[5], IntRect(0, 0, 48, 48), 114, Elements_Enemies);
    elementsEnemies[1] = new ElementButton(*elements[5], IntRect(48, 0, 48, 48), 115, Elements_Enemies);
    elementsEnemies[2] = new ElementButton(*elements[5], IntRect(96, 0, 48, 48), 116, Elements_Enemies);
    elementsEnemies[3] = new ElementButton(*elements[5], IntRect(144, 0, 48, 48), 117, Elements_Enemies);
    elementsEnemies[4] = new ElementButton(*elements[5], IntRect(192, 0, 48, 48), 118, Elements_Enemies);
    elementsEnemies[5] = new ElementButton(*elements[5], IntRect(240, 0, 48, 48), 119, Elements_Enemies);
    elementsEnemies[6] = new ElementButton(*elements[5], IntRect(288, 0, 48, 48), 120, Elements_Enemies);
    elementsEnemies[7] = new ElementButton(*elements[5], IntRect(336, 0, 48, 48), 121, Elements_Enemies);
    elementsEnemies[8] = new ElementButton(*elements[5], IntRect(384, 0, 48, 48), 122, Elements_Enemies);
    elementsEnemies[9] = new ElementButton(*elements[5], IntRect(432, 0, 48, 48), 123, Elements_Enemies);
    elementsEnemies[10] = new ElementButton(*elements[5], IntRect(480, 0, 48, 48), 124, Elements_Enemies);
    elementsEnemies[11] = new ElementButton(*elements[5], IntRect(528, 0, 48, 48), 125, Elements_Enemies);
    elementsEnemies[12] = new ElementButton(*elements[5], IntRect(576, 0, 48, 48), 126, Elements_Enemies);
    elementsEnemies[13] = new ElementButton(*elements[5], IntRect(624, 0, 48, 48), 127, Elements_Enemies);
    elementsEnemies[14] = new ElementButton(*elements[5], IntRect(672, 0, 48, 48), 128, Elements_Enemies);
    elementsEnemies[15] = new ElementButton(*elements[5], IntRect(720, 0, 48, 48), 129, Elements_Enemies);
    elementsEnemies[16] = new ElementButton(*elements[5], IntRect(768, 0, 48, 48), 130, Elements_Enemies);
    elementsEnemies[17] = new ElementButton(*elements[5], IntRect(816, 0, 48, 48), 131, Elements_Enemies);
    elementsEnemies[18] = new ElementButton(*elements[5], IntRect(864, 0, 48, 48), 132, Elements_Enemies);
    elementsEnemies[19] = new ElementButton(*elements[5], IntRect(912, 0, 48, 48), 133, Elements_Enemies);
    elementsEnemies[20] = new ElementButton(*elements[5], IntRect(960, 0, 48, 48), 134, Elements_Enemies);
    elementsEnemies[21] = new ElementButton(*elements[5], IntRect(1008, 0, 48, 48), 135, Elements_Enemies);
    elementsEnemies[22] = new ElementButton(*elements[5], IntRect(1056, 0, 48, 48), 136, Elements_Enemies);
    elementsEnemies[23] = new ElementButton(*elements[5], IntRect(1104, 0, 48, 48), 137, Elements_Enemies);
    elementsEnemies[24] = new ElementButton(*elements[5], IntRect(1152, 0, 48, 48), 138, Elements_Enemies);
    elementsEnemies[25] = new ElementButton(*elements[5], IntRect(1200, 0, 48, 48), 139, Elements_Enemies);
    elementsEnemies[26] = new ElementButton(*elements[5], IntRect(1248, 0, 48, 48), 140, Elements_Enemies);
    elementsEnemies[27] = new ElementButton(*elements[5], IntRect(1296, 0, 48, 48), 141, Elements_Enemies);
    elementsEnemies[28] = new ElementButton(*elements[5], IntRect(1344, 0, 48, 48), 142, Elements_Enemies);
    elementsEnemies[29] = new ElementButton(*elements[5], IntRect(1392, 0, 48, 48), 143, Elements_Enemies);
    elementsEnemies[30] = new ElementButton(*elements[5], IntRect(1440, 0, 48, 48), 144, Elements_Enemies);
    elementsEnemies[31] = new ElementButton(*elements[5], IntRect(1488, 0, 48, 48), 145, Elements_Enemies);
    elementsEnemies[32] = new ElementButton(*elements[5], IntRect(1536, 0, 48, 48), 146, Elements_Enemies);
    elementsEnemies[33] = new ElementButton(*elements[5], IntRect(1584, 0, 48, 48), 147, Elements_Enemies);
    elementsEnemies[34] = new ElementButton(*elements[5], IntRect(1632, 0, 48, 48), 148, Elements_Enemies);
    elementsEnemies[35] = new ElementButton(*elements[5], IntRect(1680, 0, 48, 48), 149, Elements_Enemies);
    elementsEnemies[36] = new ElementButton(*elements[5], IntRect(1728, 0, 48, 48), 150, Elements_Enemies);
    elementsEnemies[37] = new ElementButton(*elements[5], IntRect(1776, 0, 48, 48), 151, Elements_Enemies);
    elementsEnemies[38] = new ElementButton(*elements[5], IntRect(1824, 0, 48, 48), 152, Elements_Enemies);
    elementsEnemies[39] = new ElementButton(*elements[5], IntRect(1872, 0, 48, 48), 153, Elements_Enemies);
    elementsEnemies[40] = new ElementButton(*elements[5], IntRect(1920, 0, 48, 48), 154, Elements_Enemies);
    elementsEnemies[41] = new ElementButton(*elements[5], IntRect(1968, 0, 48, 48), 155, Elements_Enemies);
    elementsEnemies[42] = new ElementButton(*elements[5], IntRect(0, 48, 48, 48), 156, Elements_Enemies);
    elementsEnemies[43] = new ElementButton(*elements[5], IntRect(48, 48, 48, 48), 157, Elements_Enemies);
    elementsEnemies[44] = new ElementButton(*elements[5], IntRect(96, 48, 48, 48), 158, Elements_Enemies);
    elementsEnemies[45] = new ElementButton(*elements[5], IntRect(144, 48, 48, 48), 159, Elements_Enemies);
    elementsEnemies[46] = new ElementButton(*elements[5], IntRect(192, 48, 48, 48), 160, Elements_Enemies);
    elementsEnemies[47] = new ElementButton(*elements[5], IntRect(240, 48, 48, 48), 161, Elements_Enemies);
    elementsEnemies[48] = new ElementButton(*elements[5], IntRect(288, 48, 48, 48), 162, Elements_Enemies);
    elementsEnemies[49] = new ElementButton(*elements[5], IntRect(336, 48, 48, 48), 163, Elements_Enemies);
    elementsEnemies[50] = new ElementButton(*elements[5], IntRect(384, 48, 48, 48), 164, Elements_Enemies);
    elementsEnemies[51] = new ElementButton(*elements[5], IntRect(432, 48, 48, 48), 165, Elements_Enemies);
    elementsEnemies[52] = new ElementButton(*elements[5], IntRect(480, 48, 48, 48), 166, Elements_Enemies);
    elementsEnemies[53] = new ElementButton(*elements[5], IntRect(528, 48, 48, 48), 225, Elements_Enemies);
    elementsEnemies[54] = new ElementButton(*elements[5], IntRect(576, 48, 48, 48), 226, Elements_Enemies);
    elementsEnemies[55] = new ElementButton(*elements[5], IntRect(624, 48, 48, 48), 227, Elements_Enemies);
    elementsEnemies[56] = new ElementButton(*elements[5], IntRect(672, 48, 48, 48), 228, Elements_Enemies);

    elementsHazards[0] = new ElementButton(*elements[6], IntRect(0, 0, 48, 48), 167, Elements_Hazards);
    elementsHazards[1] = new ElementButton(*elements[6], IntRect(48, 0, 48, 48), 168, Elements_Hazards);
    elementsHazards[2] = new ElementButton(*elements[6], IntRect(96, 0, 48, 48), 169, Elements_Hazards);
    elementsHazards[3] = new ElementButton(*elements[6], IntRect(144, 0, 48, 48), 170, Elements_Hazards);
    elementsHazards[4] = new ElementButton(*elements[6], IntRect(192, 0, 48, 48), 171, Elements_Hazards);
    elementsHazards[5] = new ElementButton(*elements[6], IntRect(240, 0, 48, 48), 172, Elements_Hazards);
    elementsHazards[6] = new ElementButton(*elements[6], IntRect(288, 0, 48, 48), 173, Elements_Hazards);
    elementsHazards[7] = new ElementButton(*elements[6], IntRect(336, 0, 48, 48), 174, Elements_Hazards);
    elementsHazards[8] = new ElementButton(*elements[6], IntRect(384, 0, 48, 48), 175, Elements_Hazards);
    elementsHazards[9] = new ElementButton(*elements[6], IntRect(432, 0, 48, 48), 176, Elements_Hazards);
    elementsHazards[10] = new ElementButton(*elements[6], IntRect(480, 0, 48, 48), 177, Elements_Hazards);
    elementsHazards[11] = new ElementButton(*elements[6], IntRect(528, 0, 48, 48), 178, Elements_Hazards);
    elementsHazards[12] = new ElementButton(*elements[6], IntRect(576, 0, 48, 48), 179, Elements_Hazards);
    elementsHazards[13] = new ElementButton(*elements[6], IntRect(624, 0, 48, 48), 180, Elements_Hazards);
    elementsHazards[14] = new ElementButton(*elements[6], IntRect(672, 0, 48, 48), 181, Elements_Hazards);
    elementsHazards[15] = new ElementButton(*elements[6], IntRect(720, 0, 48, 48), 182, Elements_Hazards);
    elementsHazards[16] = new ElementButton(*elements[6], IntRect(768, 0, 48, 48), 183, Elements_Hazards);
    elementsHazards[17] = new ElementButton(*elements[6], IntRect(816, 0, 48, 48), 184, Elements_Hazards);
    elementsHazards[18] = new ElementButton(*elements[6], IntRect(864, 0, 48, 48), 185, Elements_Hazards);
    elementsHazards[19] = new ElementButton(*elements[6], IntRect(912, 0, 48, 48), 186, Elements_Hazards);
    elementsHazards[20] = new ElementButton(*elements[6], IntRect(960, 0, 48, 48), 187, Elements_Hazards);
    elementsHazards[21] = new ElementButton(*elements[6], IntRect(1008, 0, 48, 48), 188, Elements_Hazards);
    elementsHazards[22] = new ElementButton(*elements[6], IntRect(1056, 0, 48, 48), 189, Elements_Hazards);
    elementsHazards[23] = new ElementButton(*elements[6], IntRect(1104, 0, 48, 48), 190, Elements_Hazards);
    elementsHazards[24] = new ElementButton(*elements[6], IntRect(1152, 0, 48, 48), 191, Elements_Hazards);
    elementsHazards[25] = new ElementButton(*elements[6], IntRect(1200, 0, 48, 48), 192, Elements_Hazards);
    elementsHazards[26] = new ElementButton(*elements[6], IntRect(1248, 0, 48, 48), 193, Elements_Hazards);
    elementsHazards[27] = new ElementButton(*elements[6], IntRect(1296, 0, 48, 48), 194, Elements_Hazards);
    elementsHazards[28] = new ElementButton(*elements[6], IntRect(1344, 0, 48, 48), 195, Elements_Hazards);
    elementsHazards[29] = new ElementButton(*elements[6], IntRect(1392, 0, 48, 48), 196, Elements_Hazards);
    elementsHazards[30] = new ElementButton(*elements[6], IntRect(1440, 0, 48, 48), 197, Elements_Hazards);
    elementsHazards[31] = new ElementButton(*elements[6], IntRect(1488, 0, 48, 48), 198, Elements_Hazards);
    elementsHazards[32] = new ElementButton(*elements[6], IntRect(1536, 0, 48, 48), 199, Elements_Hazards);
    elementsHazards[33] = new ElementButton(*elements[6], IntRect(1584, 0, 48, 48), 200, Elements_Hazards);
    elementsHazards[34] = new ElementButton(*elements[6], IntRect(1632, 0, 48, 48), 201, Elements_Hazards);
    elementsHazards[35] = new ElementButton(*elements[6], IntRect(1680, 0, 48, 48), 202, Elements_Hazards);
    elementsHazards[36] = new ElementButton(*elements[6], IntRect(1728, 0, 48, 48), 203, Elements_Hazards);
    elementsHazards[37] = new ElementButton(*elements[6], IntRect(1776, 0, 48, 48), 204, Elements_Hazards);
    elementsHazards[38] = new ElementButton(*elements[6], IntRect(1824, 0, 48, 48), 205, Elements_Hazards);
    elementsHazards[39] = new ElementButton(*elements[6], IntRect(1872, 0, 48, 48), 206, Elements_Hazards);
    elementsHazards[40] = new ElementButton(*elements[6], IntRect(1920, 0, 48, 48), 207, Elements_Hazards);
    elementsHazards[41] = new ElementButton(*elements[6], IntRect(1968, 0, 48, 48), 208, Elements_Hazards);
    elementsHazards[42] = new ElementButton(*elements[6], IntRect(0, 48, 48, 48), 209, Elements_Hazards);
    elementsHazards[43] = new ElementButton(*elements[6], IntRect(48, 48, 48, 48), 210, Elements_Hazards);
    elementsHazards[44] = new ElementButton(*elements[6], IntRect(96, 48, 48, 48), 211, Elements_Hazards);
    elementsHazards[45] = new ElementButton(*elements[6], IntRect(144, 48, 48, 48), 212, Elements_Hazards);

    resizerButton[1]->setRotation(90);
    resizerButton[2]->setScale(1, -1);
    resizerButton[3]->setRotation(90);
    resizerButton[3]->setScale(1, -1);

    scrollButton[1]->setScale(1, -1);

	{
		FMOD_RESULT result;

		result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Menu2.wav", FMOD_DEFAULT, NULL, &buttonClick);

		if (result != FMOD_OK)
			allright = false;

		result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Editor1.wav", FMOD_DEFAULT, NULL, &itemPut);

		if (result != FMOD_OK)
			allright = false;

		result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Editor2.wav", FMOD_DEFAULT, NULL, &itemDelete);

		if (result != FMOD_OK)
			allright = false;

		result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Editor3.wav", FMOD_DEFAULT, NULL, &switchVisibility);

		if (result != FMOD_OK)
			allright = false;

		result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/EnterLevel.wav", FMOD_DEFAULT, NULL, &testLevel);

		if (result != FMOD_OK)
			allright = false;
	}

    returnButton->setSound(&buttonClick);

    for (register int i = 0; i < 4; i++)
        resizerButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 2; i++)
        scrollButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 3; i++)
        layerButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 9; i++)
        typeButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 6; i++)
        prefsButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 2; i++)
        liquidButton2[i]->setSound(&buttonClick);

    for (register int i = 0; i < 2; i++)
        autoscrollButton2[i]->setSound(&buttonClick);

    for (register int i = 0; i < 6; i++)
        InfoButtons[i]->setSound(&buttonClick);

    for (register int i = 0; i < 4; i++)
        fileButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 8; i++)
        editButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 4; i++)
        liquidButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 4; i++)
        autoscrollButton[i]->setSound(&buttonClick);

    for (register int i = 0; i < 3; i++)
        elementsEsssential[i]->setSound(&buttonClick);

    for (register int i = 0; i < 35; i++)
        elementsPlatforms[i]->setSound(&buttonClick);

    for (register int i = 0; i < 30; i++)
        elementsBonus[i]->setSound(&buttonClick);

    for (register int i = 0; i < 36; i++)
        elementsPipes[i]->setSound(&buttonClick);

    for (register int i = 0; i < 26; i++)
        elementsSceneries[i]->setSound(&buttonClick);

    for (register int i = 0; i < 57; i++)
        elementsEnemies[i]->setSound(&buttonClick);

    for (register int i = 0; i < 46; i++)
        elementsHazards[i]->setSound(&buttonClick);

    #ifndef NOMUSIC
    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Jump.wav", FMOD_DEFAULT, NULL, &sfxSamples[0]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Coin.wav", FMOD_DEFAULT, NULL, &sfxSamples[1]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Bump.wav", FMOD_DEFAULT, NULL, &sfxSamples[2]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Break.wav", FMOD_DEFAULT, NULL, &sfxSamples[3]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Sprout.wav", FMOD_DEFAULT, NULL, &sfxSamples[4]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/PowerUp.wav", FMOD_DEFAULT, NULL, &sfxSamples[5]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/PowerDown.wav", FMOD_DEFAULT, NULL, &sfxSamples[6]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/1Up.wav", FMOD_DEFAULT, NULL, &sfxSamples[7]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Fireball.wav", FMOD_DEFAULT, NULL, &sfxSamples[8]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Beet.wav", FMOD_DEFAULT, NULL, &sfxSamples[9]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Hammer.wav", FMOD_DEFAULT, NULL, &sfxSamples[10]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Stomp.wav", FMOD_DEFAULT, NULL, &sfxSamples[11]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Kick.wav", FMOD_DEFAULT, NULL, &sfxSamples[12]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Spring.wav", FMOD_DEFAULT, NULL, &sfxSamples[13]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Lakitu1.wav", FMOD_DEFAULT, NULL, &sfxSamples[14]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Lakitu2.wav", FMOD_DEFAULT, NULL, &sfxSamples[15]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Lakitu3.wav", FMOD_DEFAULT, NULL, &sfxSamples[16]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Swim.wav", FMOD_DEFAULT, NULL, &sfxSamples[17]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/RaisingWater.wav", FMOD_DEFAULT, NULL, &sfxSamples[18]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Centipede.wav", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &sfxSamples[19]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/CannonNormal.wav", FMOD_DEFAULT, NULL, &sfxSamples[20]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/CannonHoming.wav", FMOD_DEFAULT, NULL, &sfxSamples[21]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/CannonSpike.wav", FMOD_DEFAULT, NULL, &sfxSamples[22]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/CannonLava.wav", FMOD_DEFAULT, NULL, &sfxSamples[23]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/BowserFire.wav", FMOD_DEFAULT, NULL, &sfxSamples[24]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/BowserDammaged.wav", FMOD_DEFAULT, NULL, &sfxSamples[25]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/BowserLastDammage.wav", FMOD_DEFAULT, NULL, &sfxSamples[26]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/BowserFall.wav", FMOD_DEFAULT, NULL, &sfxSamples[27]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/EnterLevel.wav", FMOD_DEFAULT, NULL, &sfxSamples[28]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/TimeWarning.wav", FMOD_DEFAULT, NULL, &sfxSamples[29]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/TimeCount.wav", FMOD_DEFAULT, NULL, &sfxSamples[30]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Death.wav", FMOD_DEFAULT, NULL, &sfxSamples[31]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/GameOver.wav", FMOD_DEFAULT, NULL, &sfxSamples[32]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Storm.wav", FMOD_DEFAULT, NULL, &sfxSamples[33]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateSound(soundSystem, "Data/Sfx/Switch.wav", FMOD_DEFAULT, NULL, &sfxSamples[34]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/World1.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[0]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Cave.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[1]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Underground.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[2]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Rockland.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[3]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Starland.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[4]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Yoshi3.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[5]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Underwater.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[6]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/SelectSave.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[7]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/GhostHouse.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[8]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Castle.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[9]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Castle2.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[10]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Yoshi1.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[11]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Yoshi2.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[12]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Map1.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[13]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Map2.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[14]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Map3.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[15]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Fastrun1.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[16]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Fastrun2.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[17]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/InDaKitchen.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[18]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Yky.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[19]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/YetAnotherBonus.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[20]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Apoplexy.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[21]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Victory.mp3", FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[25]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Starman.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[26]);

    if (result != FMOD_OK)
        allright = false;

    result = FMOD_System_CreateStream(soundSystem, "Data/Sfx/Musics/Battle.mp3", FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[27]);

    if (result != FMOD_OK)
        allright = false;

    musicSamples[22] = NULL;
    musicSamples[23] = NULL;
    musicSamples[24] = NULL;

    if (editorMusic)
    {
        FMOD_RESULT result;
        string filename;

        switch (musicNumber)
        {
            case 1 : filename = "Data/Sfx/Musics/EditorScreen1.mp3"; break;
            case 2 : filename = "Data/Sfx/Musics/EditorScreen2.mp3"; break;
            case 3 : filename = "Data/Sfx/Musics/EditorScreen3.mp3"; break;
            case 4 : filename = "Data/Sfx/Musics/EditorScreen4.mp3"; break;
        }

        result = FMOD_System_CreateStream(soundSystem,
                                filename.c_str(),
                                FMOD_LOOP_NORMAL |
                                FMOD_SOFTWARE |
                                FMOD_2D,
                                NULL,
                                &edMusic);

        if (result != FMOD_OK)
            allright = false;

        result = FMOD_System_PlaySound(soundSystem,
                              static_cast<FMOD_CHANNELINDEX>(20),
                              edMusic,
                              0,
                              &musicChannel);

        if (result != FMOD_OK)
            allright = false;
    }
    #endif

    if (!fileToLoad.empty())
        Level_LoadEntry();

    return allright;
}

static void UpdateAssetsEdition()
{
    int camMouseX = 0;
    int camMouseY = 0;

    char camX = 0;
    char camY = 0;

    bool keySpeed;

    {
        bool focus = mainWindow->hasFocus();

        bool keyLeft = Keyboard::isKeyPressed(static_cast<Keyboard::Key>(keybindings[0])) && focus;
        bool keyRight = Keyboard::isKeyPressed(static_cast<Keyboard::Key>(keybindings[1])) && focus;
        bool keyDown = Keyboard::isKeyPressed(static_cast<Keyboard::Key>(keybindings[2])) && focus;
        bool keyUp = Keyboard::isKeyPressed(static_cast<Keyboard::Key>(keybindings[3])) && focus;

        keySpeed = (Keyboard::isKeyPressed(Keyboard::LShift) || Keyboard::isKeyPressed(Keyboard::RShift)) && focus;

        if (keyLeft && !keyRight)
            camX = -1;
        else if (keyRight && !keyLeft)
            camX = 1;

        if (keyUp && !keyDown)
            camY = -1;
        else if (keyDown && !keyUp)
            camY = 1;
    }

    if (!editorMouseScrolling)
        goto LBL_SKIPMOUSECONTROL;

    if (toolbarVisible)
    {
        if (mainWindow->hasFocus())
        {
            if (mpos_absolute.x < MOUSEINFLUENCE && mpos_absolute.y > 150 && mpos_absolute.y < 448)
                camMouseX = -1;
            else if (mpos_absolute.x > 640-MOUSEINFLUENCE && mpos_absolute.y > 150 && mpos_absolute.y < 448)
                camMouseX = 1;

            if (mpos_absolute.y > 480-MOUSEINFLUENCE && mpos_absolute.x > 133 && mpos_absolute.x < 459)
                camMouseY = 1;
        }
    }
    else
    {
        if (mainWindow->hasFocus())
        {
            if (mpos_absolute.x < MOUSEINFLUENCE)
                camMouseX = -1;
            else if (mpos_absolute.x > 640-MOUSEINFLUENCE)
                camMouseX = 1;

            if (mpos_absolute.y < MOUSEINFLUENCE)
                camMouseY = -1;
            else if (mpos_absolute.y > 480-MOUSEINFLUENCE)
                camMouseY = 1;
        }
    }

    if (camX == 0)
    {
        if (camMouseX == -1)
            camX = -1;
        else if (camMouseX == 1)
            camX = 1;
    }

    if (camY == 0)
    {
        if (camMouseY == -1)
            camY = -1;
        else if (camMouseY == 1)
            camY = 1;
    }

    LBL_SKIPMOUSECONTROL :

    switch (camX)
    {
        case -1:
            if (keySpeed)
                cameraSpeed.x = -CAMSPEED * 2.0;
            else
            {
                if (cameraSpeed.x > - (CAMSPEED - CAMACCEL))
                    cameraSpeed.x -= CAMACCEL;
                else
                    cameraSpeed.x = -CAMSPEED;
            }
            break;
        case 0:
            if (cameraSpeed.x < -CAMDECEL)
                cameraSpeed.x += CAMDECEL;
            else if (cameraSpeed.x > CAMDECEL)
                cameraSpeed.x -= CAMDECEL;
            else if (cameraSpeed.x != 0)
                cameraSpeed.x = 0;
            break;
        case 1:
            if (keySpeed)
                cameraSpeed.x = CAMSPEED * 2.0;
            else
            {
                if (cameraSpeed.x < CAMSPEED - CAMACCEL)
                    cameraSpeed.x += CAMACCEL;
                else
                    cameraSpeed.x = CAMSPEED;
            }
            break;
    }

    switch (camY)
    {
        case -1:
            if (keySpeed)
                cameraSpeed.y = -CAMSPEED * 2.0;
            else
            {
                if (cameraSpeed.y > - (CAMSPEED - CAMACCEL))
                    cameraSpeed.y -= CAMACCEL;
                else
                    cameraSpeed.y = -CAMSPEED;
            }
            break;
        case 0:
            if (cameraSpeed.y < -CAMDECEL)
                cameraSpeed.y += CAMDECEL;
            else if (cameraSpeed.y > CAMDECEL)
                cameraSpeed.y -= CAMDECEL;
            else if (cameraSpeed.y != 0)
                cameraSpeed.y = 0;
            break;
        case 1:
            if (keySpeed)
                cameraSpeed.y = CAMSPEED * 2.0;
            else
            {
                if (cameraSpeed.y < CAMSPEED - CAMACCEL)
                    cameraSpeed.y += CAMACCEL;
                else
                    cameraSpeed.y = CAMSPEED;
            }
            break;
    }

    camPos.x += roundf(cameraSpeed.x);
    camPos.y += roundf(cameraSpeed.y);

    camera->setCenter(camPos.x, camPos.y);

    if (sectionb)
    {
        if (camPos.x < 320)
        {
            camPos.x = 320;

            if (cameraSpeed.x < 0)
                cameraSpeed.x = 0;

            camera->setCenter(320, camPos.y);
        }
        else if (camPos.x > (roomScaleb.x*640) - 320)
        {
            camPos.x = (roomScaleb.x*640) - 320;

            if (cameraSpeed.x > 0)
                cameraSpeed.x = 0;

            camera->setCenter(camPos.x, camPos.y);
        }

        if (camPos.y < 240)
        {
            camPos.y = 240;

            if (cameraSpeed.y < 0)
                cameraSpeed.y = 0;

            camera->setCenter(camPos.x, 240);
        }
        else if (camPos.y > (roomScaleb.y*480) - 240)
        {
            camPos.y = (roomScaleb.y*480) - 240;

            if (cameraSpeed.y > 0)
                cameraSpeed.y = 0;

            camera->setCenter(camPos.x, camPos.y);
        }
    }
    else
    {
        if (camPos.x < 320)
        {
            camPos.x = 320;

            if (cameraSpeed.x < 0)
                cameraSpeed.x = 0;

            camera->setCenter(320, camPos.y);
        }
        else if (camPos.x > (roomScale.x*640) - 320)
        {
            camPos.x = (roomScale.x*640) - 320;

            if (cameraSpeed.x > 0)
                cameraSpeed.x = 0;

            camera->setCenter(camPos.x, camPos.y);
        }

        if (camPos.y < 240)
        {
            camPos.y = 240;

            if (cameraSpeed.y < 0)
                cameraSpeed.y = 0;

            camera->setCenter(camPos.x, 240);
        }
        else if (camPos.y > (roomScale.y*480) - 240)
        {
            camPos.y = (roomScale.y*480) - 240;

            if (cameraSpeed.y > 0)
                cameraSpeed.y = 0;

            camera->setCenter(camPos.x, camPos.y);
        }
    }

    if (fadeAlpha != 0)
        fadeRect->setPosition(camPos.x-320, camPos.y-240);

    grid->setPosition((roundf(camPos.x / 32) * 32) - 352, (roundf(camPos.y / 32) * 32) - 256);

    mainTexture.setView(*camera);
    mpos_relative = mainTexture.mapPixelToCoords(mpos_absolute);

    if (helpText->getString() != "")
    {
        FloatRect textBounds(helpText->getGlobalBounds());
        Uint8 textColor = helpText->getFillColor().r;

        helpText->setOrigin(textBounds.width / 2, 0);
        helpText->setPosition(mpos_relative.x, mpos_relative.y - 22);

        textBounds = helpText->getGlobalBounds();

        if (selectionWillFadeOut)
        {
            if (textColor > 8)
            {
                textColor -= 8;
                helpText->setFillColor(Color(textColor, textColor, 0, 255));
            }
            else
            {
                helpText->setFillColor(Color(0, 0, 0, 255));
                selectionWillFadeOut = false;
            }
        }
        else
        {
            if (textColor < 247)
            {
                textColor += 8;
                helpText->setFillColor(Color(textColor, textColor, 0, 255));
            }
            else
            {
                helpText->setFillColor(Color(255, 255, 0, 255));
                selectionWillFadeOut = true;
            }
        }

        if (textBounds.left < camPos.x-320)
            helpText->setPosition((camPos.x-320) + (textBounds.width/2), mpos_relative.y-22);
        else if (textBounds.left + textBounds.width > camPos.x+320)
            helpText->setPosition((camPos.x+320) - (textBounds.width/2), mpos_relative.y-22);
    }

    if (currentSelection != NONE)
    {
        Vector2f itemPos(roundf((mpos_relative.x - 16) / 32) * 32, roundf((mpos_relative.y - 16) / 32) * 32);

        if (sectionb)
        {
            if (itemPos.x < 0)
                itemPos.x = 0;

            if (itemPos.x > (roomScaleb.x * 640) - 32)
                itemPos.x = (roomScaleb.x * 640) - 32;

            if (itemPos.y < 0)
                itemPos.y = 0;

            if (itemPos.y > (roomScaleb.y * 480) - 32)
                itemPos.y = (roomScaleb.y * 480) - 32;
        }
        else
        {
            if (itemPos.x < 0)
                itemPos.x = 0;

            if (itemPos.x > (roomScale.x * 640) - 32)
                itemPos.x = (roomScale.x * 640) - 32;

            if (itemPos.y < 0)
                itemPos.y = 0;

            if (itemPos.y > (roomScale.y * 480) - 32)
                itemPos.y = (roomScale.y * 480) - 32;
        }

        itemHandled->setPosition(itemPos);
    }

    if (toolbarVisible)
    {
        toolbox->setPosition(camPos.x-320, camPos.y-240);
        layerPanel->setPosition(camPos.x-320, camPos.y+240);
        stringPanel->setPosition(camPos.x+320, camPos.y+240);

        resizerButton[0]->setPosition(camPos.x-254, camPos.y-190);
        resizerButton[1]->setPosition(camPos.x-218, camPos.y-154);
        resizerButton[2]->setPosition(camPos.x-254, camPos.y-118);
        resizerButton[3]->setPosition(camPos.x-290, camPos.y-154);

        scrollButton[0]->setPosition(camPos.x+290, camPos.y-174);
        scrollButton[1]->setPosition(camPos.x+290, camPos.y-122);

        layerButton[0]->setPosition(camPos.x-268, camPos.y+239);
        layerButton[1]->setPosition(camPos.x-230, camPos.y+239);
        layerButton[2]->setPosition(camPos.x-192, camPos.y+239);

        typeButton[0]->setPosition(camPos.x-36, camPos.y-182);
        typeButton[1]->setPosition(camPos.x, camPos.y-182);
        typeButton[2]->setPosition(camPos.x+36, camPos.y-182);
        typeButton[3]->setPosition(camPos.x-36, camPos.y-148);
        typeButton[4]->setPosition(camPos.x, camPos.y-148);
        typeButton[5]->setPosition(camPos.x+36, camPos.y-148);
        typeButton[6]->setPosition(camPos.x-36, camPos.y-114);
        typeButton[7]->setPosition(camPos.x, camPos.y-114);
        typeButton[8]->setPosition(camPos.x+36, camPos.y-114);

        prefsButton[0]->setPosition(camPos.x+230, camPos.y+226);
        prefsButton[1]->setPosition(camPos.x+258, camPos.y+226);
        prefsButton[2]->setPosition(camPos.x+286, camPos.y+226);
        prefsButton[3]->setPosition(camPos.x+314, camPos.y+226);
        prefsButton[4]->setPosition(camPos.x+342, camPos.y+226);
        prefsButton[5]->setPosition(camPos.x+370, camPos.y+226);

        switch (elementsLine)
        {
            case 0 :
                elementsEsssential[0]->setPosition(camPos.x+16, camPos.y-142);
                elementsEsssential[1]->setPosition(camPos.x+96, camPos.y-142);
                elementsEsssential[2]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 1 :
                elementsPlatforms[0]->setPosition(camPos.x-12, camPos.y-142);
                elementsPlatforms[1]->setPosition(camPos.x+42, camPos.y-142);
                elementsPlatforms[2]->setPosition(camPos.x+96, camPos.y-142);
                elementsPlatforms[3]->setPosition(camPos.x+150, camPos.y-142);
                elementsPlatforms[4]->setPosition(camPos.x+204, camPos.y-142);
                break;
            case 2 :
                elementsPlatforms[5]->setPosition(camPos.x-12, camPos.y-142);
                elementsPlatforms[6]->setPosition(camPos.x+42, camPos.y-142);
                elementsPlatforms[7]->setPosition(camPos.x+96, camPos.y-142);
                elementsPlatforms[8]->setPosition(camPos.x+150, camPos.y-142);
                elementsPlatforms[9]->setPosition(camPos.x+204, camPos.y-142);
                break;
            case 3 :
                elementsPlatforms[10]->setPosition(camPos.x-12, camPos.y-142);
                elementsPlatforms[11]->setPosition(camPos.x+42, camPos.y-142);
                elementsPlatforms[12]->setPosition(camPos.x+96, camPos.y-142);
                elementsPlatforms[13]->setPosition(camPos.x+150, camPos.y-142);
                elementsPlatforms[14]->setPosition(camPos.x+204, camPos.y-142);
                break;
            case 4 :
                elementsPlatforms[15]->setPosition(camPos.x-12, camPos.y-142);
                elementsPlatforms[16]->setPosition(camPos.x+42, camPos.y-142);
                elementsPlatforms[17]->setPosition(camPos.x+96, camPos.y-142);
                elementsPlatforms[18]->setPosition(camPos.x+150, camPos.y-142);
                elementsPlatforms[19]->setPosition(camPos.x+204, camPos.y-142);
                break;
            case 5 :
                elementsPlatforms[20]->setPosition(camPos.x+16, camPos.y-142);
                elementsPlatforms[21]->setPosition(camPos.x+96, camPos.y-142);
                elementsPlatforms[22]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 6 :
                elementsPlatforms[23]->setPosition(camPos.x-28, camPos.y-142);
                elementsPlatforms[24]->setPosition(camPos.x+22, camPos.y-142);
                elementsPlatforms[25]->setPosition(camPos.x+72, camPos.y-142);
                elementsPlatforms[26]->setPosition(camPos.x+122, camPos.y-142);
                elementsPlatforms[27]->setPosition(camPos.x+172, camPos.y-142);
                elementsPlatforms[28]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 7 :
                elementsPlatforms[29]->setPosition(camPos.x-28, camPos.y-142);
                elementsPlatforms[30]->setPosition(camPos.x+22, camPos.y-142);
                elementsPlatforms[31]->setPosition(camPos.x+72, camPos.y-142);
                elementsPlatforms[32]->setPosition(camPos.x+122, camPos.y-142);
                elementsPlatforms[33]->setPosition(camPos.x+172, camPos.y-142);
                elementsPlatforms[34]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 8 :
                elementsBonus[0]->setPosition(camPos.x-28, camPos.y-142);
                elementsBonus[1]->setPosition(camPos.x+22, camPos.y-142);
                elementsBonus[2]->setPosition(camPos.x+72, camPos.y-142);
                elementsBonus[3]->setPosition(camPos.x+122, camPos.y-142);
                elementsBonus[4]->setPosition(camPos.x+172, camPos.y-142);
                elementsBonus[5]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 9 :
                elementsBonus[6]->setPosition(camPos.x-28, camPos.y-142);
                elementsBonus[7]->setPosition(camPos.x+22, camPos.y-142);
                elementsBonus[8]->setPosition(camPos.x+72, camPos.y-142);
                elementsBonus[9]->setPosition(camPos.x+122, camPos.y-142);
                elementsBonus[10]->setPosition(camPos.x+172, camPos.y-142);
                elementsBonus[11]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 10 :
                elementsBonus[12]->setPosition(camPos.x-28, camPos.y-142);
                elementsBonus[13]->setPosition(camPos.x+22, camPos.y-142);
                elementsBonus[14]->setPosition(camPos.x+72, camPos.y-142);
                elementsBonus[15]->setPosition(camPos.x+122, camPos.y-142);
                elementsBonus[16]->setPosition(camPos.x+172, camPos.y-142);
                elementsBonus[17]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 11 :
                elementsBonus[18]->setPosition(camPos.x-28, camPos.y-142);
                elementsBonus[19]->setPosition(camPos.x+22, camPos.y-142);
                elementsBonus[20]->setPosition(camPos.x+72, camPos.y-142);
                elementsBonus[21]->setPosition(camPos.x+122, camPos.y-142);
                elementsBonus[22]->setPosition(camPos.x+172, camPos.y-142);
                elementsBonus[23]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 12 :
                elementsBonus[24]->setPosition(camPos.x-28, camPos.y-142);
                elementsBonus[25]->setPosition(camPos.x+22, camPos.y-142);
                elementsBonus[26]->setPosition(camPos.x+72, camPos.y-142);
                elementsBonus[27]->setPosition(camPos.x+122, camPos.y-142);
                elementsBonus[28]->setPosition(camPos.x+172, camPos.y-142);
                elementsBonus[29]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 13 :
                elementsPipes[0]->setPosition(camPos.x-28, camPos.y-142);
                elementsPipes[1]->setPosition(camPos.x+22, camPos.y-142);
                elementsPipes[2]->setPosition(camPos.x+72, camPos.y-142);
                elementsPipes[3]->setPosition(camPos.x+122, camPos.y-142);
                elementsPipes[4]->setPosition(camPos.x+172, camPos.y-142);
                elementsPipes[5]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 14 :
                elementsPipes[6]->setPosition(camPos.x-28, camPos.y-142);
                elementsPipes[7]->setPosition(camPos.x+22, camPos.y-142);
                elementsPipes[8]->setPosition(camPos.x+72, camPos.y-142);
                elementsPipes[9]->setPosition(camPos.x+122, camPos.y-142);
                elementsPipes[10]->setPosition(camPos.x+172, camPos.y-142);
                elementsPipes[11]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 15 :
                elementsPipes[12]->setPosition(camPos.x-28, camPos.y-142);
                elementsPipes[13]->setPosition(camPos.x+22, camPos.y-142);
                elementsPipes[14]->setPosition(camPos.x+72, camPos.y-142);
                elementsPipes[15]->setPosition(camPos.x+122, camPos.y-142);
                elementsPipes[16]->setPosition(camPos.x+172, camPos.y-142);
                elementsPipes[17]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 16 :
                elementsPipes[18]->setPosition(camPos.x-28, camPos.y-142);
                elementsPipes[19]->setPosition(camPos.x+22, camPos.y-142);
                elementsPipes[20]->setPosition(camPos.x+72, camPos.y-142);
                elementsPipes[21]->setPosition(camPos.x+122, camPos.y-142);
                elementsPipes[22]->setPosition(camPos.x+172, camPos.y-142);
                elementsPipes[23]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 17 :
                elementsPipes[24]->setPosition(camPos.x-28, camPos.y-142);
                elementsPipes[25]->setPosition(camPos.x+22, camPos.y-142);
                elementsPipes[26]->setPosition(camPos.x+72, camPos.y-142);
                elementsPipes[27]->setPosition(camPos.x+122, camPos.y-142);
                elementsPipes[28]->setPosition(camPos.x+172, camPos.y-142);
                elementsPipes[29]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 18 :
                elementsPipes[30]->setPosition(camPos.x-28, camPos.y-142);
                elementsPipes[31]->setPosition(camPos.x+22, camPos.y-142);
                elementsPipes[32]->setPosition(camPos.x+72, camPos.y-142);
                elementsPipes[33]->setPosition(camPos.x+122, camPos.y-142);
                elementsPipes[34]->setPosition(camPos.x+172, camPos.y-142);
                elementsPipes[35]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 19 :
                elementsSceneries[0]->setPosition(camPos.x+16, camPos.y-142);
                elementsSceneries[1]->setPosition(camPos.x+96, camPos.y-142);
                elementsSceneries[2]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 20 :
                elementsSceneries[3]->setPosition(camPos.x+16, camPos.y-142);
                elementsSceneries[4]->setPosition(camPos.x+96, camPos.y-142);
                elementsSceneries[5]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 21 :
                elementsSceneries[6]->setPosition(camPos.x+16, camPos.y-142);
                elementsSceneries[7]->setPosition(camPos.x+96, camPos.y-142);
                elementsSceneries[8]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 22 :
                elementsSceneries[9]->setPosition(camPos.x+16, camPos.y-142);
                elementsSceneries[10]->setPosition(camPos.x+96, camPos.y-142);
                elementsSceneries[11]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 23 :
                elementsSceneries[12]->setPosition(camPos.x+16, camPos.y-142);
                elementsSceneries[13]->setPosition(camPos.x+96, camPos.y-142);
                elementsSceneries[14]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 24 :
                elementsSceneries[15]->setPosition(camPos.x+10, camPos.y-142);
                elementsSceneries[16]->setPosition(camPos.x+68, camPos.y-142);
                elementsSceneries[17]->setPosition(camPos.x+126, camPos.y-142);
                elementsSceneries[18]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 25 :
                elementsSceneries[19]->setPosition(camPos.x+16, camPos.y-142);
                elementsSceneries[22]->setPosition(camPos.x+96, camPos.y-142);
                elementsSceneries[23]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 26 :
                elementsSceneries[20]->setPosition(camPos.x+10, camPos.y-142);
                elementsSceneries[21]->setPosition(camPos.x+68, camPos.y-142);
                elementsSceneries[24]->setPosition(camPos.x+126, camPos.y-142);
                elementsSceneries[25]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 27 :
                elementsEnemies[0]->setPosition(camPos.x-12, camPos.y-142);
                elementsEnemies[1]->setPosition(camPos.x+42, camPos.y-142);
                elementsEnemies[2]->setPosition(camPos.x+96, camPos.y-142);
                elementsEnemies[3]->setPosition(camPos.x+150, camPos.y-142);
                elementsEnemies[4]->setPosition(camPos.x+204, camPos.y-142);
                break;
            case 28 :
                elementsEnemies[5]->setPosition(camPos.x+10, camPos.y-142);
                elementsEnemies[6]->setPosition(camPos.x+68, camPos.y-142);
                elementsEnemies[7]->setPosition(camPos.x+126, camPos.y-142);
                elementsEnemies[8]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 29 :
                elementsEnemies[9]->setPosition(camPos.x+10, camPos.y-142);
                elementsEnemies[10]->setPosition(camPos.x+68, camPos.y-142);
                elementsEnemies[11]->setPosition(camPos.x+126, camPos.y-142);
                elementsEnemies[12]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 30 :
                elementsEnemies[13]->setPosition(camPos.x-28, camPos.y-142);
                elementsEnemies[14]->setPosition(camPos.x+22, camPos.y-142);
                elementsEnemies[15]->setPosition(camPos.x+72, camPos.y-142);
                elementsEnemies[16]->setPosition(camPos.x+122, camPos.y-142);
                elementsEnemies[17]->setPosition(camPos.x+172, camPos.y-142);
                elementsEnemies[18]->setPosition(camPos.x+222, camPos.y-142);
                break;
            case 31 :
                elementsEnemies[19]->setPosition(camPos.x+10, camPos.y-142);
                elementsEnemies[20]->setPosition(camPos.x+68, camPos.y-142);
                elementsEnemies[21]->setPosition(camPos.x+126, camPos.y-142);
                elementsEnemies[22]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 32 :
                elementsEnemies[53]->setPosition(camPos.x+10, camPos.y-142);
                elementsEnemies[54]->setPosition(camPos.x+68, camPos.y-142);
                elementsEnemies[55]->setPosition(camPos.x+126, camPos.y-142);
                elementsEnemies[56]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 33 :
                elementsEnemies[23]->setPosition(camPos.x+10, camPos.y-142);
                elementsEnemies[24]->setPosition(camPos.x+68, camPos.y-142);
                elementsEnemies[25]->setPosition(camPos.x+126, camPos.y-142);
                elementsEnemies[26]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 34 :
                elementsEnemies[27]->setPosition(camPos.x+10, camPos.y-142);
                elementsEnemies[28]->setPosition(camPos.x+68, camPos.y-142);
                elementsEnemies[29]->setPosition(camPos.x+126, camPos.y-142);
                elementsEnemies[30]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 35 :
                elementsEnemies[31]->setPosition(camPos.x+10, camPos.y-142);
                elementsEnemies[32]->setPosition(camPos.x+68, camPos.y-142);
                elementsEnemies[33]->setPosition(camPos.x+126, camPos.y-142);
                elementsEnemies[34]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 36 :
                elementsEnemies[35]->setPosition(camPos.x+10, camPos.y-142);
                elementsEnemies[36]->setPosition(camPos.x+68, camPos.y-142);
                elementsEnemies[37]->setPosition(camPos.x+126, camPos.y-142);
                elementsEnemies[38]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 37 :
                elementsEnemies[39]->setPosition(camPos.x-12, camPos.y-142);
                elementsEnemies[40]->setPosition(camPos.x+42, camPos.y-142);
                elementsEnemies[41]->setPosition(camPos.x+96, camPos.y-142);
                elementsEnemies[42]->setPosition(camPos.x+150, camPos.y-142);
                elementsEnemies[43]->setPosition(camPos.x+204, camPos.y-142);
                break;
            case 38 :
                elementsEnemies[44]->setPosition(camPos.x+16, camPos.y-142);
                elementsEnemies[45]->setPosition(camPos.x+96, camPos.y-142);
                elementsEnemies[46]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 39 :
                elementsEnemies[47]->setPosition(camPos.x+16, camPos.y-142);
                elementsEnemies[48]->setPosition(camPos.x+96, camPos.y-142);
                elementsEnemies[49]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 40 :
                elementsEnemies[50]->setPosition(camPos.x+16, camPos.y-142);
                elementsEnemies[51]->setPosition(camPos.x+96, camPos.y-142);
                elementsEnemies[52]->setPosition(camPos.x+176, camPos.y-142);
                break;
            case 41 :
                elementsHazards[0]->setPosition(camPos.x-12, camPos.y-142);
                elementsHazards[1]->setPosition(camPos.x+42, camPos.y-142);
                elementsHazards[2]->setPosition(camPos.x+96, camPos.y-142);
                elementsHazards[3]->setPosition(camPos.x+150, camPos.y-142);
                elementsHazards[4]->setPosition(camPos.x+204, camPos.y-142);
                break;
            case 42 :
                elementsHazards[5]->setPosition(camPos.x+10, camPos.y-142);
                elementsHazards[6]->setPosition(camPos.x+68, camPos.y-142);
                elementsHazards[7]->setPosition(camPos.x+126, camPos.y-142);
                elementsHazards[8]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 43 :
                elementsHazards[9]->setPosition(camPos.x+10, camPos.y-142);
                elementsHazards[10]->setPosition(camPos.x+68, camPos.y-142);
                elementsHazards[11]->setPosition(camPos.x+126, camPos.y-142);
                elementsHazards[12]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 44 :
                elementsHazards[13]->setPosition(camPos.x+10, camPos.y-142);
                elementsHazards[14]->setPosition(camPos.x+68, camPos.y-142);
                elementsHazards[15]->setPosition(camPos.x+126, camPos.y-142);
                elementsHazards[16]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 45 :
                elementsHazards[17]->setPosition(camPos.x+10, camPos.y-142);
                elementsHazards[18]->setPosition(camPos.x+68, camPos.y-142);
                elementsHazards[19]->setPosition(camPos.x+126, camPos.y-142);
                elementsHazards[20]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 46 :
                elementsHazards[21]->setPosition(camPos.x+10, camPos.y-142);
                elementsHazards[22]->setPosition(camPos.x+68, camPos.y-142);
                elementsHazards[23]->setPosition(camPos.x+126, camPos.y-142);
                elementsHazards[24]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 47 :
                elementsHazards[25]->setPosition(camPos.x-12, camPos.y-142);
                elementsHazards[26]->setPosition(camPos.x+42, camPos.y-142);
                elementsHazards[27]->setPosition(camPos.x+96, camPos.y-142);
                elementsHazards[28]->setPosition(camPos.x+150, camPos.y-142);
                elementsHazards[29]->setPosition(camPos.x+204, camPos.y-142);
                break;
            case 48 :
                elementsHazards[30]->setPosition(camPos.x-12, camPos.y-142);
                elementsHazards[31]->setPosition(camPos.x+42, camPos.y-142);
                elementsHazards[32]->setPosition(camPos.x+96, camPos.y-142);
                elementsHazards[33]->setPosition(camPos.x+150, camPos.y-142);
                elementsHazards[34]->setPosition(camPos.x+204, camPos.y-142);
                break;
            case 49 :
                elementsHazards[35]->setPosition(camPos.x+10, camPos.y-142);
                elementsHazards[36]->setPosition(camPos.x+68, camPos.y-142);
                elementsHazards[37]->setPosition(camPos.x+126, camPos.y-142);
                elementsHazards[38]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 50 :
                elementsHazards[39]->setPosition(camPos.x+10, camPos.y-142);
                elementsHazards[40]->setPosition(camPos.x+68, camPos.y-142);
                elementsHazards[41]->setPosition(camPos.x+126, camPos.y-142);
                elementsHazards[42]->setPosition(camPos.x+184, camPos.y-142);
                break;
            case 51 :
                elementsHazards[43]->setPosition(camPos.x+16, camPos.y-142);
                elementsHazards[44]->setPosition(camPos.x+96, camPos.y-142);
                elementsHazards[45]->setPosition(camPos.x+176, camPos.y-142);
                break;
        }
    }
}

static void UpdateAssetsLiquids()
{
    int camMouseX = 0;
    int camMouseY = 0;

    char camX = 0;
    char camY = 0;

    bool keySpeed;

    {
        bool focus = mainWindow->hasFocus();

        bool keyLeft = Keyboard::isKeyPressed(static_cast<Keyboard::Key>(keybindings[0])) && focus;
        bool keyRight = Keyboard::isKeyPressed(static_cast<Keyboard::Key>(keybindings[1])) && focus;
        bool keyDown = Keyboard::isKeyPressed(static_cast<Keyboard::Key>(keybindings[2])) && focus;
        bool keyUp = Keyboard::isKeyPressed(static_cast<Keyboard::Key>(keybindings[3])) && focus;

        keySpeed = (Keyboard::isKeyPressed(Keyboard::LShift) || Keyboard::isKeyPressed(Keyboard::RShift)) && focus;

        if (keyLeft && !keyRight)
            camX = -1;
        else if (keyRight && !keyLeft)
            camX = 1;

        if (keyUp && !keyDown)
            camY = -1;
        else if (keyDown && !keyUp)
            camY = 1;
    }

    if (!editorMouseScrolling)
        goto LBL_SKIPMOUSECONTROLB;

    if (toolbarVisible)
    {
        if (mainWindow->hasFocus())
        {
            if (mpos_absolute.x < MOUSEINFLUENCE && mpos_absolute.y < 448)
                camMouseX = -1;
            else if (mpos_absolute.x > 640-MOUSEINFLUENCE && mpos_absolute.y < 448)
                camMouseX = 1;

            if (mpos_absolute.y < MOUSEINFLUENCE)
                camMouseY = -1;
            else if (mpos_absolute.y > 480-MOUSEINFLUENCE && mpos_absolute.x < 572)
                camMouseY = 1;
        }
    }
    else
    {
        if (mainWindow->hasFocus())
        {
            if (mpos_absolute.x < MOUSEINFLUENCE)
                camMouseX = -1;
            else if (mpos_absolute.x > 640-MOUSEINFLUENCE)
                camMouseX = 1;

            if (mpos_absolute.y < MOUSEINFLUENCE)
                camMouseY = -1;
            else if (mpos_absolute.y > 480-MOUSEINFLUENCE)
                camMouseY = 1;
        }
    }

    if (camX == 0)
    {
        if (camMouseX == -1)
            camX = -1;
        else if (camMouseX == 1)
            camX = 1;
    }

    if (camY == 0)
    {
        if (camMouseY == -1)
            camY = -1;
        else if (camMouseY == 1)
            camY = 1;
    }

    LBL_SKIPMOUSECONTROLB :

    switch (camX)
    {
        case -1:
            if (keySpeed)
                cameraSpeed.x = -CAMSPEED * 2.0;
            else
            {
                if (cameraSpeed.x > - (CAMSPEED - CAMACCEL))
                    cameraSpeed.x -= CAMACCEL;
                else
                    cameraSpeed.x = -CAMSPEED;
            }
            break;
        case 0:
            if (cameraSpeed.x < -CAMDECEL)
                cameraSpeed.x += CAMDECEL;
            else if (cameraSpeed.x > CAMDECEL)
                cameraSpeed.x -= CAMDECEL;
            else if (cameraSpeed.x != 0)
                cameraSpeed.x = 0;
            break;
        case 1:
            if (keySpeed)
                cameraSpeed.x = CAMSPEED * 2.0;
            else
            {
                if (cameraSpeed.x < CAMSPEED - CAMACCEL)
                    cameraSpeed.x += CAMACCEL;
                else
                    cameraSpeed.x = CAMSPEED;
            }
            break;
    }

    switch (camY)
    {
        case -1:
            if (keySpeed)
                cameraSpeed.y = -CAMSPEED * 2.0;
            else
            {
                if (cameraSpeed.y > - (CAMSPEED - CAMACCEL))
                    cameraSpeed.y -= CAMACCEL;
                else
                    cameraSpeed.y = -CAMSPEED;
            }
            break;
        case 0:
            if (cameraSpeed.y < -CAMDECEL)
                cameraSpeed.y += CAMDECEL;
            else if (cameraSpeed.y > CAMDECEL)
                cameraSpeed.y -= CAMDECEL;
            else if (cameraSpeed.y != 0)
                cameraSpeed.y = 0;
            break;
        case 1:
            if (keySpeed)
                cameraSpeed.y = CAMSPEED * 2.0;
            else
            {
                if (cameraSpeed.y < CAMSPEED - CAMACCEL)
                    cameraSpeed.y += CAMACCEL;
                else
                    cameraSpeed.y = CAMSPEED;
            }
            break;
    }

    camPos.x += roundf(cameraSpeed.x);
    camPos.y += roundf(cameraSpeed.y);

    camera->setCenter(camPos.x, camPos.y);

    if (sectionb)
    {
        if (camPos.x < 320)
        {
            camPos.x = 320;

            if (cameraSpeed.x < 0)
                cameraSpeed.x = 0;

            camera->setCenter(roundf(camPos.x), roundf(camPos.y));
        }
        else if (camPos.x > (roomScaleb.x*640) - 320)
        {
            camPos.x = (roomScaleb.x*640) - 320;

            if (cameraSpeed.x > 0)
                cameraSpeed.x = 0;

            camera->setCenter(roundf(camPos.x), roundf(camPos.y));
        }

        if (camPos.y < 240)
        {
            camPos.y = 240;

            if (cameraSpeed.y < 0)
                cameraSpeed.y = 0;

            camera->setCenter(roundf(camPos.x), roundf(camPos.y));
        }
        else if (camPos.y > (roomScaleb.y*480) - 240)
        {
            camPos.y = (roomScaleb.y*480) - 240;

            if (cameraSpeed.y > 0)
                cameraSpeed.y = 0;

            camera->setCenter(roundf(camPos.x), roundf(camPos.y));
        }
    }
    else
    {
        if (camPos.x < 320)
        {
            camPos.x = 320;

            if (cameraSpeed.x < 0)
                cameraSpeed.x = 0;

            camera->setCenter(roundf(camPos.x), roundf(camPos.y));
        }
        else if (camPos.x > (roomScale.x*640) - 320)
        {
            camPos.x = (roomScale.x*640) - 320;

            if (cameraSpeed.x > 0)
                cameraSpeed.x = 0;

            camera->setCenter(roundf(camPos.x), roundf(camPos.y));
        }

        if (camPos.y < 240)
        {
            camPos.y = 240;

            if (cameraSpeed.y < 0)
                cameraSpeed.y = 0;

            camera->setCenter(roundf(camPos.x), roundf(camPos.y));
        }
        else if (camPos.y > (roomScale.y*480) - 240)
        {
            camPos.y = (roomScale.y*480) - 240;

            if (cameraSpeed.y > 0)
                cameraSpeed.y = 0;

            camera->setCenter(camPos.x, camPos.y);
        }
    }

    fadeRect->setPosition(camPos.x-320, camPos.y-240);

    grid->setPosition((roundf(camPos.x / 32) * 32) - 352, (roundf(camPos.y / 32) * 32) - 256);

    if (helpText->getString() != "")
    {
        FloatRect textBounds(helpText->getGlobalBounds());
        Uint8 textColor = helpText->getFillColor().r;

        helpText->setOrigin(textBounds.width / 2, 0);
        helpText->setPosition(mpos_relative.x, mpos_relative.y-22);

        textBounds = helpText->getGlobalBounds();

        if (selectionWillFadeOut)
        {
            if (textColor > 8)
            {
                textColor -= 8;
                helpText->setFillColor(Color(textColor, textColor, 0, 255));
            }
            else
            {
                helpText->setFillColor(Color(0, 0, 0, 255));
                selectionWillFadeOut = false;
            }
        }
        else
        {
            if (textColor < 247)
            {
                textColor += 8;
                helpText->setFillColor(Color(textColor, textColor, 0, 255));
            }
            else
            {
                helpText->setFillColor(Color(255, 255, 0, 255));
                selectionWillFadeOut = true;
            }
        }

        if (textBounds.left + textBounds.width > camPos.x+320)
            helpText->setPosition(mpos_relative.x, mpos_relative.y-22);
    }

    mainTexture.setView(*camera);

    mpos_relative = mainTexture.mapPixelToCoords(mpos_absolute);
}

static void UpdateAssetsTileset()
{
    returnButton->update();

    Uint8 selectionAlpha = tileSelection->getFillColor().a;

    if (mpos_absolute.x > 32 && mpos_absolute.x < 608 && mpos_absolute.y > 16 && mpos_absolute.y < 400)
    {
        tileSelection->setPosition((roundf(mpos_absolute.x / 32) * 32) + (camPos.x-320), (roundf((mpos_absolute.y + 16) / 32) * 32) + (camPos.y-256));

        if (selectionWillFadeOut)
        {
            if (selectionAlpha > 32)
            {
                selectionAlpha -= 32;
                tileSelection->setFillColor(Color(255, 255, 0, selectionAlpha));
            }
            else
            {
                tileSelection->setFillColor(Color(255, 255, 0, 0));
                selectionWillFadeOut = false;
            }
        }
        else
        {
            if (selectionAlpha < 223)
            {
                selectionAlpha += 32;
                tileSelection->setFillColor(Color(255, 255, 0, selectionAlpha));
            }
            else
            {
                tileSelection->setFillColor(Color(255, 255, 0, 255));
                selectionWillFadeOut = true;
            }
        }
    }
    else
        tileSelection->setPosition(-64, -64);

    if (mousePressed == 1)
    {
        if (mpos_absolute.x > 32 && mpos_absolute.x < 608 && mpos_absolute.y > 16 && mpos_absolute.y < 400)
        {
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);

            tileNumbX = (mpos_absolute.x / 32) - 1;
            tileNumbY = (mpos_absolute.y - 16) / 32;

            #ifdef DEBUGMODE
            cout << "Tile X : " << tileNumbX << endl << "Tile Y : " << tileNumbY << endl;
            #endif

            itemHandled->setTexture(*mainTileset);
            itemHandled->setTextureRect(IntRect(tileNumbX * 32, tileNumbY * 32, 32, 32));
            itemHandled->setColor(Color(255, 255, 255, 128));
            itemHandled->setRotation(0);
            itemHandled->setOrigin(0, 0);

            blockMouse = true;

            currentSelection = TILE;
            currentMenu = EDITION;
        }
    }
}

static void UpdateAssetsGradient()
{
    if (sectionb)
    {
        gradientPreview[0].color = topColorb;
        gradientPreview[1].color = topColorb;
        gradientPreview[2].color = bottomColorb;
        gradientPreview[3].color = bottomColorb;

        gradientColor[0]->setFillColor(topColorb);
        gradientColor[1]->setFillColor(bottomColorb);
    }
    else
    {
        gradientPreview[0].color = topColor;
        gradientPreview[1].color = topColor;
        gradientPreview[2].color = bottomColor;
        gradientPreview[3].color = bottomColor;

        gradientColor[0]->setFillColor(topColor);
        gradientColor[1]->setFillColor(bottomColor);
    }

    if (FloatRect(camPos.x-290, camPos.y-80, 161, 80).contains(mpos_relative))
    {
        tileSelection->setPosition(camPos.x-289, camPos.y-79);

        if (mousePressed == 1)
        {
            CHOOSECOLOR colorChooser;
            COLORREF colorRef;

            if (sectionb)
                colorRef = RGB(topColorb.r, topColorb.g, topColorb.b);
            else
                colorRef = RGB(topColor.r, topColor.g, topColor.b);

            ZeroMemory(&colorChooser, sizeof(CHOOSECOLOR));

            colorChooser.lStructSize = sizeof(CHOOSECOLOR);
            colorChooser.hwndOwner = mainWindow->getSystemHandle();
            colorChooser.rgbResult = colorRef;
            colorChooser.lpCustColors = colorArray;
            colorChooser.Flags = CC_ANYCOLOR | CC_RGBINIT | CC_SHOWHELP;

            if (ChooseColor(&colorChooser))
            {
                if (sectionb)
                    topColorb = Color(GetRValue(colorChooser.rgbResult), GetGValue(colorChooser.rgbResult), GetBValue(colorChooser.rgbResult));
                else
                    topColor = Color(GetRValue(colorChooser.rgbResult), GetGValue(colorChooser.rgbResult), GetBValue(colorChooser.rgbResult));
            }

            ofstream colorPrefs;

            colorPrefs.open("Data/Save/Colors.dat", ios::binary);

            if (colorPrefs.good())
            {
                if(!colorPrefs.write(reinterpret_cast<char*>(&colorArray), sizeof(COLORREF) * 16))
                    MessageBox(NULL, "Error ! Failed to save the Preferences Colors !", "Failed to save colors !", MB_TASKMODAL | MB_OK | MB_ICONERROR);

                colorPrefs.close();
            }
        }
    }
    else if (FloatRect(camPos.x-290, camPos.y+24, 161, 80).contains(mpos_relative))
    {
        tileSelection->setPosition(camPos.x-289, camPos.y+25);

        if (mousePressed == 1)
        {
            CHOOSECOLOR colorChooser;
            COLORREF colorRef;

            if (sectionb)
                colorRef = RGB(bottomColorb.r, bottomColorb.g, bottomColorb.b);
            else
                colorRef = RGB(bottomColor.r, bottomColor.g, bottomColor.b);

            ZeroMemory(&colorChooser, sizeof(CHOOSECOLOR));

            colorChooser.lStructSize = sizeof(CHOOSECOLOR);
            colorChooser.hwndOwner = mainWindow->getSystemHandle();
            colorChooser.rgbResult = colorRef;
            colorChooser.lpCustColors = colorArray;
            colorChooser.Flags = CC_ANYCOLOR | CC_RGBINIT | CC_SHOWHELP;

            if (ChooseColor(&colorChooser))
            {
                if (sectionb)
                    bottomColorb = Color(GetRValue(colorChooser.rgbResult), GetGValue(colorChooser.rgbResult), GetBValue(colorChooser.rgbResult));
                else
                    bottomColor = Color(GetRValue(colorChooser.rgbResult), GetGValue(colorChooser.rgbResult), GetBValue(colorChooser.rgbResult));
            }

            ofstream colorPrefs;

            colorPrefs.open("Data/Save/Colors.dat", ios::binary);

            if (colorPrefs.good())
            {
                if(!colorPrefs.write(reinterpret_cast<char*>(&colorArray), sizeof(COLORREF) * 16))
                    MessageBox(NULL, "Error ! Failed to save the Preferences Colors !", "Failed to save colors !", MB_TASKMODAL | MB_OK | MB_ICONERROR);

                colorPrefs.close();
            }
        }
    }
    else
        tileSelection->setPosition(-800, -400);

    returnButton->update();
}

static void Selection_Tiles()
{
    if (mousePressed > 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496) && !blockMouse)
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                {
                    switch (layerNumb)
                    {
                        case 0 : Placements_Tiles(layer1TileMatrixb, listTileb1); break;
                        case 1 : Placements_Tiles(layer2TileMatrixb, listTileb2); break;
                        case 2 : Placements_Tiles(layer3TileMatrixb, listTileb3); break;
                    }
                }
                else
                {
                    switch (layerNumb)
                    {
                        case 0 : Placements_Tiles(layer1TileMatrix, listTile1); break;
                        case 1 : Placements_Tiles(layer2TileMatrix, listTile2); break;
                        case 2 : Placements_Tiles(layer3TileMatrix, listTile3); break;
                    }
                }
            }
        }
        else
        {
            if (sectionb)
            {
                switch (layerNumb)
                {
                    case 0 : Placements_Tiles(layer1TileMatrixb, listTileb1); break;
                    case 1 : Placements_Tiles(layer2TileMatrixb, listTileb2); break;
                    case 2 : Placements_Tiles(layer3TileMatrixb, listTileb3); break;
                }
            }
            else
            {
                switch (layerNumb)
                {
                    case 0 : Placements_Tiles(layer1TileMatrix, listTile1); break;
                    case 1 : Placements_Tiles(layer2TileMatrix, listTile2); break;
                    case 2 : Placements_Tiles(layer3TileMatrix, listTile3); break;
                }
            }
        }
    }
    else if (rightPressed > 0 && mousePressed == 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496))
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                {
                    switch (layerNumb)
                    {
                        case 0 : Erasment_Tiles(layer1TileMatrixb, listTileb1); break;
                        case 1 : Erasment_Tiles(layer2TileMatrixb, listTileb2); break;
                        case 2 : Erasment_Tiles(layer3TileMatrixb, listTileb3); break;
                    }
                }
                else
                {
                    switch (layerNumb)
                    {
                        case 0 : Erasment_Tiles(layer1TileMatrix, listTile1); break;
                        case 1 : Erasment_Tiles(layer2TileMatrix, listTile2); break;
                        case 2 : Erasment_Tiles(layer3TileMatrix, listTile3); break;
                    }
                }
            }
        }
        else
        {
            if (sectionb)
            {
                switch (layerNumb)
                {
                    case 0 : Erasment_Tiles(layer1TileMatrixb, listTileb1); break;
                    case 1 : Erasment_Tiles(layer2TileMatrixb, listTileb2); break;
                    case 2 : Erasment_Tiles(layer3TileMatrixb, listTileb3); break;
                }
            }
            else
            {
                switch (layerNumb)
                {
                    case 0 : Erasment_Tiles(layer1TileMatrix, listTile1); break;
                    case 1 : Erasment_Tiles(layer2TileMatrix, listTile2); break;
                    case 2 : Erasment_Tiles(layer3TileMatrix, listTile3); break;
                }
            }
        }
    }
}

static void Selection_Essential()
{
    if (mousePressed == 1 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496) && !blockMouse)
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                {
                    if (listEntitiesb.size() == 800)
                        MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Essentials(entityMatrixb, layer2TileMatrixb, listEntitiesb);
                }
                else
                {
                    if (listEntities.size() == 800)
                        MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Essentials(entityMatrix, layer2TileMatrix, listEntities);
                }
            }
        }
        else
        {
            if (sectionb)
            {
                if (listEntitiesb.size() == 800)
                    MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                else
                    Placements_Essentials(entityMatrixb, layer2TileMatrixb, listEntitiesb);
            }
            else
            {
                if (listEntities.size() == 800)
                    MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                else
                    Placements_Essentials(entityMatrix, layer2TileMatrix, listEntities);
            }
        }
    }
    else if (rightPressed > 0 && mousePressed == 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496))
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                    Erasment_Entities(entityMatrixb, layer2TileMatrixb);
                else
                    Erasment_Entities(entityMatrix, layer2TileMatrix);
            }
        }
        else
        {
            if (sectionb)
                Erasment_Entities(entityMatrixb, layer2TileMatrixb);
            else
                Erasment_Entities(entityMatrix, layer2TileMatrix);
        }
    }
}

static void Selection_Platforms()
{
    if (mousePressed == 1 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496) && !blockMouse)
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                {
                    if (listEntitiesb.size() == 800)
                        MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Platforms(entityMatrixb, layer2TileMatrixb, listEntitiesb);
                }
                else
                {
                    if (listEntities.size() == 800)
                        MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Platforms(entityMatrix, layer2TileMatrix, listEntities);
                }
            }
        }
        else
        {
            if (sectionb)
            {
                if (listEntitiesb.size() == 800)
                    MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                else
                    Placements_Platforms(entityMatrixb, layer2TileMatrixb, listEntitiesb);
            }
            else
            {
                if (listEntities.size() == 800)
                    MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                else
                    Placements_Platforms(entityMatrix, layer2TileMatrix, listEntities);
            }
        }
    }
    else if (rightPressed > 0 && mousePressed == 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496))
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                    Erasment_Entities(entityMatrixb, layer2TileMatrixb);
                else
                    Erasment_Entities(entityMatrix, layer2TileMatrix);
            }
        }
        else
        {
            if (sectionb)
                Erasment_Entities(entityMatrixb, layer2TileMatrixb);
            else
                Erasment_Entities(entityMatrix, layer2TileMatrix);
        }
    }
}

static void Selection_Bonus()
{
    if (mousePressed > 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496) && !blockMouse)
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                {
                    if (listBonusb.size() == 400)
                        MessageBox(NULL, "You cannot place more than 400 Bonuses!", "Bonus Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Bonus(entityMatrixb, layer2TileMatrixb, listBonusb);
                }
                else
                {
                    if (listBonus.size() == 400)
                        MessageBox(NULL, "You cannot place more than 400 Bonuses!", "Bonus Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Bonus(entityMatrix, layer2TileMatrix, listBonus);
                }
            }
        }
        else
        {
            if (sectionb)
            {
                if (listBonusb.size() == 400)
                    MessageBox(NULL, "You cannot place more than 400 Bonuses!", "Bonus Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                else
                    Placements_Bonus(entityMatrixb, layer2TileMatrixb, listBonusb);
            }
            else
            {
                if (listBonus.size() == 400)
                    MessageBox(NULL, "You cannot place more than 400 Bonuses!", "Bonus Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                else
                    Placements_Bonus(entityMatrix, layer2TileMatrix, listBonus);
            }
        }
    }
    else if (rightPressed > 0 && mousePressed == 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496))
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                    Erasment_Entities(entityMatrixb, layer2TileMatrixb);
                else
                    Erasment_Entities(entityMatrix, layer2TileMatrix);
            }
        }
        else
        {
            if (sectionb)
                Erasment_Entities(entityMatrixb, layer2TileMatrixb);
            else
                Erasment_Entities(entityMatrix, layer2TileMatrix);
        }
    }
}

static void Selection_Pipes()
{
    if (mousePressed > 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496) && !blockMouse)
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                {
                    switch (layerNumb)
                    {
                        case 0 : Placements_Pipes(layer1TileMatrixb, listTileb1); break;
                        case 1 : Placements_Pipes(layer2TileMatrixb, listTileb2); break;
                        case 2 : Placements_Pipes(layer3TileMatrixb, listTileb3); break;
                    }
                }
                else
                {
                    switch (layerNumb)
                    {
                        case 0 : Placements_Pipes(layer1TileMatrix, listTile1); break;
                        case 1 : Placements_Pipes(layer2TileMatrix, listTile2); break;
                        case 2 : Placements_Pipes(layer3TileMatrix, listTile3); break;
                    }
                }
            }
        }
        else
        {
            if (sectionb)
            {
                switch (layerNumb)
                {
                    case 0 : Placements_Pipes(layer1TileMatrixb, listTileb1); break;
                    case 1 : Placements_Pipes(layer2TileMatrixb, listTileb2); break;
                    case 2 : Placements_Pipes(layer3TileMatrixb, listTileb3); break;
                }
            }
            else
            {
                switch (layerNumb)
                {
                    case 0 : Placements_Pipes(layer1TileMatrix, listTile1); break;
                    case 1 : Placements_Pipes(layer2TileMatrix, listTile2); break;
                    case 2 : Placements_Pipes(layer3TileMatrix, listTile3); break;
                }
            }
        }
    }
    else if (rightPressed > 0 && mousePressed == 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496))
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                {
                    switch (layerNumb)
                    {
                        case 0 : Erasment_Pipes(layer1TileMatrixb, entityMatrixb, listTileb1); break;
                        case 1 : Erasment_Pipes(layer2TileMatrixb, entityMatrixb, listTileb2); break;
                        case 2 : Erasment_Pipes(layer3TileMatrixb, entityMatrixb, listTileb3); break;
                    }
                }
                else
                {
                    switch (layerNumb)
                    {
                        case 0 : Erasment_Pipes(layer1TileMatrix, entityMatrix, listTile1); break;
                        case 1 : Erasment_Pipes(layer2TileMatrix, entityMatrix, listTile2); break;
                        case 2 : Erasment_Pipes(layer3TileMatrix, entityMatrix, listTile3); break;
                    }
                }
            }
        }
        else
        {
            if (sectionb)
            {
                switch (layerNumb)
                {
                    case 0 : Erasment_Pipes(layer1TileMatrixb, entityMatrixb, listTileb1); break;
                    case 1 : Erasment_Pipes(layer2TileMatrixb, entityMatrixb, listTileb2); break;
                    case 2 : Erasment_Pipes(layer3TileMatrixb, entityMatrixb, listTileb3); break;
                }
            }
            else
            {
                switch (layerNumb)
                {
                    case 0 : Erasment_Pipes(layer1TileMatrix, entityMatrix, listTile1); break;
                    case 1 : Erasment_Pipes(layer2TileMatrix, entityMatrix, listTile2); break;
                    case 2 : Erasment_Pipes(layer3TileMatrix, entityMatrix, listTile3); break;
                }
            }
        }
    }
}

static void Selection_Sceneries()
{
    if (mousePressed == 1 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496) && !blockMouse)
    {
        bool placement(true);

        if (placement)
        {
            if (toolbarVisible)
            {
                if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
                {
                    if (sectionb)
                    {
                        if (listSceneriesb.size() == 400)
                            MessageBox(NULL, "You cannot place more than 400 Sceneries !", "Scenery Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                        else
                            Placements_Sceneries(entityMatrixb, listSceneriesb);
                    }
                    else
                    {
                        if (listSceneries.size() == 400)
                            MessageBox(NULL, "You cannot place more than 400 Sceneries !", "Scenery Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                        else
                            Placements_Sceneries(entityMatrix, listSceneries);
                    }
                }
            }
            else
            {
                if (sectionb)
                {
                    if (listSceneriesb.size() == 400)
                        MessageBox(NULL, "You cannot place more than 400 Sceneries !", "Scenery Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Sceneries(entityMatrixb, listSceneriesb);
                }
                else
                {
                    if (listSceneries.size() == 400)
                        MessageBox(NULL, "You cannot place more than 400 Sceneries !", "Scenery Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Sceneries(entityMatrix, listSceneries);
                }
            }
        }
    }
    else if (rightPressed > 0 && mousePressed == 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496))
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                    Erasment_Entities(entityMatrixb, layer2TileMatrixb);
                else
                    Erasment_Entities(entityMatrix, layer2TileMatrix);
            }
        }
        else
        {
            if (sectionb)
                Erasment_Entities(entityMatrixb, layer2TileMatrixb);
            else
                Erasment_Entities(entityMatrix, layer2TileMatrix);
        }
    }
}

static void Selection_Enemies()
{
    if (mousePressed > 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496))
    {
        bool placement(true);

        if ((elementSelected < 161 || elementSelected > 163) && elementSelected < 225)
        {
            if (mousePressed > 1)
                placement = false;
        }

        if (placement)
        {
            if (toolbarVisible)
            {
                if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
                {
                    if (sectionb)
                    {
                        if (listEntitiesb.size() == 800)
                            MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                        else
                            Placements_Enemies(entityMatrixb, layer2TileMatrixb, listEntitiesb);
                    }
                    else
                    {
                        if (listEntities.size() == 800)
                            MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                        else
                            Placements_Enemies(entityMatrix, layer2TileMatrix, listEntities);
                    }
                }
            }
            else
            {
                if (sectionb)
                {
                    if (listEntitiesb.size() == 800)
                        MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Enemies(entityMatrixb, layer2TileMatrixb, listEntitiesb);
                }
                else
                {
                    if (listEntities.size() == 800)
                        MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Enemies(entityMatrix, layer2TileMatrix, listEntities);
                }
            }
        }
    }
    else if (rightPressed > 0 && mousePressed == 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496))
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                    Erasment_Entities(entityMatrixb, layer2TileMatrixb);
                else
                    Erasment_Entities(entityMatrix, layer2TileMatrix);
            }
        }
        else
        {
            if (sectionb)
                Erasment_Entities(entityMatrixb, layer2TileMatrixb);
            else
                Erasment_Entities(entityMatrix, layer2TileMatrix);
        }
    }
}

static void Selection_Hazards()
{
    if (mousePressed > 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496) && !blockMouse)
    {
        bool placement(true);

        if ((elementSelected >= 172 && elementSelected <= 179) || elementSelected >= 202)
        {
            if (mousePressed > 1)
                placement = false;
        }

        if (placement)
        {
            if (toolbarVisible)
            {
                if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
                {
                    if (sectionb)
                    {
                        if (listEntitiesb.size() == 800)
                            MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                        else
                            Placements_Hazards(entityMatrixb, layer2TileMatrixb, listEntitiesb);
                    }
                    else
                    {
                        if (listEntities.size() == 800)
                            MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                        else
                            Placements_Hazards(entityMatrix, layer2TileMatrix, listEntities);
                    }
                }
            }
            else
            {
                if (sectionb)
                {
                    if (listEntitiesb.size() == 800)
                        MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Hazards(entityMatrixb, layer2TileMatrixb, listEntitiesb);
                }
                else
                {
                    if (listEntities.size() == 800)
                        MessageBox(NULL, "You cannot place more than 800 Entities !", "Entity Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                    else
                        Placements_Hazards(entityMatrix, layer2TileMatrix, listEntities);
                }
            }
        }
    }
    else if (rightPressed > 0 && mousePressed == 0 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496))
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (sectionb)
                    Erasment_Entities(entityMatrixb, layer2TileMatrixb);
                else
                    Erasment_Entities(entityMatrix, layer2TileMatrix);
            }
        }
        else
        {
            if (sectionb)
                Erasment_Entities(entityMatrixb, layer2TileMatrixb);
            else
                Erasment_Entities(entityMatrix, layer2TileMatrix);
        }
    }
}

static void Selection_Warps()
{
    if (mousePressed == 1 && (mpos_absolute.x > -16 && mpos_absolute.x < 656 && mpos_absolute.y > -16 && mpos_absolute.y < 496) && !blockMouse)
    {
        if (toolbarVisible)
        {
            if (!(mpos_absolute.y < 150 || (mpos_absolute.x < 133 && mpos_absolute.y > 448) || (mpos_absolute.x > 459 && mpos_absolute.y > 448)))
            {
                if (listWarps.size() == 52)
                    MessageBox(NULL, "You cannot place more than 52 Warps !", "Warps Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
                else
                    Placements_Warps(listWarps);
            }
        }
        else
        {
            if (listWarps.size() == 52)
                MessageBox(NULL, "You cannot place more than 52 Warps !", "Warps Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
            else
                Placements_Warps(listWarps);
        }
    }
}

static void Placements_Tiles(Matrix* currentMatrix, list<Tile>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
    {
        currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, tileNumbX, tileNumbY));

        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);
    }
}

static void Placements_Essentials(Matrix* currentMatrix, Matrix* tileMatrix, list<Entity*>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    switch (elementSelected)
    {
        case 0 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y/32) - 1) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y/32) - 1) != 2)
            {
                if (startArea == 1)
                {
                    for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
                    {
                        if ((*it)->getType() == 0)
                        {
                            listEntities.erase(it);
                            break;
                        }
                    }

                    entityMatrix->setValue(startPosition.x / 32, startPosition.y / 32, 0);

                    layer2TileMatrix->setValue(startPosition.x / 32, startPosition.y / 32, 0);
                    layer2TileMatrix->setValue(startPosition.x / 32, (startPosition.y/32) - 1, 0);
                }
                else if (startArea == 2)
                {
                    for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
                    {
                        if ((*it)->getType() == 0)
                        {
                            listEntitiesb.erase(it);

                            break;
                        }
                    }

                    entityMatrixb->setValue(startPosition.x / 32, startPosition.y / 32, 0);

                    layer2TileMatrixb->setValue(startPosition.x / 32, startPosition.y / 32, 0);
                    layer2TileMatrixb->setValue(startPosition.x / 32, (startPosition.y/32) - 1, 0);
                }

                if (sectionb)
                    startArea = 2;
                else
                    startArea = 1;

                startPosition = Vector2f(cursorPos.x, cursorPos.y);

                currentList.emplace_back(new Entity_MultiText(marioTxt[1], IntRect(48, 8, 31, 56), cursorPos.x, cursorPos.y, 0, 24, 0));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 1 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y/32) - 1) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y/32) - 1) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[7], IntRect(107, 0, 107, 111), cursorPos.x, cursorPos.y, 28, 79, 1));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 2 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                vector<list<Entity*>::iterator> entitiesToErase;

                if (!listEntities.empty())
                {
                    for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
                    {
                        if ((*it)->getType() == 166)
                        {
                            Vector2f bowserPos = (*it)->getOriginalPosition();

                            entityMatrix->setValue(bowserPos.x / 32, bowserPos.y / 32, 0);

                            entitiesToErase.emplace_back(it);
                        }
                    }
                }

                for (vector<list<Entity*>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
                {
                    delete **it;

                    listEntities.erase(*it);
                }

                entitiesToErase.clear();

                if (!listEntitiesb.empty())
                {
                    for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
                    {
                        if ((*it)->getType() == 166)
                        {
                            Vector2f bowserPos = (*it)->getOriginalPosition();

                            entityMatrixb->setValue(bowserPos.x / 32, bowserPos.y / 32, 0);

                            entitiesToErase.emplace_back(it);
                        }
                    }
                }

                for (vector<list<Entity*>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
                {
                    delete **it;

                    listEntitiesb.erase(*it);
                }

                currentList.emplace_back(new LevelEnd_Entity(marksTxt[8], marksTxt[9], editorMoveable, cursorPos.x, cursorPos.y));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
    }
}

static void Placements_Platforms(Matrix* currentMatrix, Matrix* tileMatrix, list<Entity*>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    switch (elementSelected)
    {
        case 3 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), cursorPos.x, cursorPos.y, 32, 0, 32, 3, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 4 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), cursorPos.x, cursorPos.y, 32, 0, 32, 4, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 5 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), cursorPos.x, cursorPos.y, 32, 0, 32, 5, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 6 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), cursorPos.x, cursorPos.y, 32, 0, 32, 6, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 7 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new FallPlatform_Entity(marksTxt[0], editorTxt[0], cursorPos.x, cursorPos.y, 32, 0, 32, 7, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 8 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), cursorPos.x, cursorPos.y, 0, 0, 0, 8, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 9 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), cursorPos.x, cursorPos.y, 0, 0, 0, 9, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 10 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), cursorPos.x, cursorPos.y, 0, 0, 0, 10, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 11 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), cursorPos.x, cursorPos.y, 0, 0, 0, 11, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 12 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new FallPlatform_Entity(marksTxt[1], editorTxt[0], cursorPos.x, cursorPos.y, 0, 0, 0, 12, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 13 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), cursorPos.x, cursorPos.y, 45, 0, 45, 13, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 14 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), cursorPos.x, cursorPos.y, 45, 0, 45, 14, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 15 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), cursorPos.x, cursorPos.y, 45, 0, 45, 15, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 16 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), cursorPos.x, cursorPos.y, 45, 0, 45, 16, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 17 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new FallPlatform_Entity(marksTxt[2], editorTxt[0], cursorPos.x, cursorPos.y, 45, 0, 45, 17, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 18 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), cursorPos.x, cursorPos.y, 43, 0, 43, 18, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 19 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), cursorPos.x, cursorPos.y, 43, 0, 43, 19, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 20 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), cursorPos.x, cursorPos.y, 43, 0, 43, 20, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 21 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), cursorPos.x, cursorPos.y, 43, 0, 43, 21, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 22 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new FallPlatform_Entity(marksTxt[3], editorTxt[0], cursorPos.x, cursorPos.y, 43, 0, 43, 22, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 23 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y/32) - 1) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[4], IntRect(0, 0, 32, 64), cursorPos.x, cursorPos.y, 0, 32, 23));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 24 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y/32) - 1) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[5], IntRect(0, 0, 32, 64), cursorPos.x, cursorPos.y, 0, 32, 24));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 25 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y/32) - 1) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[6], IntRect(0, 0, 32, 64), cursorPos.x, cursorPos.y, 0, 32, 25));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
    }
}

static void Placements_Bonus(Matrix* currentMatrix, Matrix* tileMatrix, list<Entity*>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    switch (elementSelected)
    {
        case 26 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(32, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 26));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 27 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(64, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 27));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 28 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(96, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 28));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 29 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(128, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 29));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 30 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(160, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 30));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 31 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(192, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 31));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 32 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(32, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 32, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 33 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(64, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 33, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 34 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(96, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 34, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 35 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(128, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 35, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 36 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(160, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 36, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 37 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(192, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 37, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 38 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(224, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 38, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 39 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(256, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 39, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 40 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(288, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 40, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 41 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(320, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 41, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 42 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(352, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 42, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 43 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(384, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 43, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 44 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity(itemsTxt[3], cursorPos.x, cursorPos.y, 0, 0, 44));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 45 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(itemsTxt[4], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 45));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 46 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(itemsTxt[5], IntRect(0, 0, 27, 34), cursorPos.x, cursorPos.y, -3, 2, 46));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 47 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(itemsTxt[6], IntRect(0, 0, 30, 31), cursorPos.x, cursorPos.y, -1, -1, 47));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 48 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(itemsTxt[7], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 48));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 49 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity(itemsTxt[8], cursorPos.x, cursorPos.y, 0, 0, 49));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 50 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 50));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 51 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 51, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 52 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(itemsTxt[2], IntRect(0, 0, 19, 28), cursorPos.x, cursorPos.y, -7, -2, 52));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 53 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(itemsTxt[1], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 53));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 54 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(416, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 54));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 55 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(448, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 55));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 213 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 213));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 214 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 214, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 215 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 215));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 216 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(32, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 216));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 217 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(32, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 217, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 218 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(32, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 218));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 219 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(64, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 219));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 220 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(64, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 220, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 221 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(64, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 221));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 222 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(96, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 222));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 223 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(96, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 223, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 224 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(96, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 224));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
    }
}

static void Placements_Pipes(Matrix* tileMatrix, list<Tile>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    switch (elementSelected)
    {
        case 56 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 18, 0));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 19, 0));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 57 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 18, 1));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 19, 1));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 58 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 18, 2));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 19, 2));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 59 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 18, 3));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 18, 4));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 60 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 19, 3));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 19, 4));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 61 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 20, 3));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 20, 4));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 62 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 20, 0));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 21, 0));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 63 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 20, 1));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 21, 1));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 64 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 20, 2));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 21, 2));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 65 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 21, 3));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 21, 4));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 66 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 22, 3));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 22, 4));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 67 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 23, 3));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 23, 4));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 68 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 22, 0));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 23, 0));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 69 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 22, 1));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 23, 1));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 70 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 22, 2));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 23, 2));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 71 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 24, 3));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 24, 4));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 72 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 25, 3));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 25, 4));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 73 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 26, 3));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 26, 4));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 74 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 24, 0));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 25, 0));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 75 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 24, 1));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 25, 1));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 76 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 24, 2));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 25, 2));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 77 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 18, 5));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 18, 6));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 78 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 19, 5));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 19, 6));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 79 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 20, 5));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 20, 6));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 80 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 26, 0));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 27, 0));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 81 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 26, 1));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 27, 1));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 82 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 26, 2));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 27, 2));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 83 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 21, 5));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 21, 6));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 84 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 22, 5));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 22, 6));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 85 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 23, 5));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 23, 6));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 86 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 28, 0));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 29, 0));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 87 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 28, 1));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 29, 1));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 88 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 28, 2));
                currentList.emplace_back(Tile(cursorPos.x+32, cursorPos.y, 29, 2));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 89 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 24, 5));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 24, 6));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 90 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 25, 5));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 25, 6));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 91 :
            if (tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) == 0)
            {
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y, 26, 5));
                currentList.emplace_back(Tile(cursorPos.x, cursorPos.y+32, 26, 6));

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
    }
}

static void Placements_Sceneries(Matrix* currentMatrix, list<Entity*>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    switch (elementSelected)
    {
        case 92 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GREEN_TREE, cursorPos.x, cursorPos.y, -1, 32, 92));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 93 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GREEN_BIGTREE, cursorPos.x, cursorPos.y, 0, 64, 93));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 94 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(sceneriesTxt[0], IntRect(0, 0, 65, 30), cursorPos.x, cursorPos.y, 16, -2, 94));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 95 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GRAY_TREE, cursorPos.x, cursorPos.y, -1, 32, 95));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 96 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GRAY_BIGTREE, cursorPos.x, cursorPos.y, 0, 64, 96));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 97 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(sceneriesTxt[1], IntRect(0, 0, 65, 30), cursorPos.x, cursorPos.y, 16, -2, 97));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 98 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_YELLOW_TREE, cursorPos.x, cursorPos.y, -1, 32, 98));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 99 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_YELLOW_BIGTREE, cursorPos.x, cursorPos.y, 0, 64, 99));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 100 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(sceneriesTxt[2], IntRect(0, 0, 65, 30), cursorPos.x, cursorPos.y, 16, -2, 100));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 101 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_RED_TREE, cursorPos.x, cursorPos.y, -1, 32, 101));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 102 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_RED_BIGTREE, cursorPos.x, cursorPos.y, 0, 64, 102));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 103 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(sceneriesTxt[3], IntRect(0, 0, 65, 30), cursorPos.x, cursorPos.y, 16, -2, 103));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 104 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_BLUE_TREE, cursorPos.x, cursorPos.y, -1, 32, 104));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 105 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_BLUE_BIGTREE, cursorPos.x, cursorPos.y, 0, 64, 105));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 106 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(sceneriesTxt[4], IntRect(0, 0, 65, 30), cursorPos.x, cursorPos.y, 16, -2, 106));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 107 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_FENCE, cursorPos.x, cursorPos.y, 64, 0, 107));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 108 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_SNOWFENCE, cursorPos.x, cursorPos.y, 64, 0, 108));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 109 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(sceneriesTxt[5], IntRect(0, 0, 63, 48), cursorPos.x, cursorPos.y, 15, 8, 109));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 110 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(sceneriesTxt[6], IntRect(0, 0, 63, 48), cursorPos.x, cursorPos.y, 15, 8, 110));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 111 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity(sceneriesTxt[7], cursorPos.x, cursorPos.y, 47, 128, 111));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 112 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity(sceneriesTxt[8], cursorPos.x, cursorPos.y, 77, 128, 112));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 113 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity(sceneriesTxt[9], cursorPos.x, cursorPos.y, 141, 160, 113));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 229 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(sceneriesTxt[10], IntRect(0, 0, 95, 91), cursorPos.x, cursorPos.y, 31, -5, 229));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 230 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(sceneriesTxt[11], IntRect(0, 0, 54, 64), cursorPos.x, cursorPos.y, 11, 0, 230));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 231 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity(sceneriesTxt[12], cursorPos.x, cursorPos.y, 77, 128, 231));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 232 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity(sceneriesTxt[13], cursorPos.x, cursorPos.y, 141, 160, 232));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
    }
}

static void Placements_Enemies(Matrix* currentMatrix, Matrix* tileMatrix, list<Entity*>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    switch (elementSelected)
    {
        case 114 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[0], IntRect(0, 0, 31, 32), cursorPos.x, cursorPos.y, 0, 0, 114));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 115 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[1], IntRect(0, 0, 31, 32), cursorPos.x, cursorPos.y, 0, 0, 115));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 116 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[2], IntRect(0, 0, 33, 32), cursorPos.x, cursorPos.y, 0, 0, 116));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 117 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[3], IntRect(0, 0, 33, 32), cursorPos.x, cursorPos.y, 0, 0, 117));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 118:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[4], IntRect(0, 0, 31, 32), cursorPos.x, cursorPos.y, 0, 0, 118));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 119:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[5], IntRect(0, 0, 32, 47), cursorPos.x, cursorPos.y, 0, 15, 119));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 120:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[6], IntRect(0, 0, 32, 47), cursorPos.x, cursorPos.y, 0, 15, 120));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 121:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[7], IntRect(0, 0, 32, 47), cursorPos.x, cursorPos.y, 0, 15, 121));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 122:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[8], IntRect(0, 0, 32, 47), cursorPos.x, cursorPos.y, 0, 15, 122));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 123:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[14], IntRect(0, 0, 33, 32), cursorPos.x, cursorPos.y, 0, 0, 123));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 124:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[15], IntRect(0, 0, 33, 32), cursorPos.x, cursorPos.y, 0, 0, 124));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 125:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[16], IntRect(0, 0, 33, 32), cursorPos.x, cursorPos.y, 0, 0, 125));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 126:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[17], IntRect(0, 0, 33, 32), cursorPos.x, cursorPos.y, 0, 0, 126));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 127:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalEnemy_Entity(enemiesTxt[9], editorTxt[1], editorMoveable, cursorPos.x, cursorPos.y, 0, 14, 127));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 128:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalEnemy_Entity(enemiesTxt[10], editorTxt[1], editorMoveable, cursorPos.x, cursorPos.y, 0, 14, 128));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 129:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new HorizontalEnemy_Entity(enemiesTxt[11], editorTxt[1], editorMoveable, cursorPos.x, cursorPos.y, 0, 14, 129));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 130:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalEnemy_Entity(enemiesTxt[9], editorTxt[1], editorMoveable, cursorPos.x, cursorPos.y, 0, 14, 130));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 131:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalEnemy_Entity(enemiesTxt[10], editorTxt[1], editorMoveable, cursorPos.x, cursorPos.y, 0, 14, 131));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 132:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new VerticalEnemy_Entity(enemiesTxt[11], editorTxt[1], editorMoveable, cursorPos.x, cursorPos.y, 0, 14, 132));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 133:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entityj(enemiesTxt[9], editorTxt[0], cursorPos.x, cursorPos.y, 0, 14, 133));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 134:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entityj(enemiesTxt[10], editorTxt[0], cursorPos.x, cursorPos.y, 0, 14, 134));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 135:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entityj(enemiesTxt[11], editorTxt[0], cursorPos.x, cursorPos.y, 0, 14, 135));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 136:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[12], IntRect(0, 0, 32, 47), cursorPos.x, cursorPos.y, 0, 14, 136));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 137:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, -17, 15, 137));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 138:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, 16, 15, 138, 1, 270));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 139:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, 15, 47, 139, 1, 90));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 140:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, 48, 47, 140, 1, 180));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 141:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, -17, 15, 141));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 142:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, 16, 15, 142, 1 , 270));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 143:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, 15, 47, 143, 1, 90));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 144:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, 48, 47, 144, 1, 180));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 145:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, -17, 15, 145));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 146:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, 16, 15, 146, 1, 270));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 147:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, 15, 47, 147, 1, 90));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 148:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), cursorPos.x, cursorPos.y, 48, 47, 148, 1, 180));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 149:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[21], IntRect(0, 0, 31, 32), cursorPos.x, cursorPos.y, 0, 0, 149));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 150:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[22], IntRect(0, 0, 31, 32), cursorPos.x, cursorPos.y, 0, 0, 150));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 151:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[23], IntRect(0, 0, 31, 32), cursorPos.x, cursorPos.y, 0, 0, 151));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 152:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[24], IntRect(0, 0, 31, 37), cursorPos.x, cursorPos.y, 0, 5, 152));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 153:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[25], IntRect(76, 0, 38, 48), cursorPos.x, cursorPos.y, 5, 16, 153));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) - 1, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 154:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[26], IntRect(76, 0, 38, 48), cursorPos.x, cursorPos.y, 5, 16, 154));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) - 1, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 155:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[27], IntRect(66, 0, 33, 48), cursorPos.x, cursorPos.y, 0, 16, 155));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) - 1, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 156:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[28], IntRect(76, 0, 38, 48), cursorPos.x, cursorPos.y, 5, 16, 156));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) - 1, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 157:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[29], IntRect(76, 0, 38, 48), cursorPos.x, cursorPos.y, 5, 16, 157));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) - 1, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 158:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(32, 0, 31, 48), cursorPos.x, cursorPos.y, 0, 16, 158));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 159:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(63, 0, 31, 48), cursorPos.x, cursorPos.y, 0, 16, 159));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 160:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(94, 0, 31, 48), cursorPos.x, cursorPos.y, 0, 16, 160));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 161:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[37], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 161));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 162:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 162));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 163:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(0, 0, 32, 32), cursorPos.x, cursorPos.y, 0, 0, 163, 1, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 164:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) + 1) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[38], IntRect(0, 0, 54, 68), cursorPos.x, cursorPos.y, 10, 4, 164));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 165:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 2 &&
                tileMatrix->getValue(cursorPos.x / 32, (cursorPos.y / 32) - 1) != 2)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[38], IntRect(0, 0, 54, 68), cursorPos.x, cursorPos.y, 44, 36, 165, 1, 180));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 3);
                tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) - 1, 3);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 166:
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                vector<list<Entity*>::iterator> entitiesToErase;

                if (!listEntities.empty())
                {
                    for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
                    {
                        if ((*it)->getType() == 2)
                        {
                            Vector2f endPos = (*it)->getOriginalPosition();

                            entityMatrix->setValue(endPos.x / 32, endPos.y / 32, 0);

                            entitiesToErase.emplace_back(it);
                        }
                    }
                }

                for (vector<list<Entity*>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
                {
                    delete **it;

                    listEntities.erase(*it);
                }

                entitiesToErase.clear();

                if (!listEntitiesb.empty())
                {
                    for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
                    {
                        if ((*it)->getType() == 2)
                        {
                            Vector2f endPos = (*it)->getOriginalPosition();

                            entityMatrixb->setValue(endPos.x / 32, endPos.y / 32, 0);

                            entitiesToErase.emplace_back(it);
                        }
                    }
                }

                for (vector<list<Entity*>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
                {
                    delete **it;

                    listEntitiesb.erase(*it);
                }

                currentList.emplace_back(new Entity_MultiText(enemiesTxt[39], IntRect(0, 0, 64, 72), cursorPos.x, cursorPos.y, 16, 40, 166));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }

            break;
        case 225 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), cursorPos.x, cursorPos.y, -1, -1, 225));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 226 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), cursorPos.x, cursorPos.y, 32, -1, 226, 1, 270));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 227 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), cursorPos.x, cursorPos.y, -1, 31, 227, 1, 90));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 228 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), cursorPos.x, cursorPos.y, 32, 32, 228, 1, 180));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
    }
}

static void Placements_Hazards(Matrix* currentMatrix, Matrix* tileMatrix, list<Entity*>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    switch (elementSelected)
    {
        case 167 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), cursorPos.x, cursorPos.y, 0, 2, 167));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 168 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), cursorPos.x, cursorPos.y, 32, 34, 168, 1, 180));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 169 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), cursorPos.x, cursorPos.y, 32, 2, 169, 1, 270));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 170 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1)
            {
                currentList.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), cursorPos.x, cursorPos.y, 0, 34, 170, 1, 90));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 171 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_LAVABOTTOM, cursorPos.x, cursorPos.y, 0, 0, 171));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 172 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Podoboo_Entity(hazardsTxt[1], editorTxt[1], editorMoveable, cursorPos.x, cursorPos.y, -3, 0));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 173 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new PodobooD_Entity(hazardsTxt[1], editorTxt[1], editorMoveable, cursorPos.x, cursorPos.y, 30, 32));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 174 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new PodobooL_Entity(hazardsTxt[1], editorTxt[1], editorMoveable, cursorPos.x, cursorPos.y, 30, 0));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 175 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new PodobooR_Entity(hazardsTxt[1], editorTxt[1], editorMoveable, cursorPos.x, cursorPos.y, -3, 32));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 176 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Entityj(hazardsTxt[1], editorTxt[0], cursorPos.x, cursorPos.y, -3, 0, 176, 0, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 177 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Entityj(hazardsTxt[1], editorTxt[0], cursorPos.x, cursorPos.y, 30, 32, 177, 180, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 178 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Entityj(hazardsTxt[1], editorTxt[0], cursorPos.x, cursorPos.y, 30, 0, 178, 270, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 179 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Entityj(hazardsTxt[1], editorTxt[0], cursorPos.x, cursorPos.y, -3, 32, 179, 90, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 180 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKETOP, cursorPos.x, cursorPos.y, 0, 0, 180));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 181 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKEBOTTOM, cursorPos.x, cursorPos.y, 0, 0, 181));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 182 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKELEFT, cursorPos.x, cursorPos.y, 0, 0, 182));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 183 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKERIGHT, cursorPos.x, cursorPos.y, 0, 0, 183));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 184 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity(hazardsTxt[2], cursorPos.x, cursorPos.y, 0, -1, 184));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 185 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_Rotation(hazardsTxt[2], cursorPos.x, cursorPos.y, 180, 32, 31, 185));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 186 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_Rotation(hazardsTxt[2], cursorPos.x, cursorPos.y, 270, 32, -1, 186));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 187 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_Rotation(hazardsTxt[2], cursorPos.x, cursorPos.y, 90, 0, 31, 187));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 188 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), cursorPos.x, cursorPos.y, 0, -1, 188));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 189 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), cursorPos.x, cursorPos.y, 32, 31, 189, 1, 180));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 190 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), cursorPos.x, cursorPos.y, 32, -1, 190, 1, 270));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 191 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), cursorPos.x, cursorPos.y, 0, 31, 191, 1, 90));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 192 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLTOP, cursorPos.x, cursorPos.y, 0, 0, 192));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 193 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLTOPB, cursorPos.x, cursorPos.y, 0, 0, 193));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 194 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLMIDV, cursorPos.x, cursorPos.y, 0, 0, 194));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 195 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLBOT, cursorPos.x, cursorPos.y, 0, 0, 195));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 196 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLBOTB, cursorPos.x, cursorPos.y, 0, 0, 196));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 197 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLLEF, cursorPos.x, cursorPos.y, 0, 0, 197));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 198 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLLEFB, cursorPos.x, cursorPos.y, 0, 0, 198));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 199 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLMIDH, cursorPos.x, cursorPos.y, 0, 0, 199));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 200 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLRIG, cursorPos.x, cursorPos.y, 0, 0, 200));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 201 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0)
            {
                currentList.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLRIGB, cursorPos.x, cursorPos.y, 0, 0, 201));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 202 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, NULL, cursorPos.x, cursorPos.y, -1, -1, 202, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 203 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, editorTxt[3], cursorPos.x, cursorPos.y, -1, -1, 203, true));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 204 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, NULL, cursorPos.x, cursorPos.y, -1, -1, 204, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 205 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, editorTxt[3], cursorPos.x, cursorPos.y, -1, -1, 205, false));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 206 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Entity(hazardsTxt[5], cursorPos.x, cursorPos.y, 0, 0, 206));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 207 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) - 1, cursorPos.y / 32) == 0 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(32, 0, 64, 32), cursorPos.x, cursorPos.y, 32, 0, 207));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) - 1, cursorPos.y / 32, 2);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 208 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Entity(hazardsTxt[6], cursorPos.x, cursorPos.y, 2, 37, 208));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 209 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(96, 0, 56, 69), cursorPos.x, cursorPos.y, 23, 37, 209));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 210 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Entity(hazardsTxt[8], cursorPos.x, cursorPos.y, 12, 8, 210));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 211 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Entity_Rotation(hazardsTxt[8], cursorPos.x, cursorPos.y, 180, 45, 40, 211));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
        case 212 :
            if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) != 1 &&
                tileMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 1, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 2, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 3, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 4, cursorPos.y / 32) == 0 &&
                tileMatrix->getValue((cursorPos.x / 32) + 5, cursorPos.y / 32) == 0 &&
                !blockPlacements)
            {
                currentList.emplace_back(new Centipede_Entity(editorTxt[3], editorMoveable, nodesTex, cursorPos.x, cursorPos.y, 0, 0));

                currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 1);

                tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 2, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 3, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 4, cursorPos.y / 32, 2);
                tileMatrix->setValue((cursorPos.x / 32) + 5, cursorPos.y / 32, 2);

                //blockPlacements = true;

                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
            }
            break;
    }
}

static void Placements_Warps(list<EntWarps>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    if (lastWarp == NULL)
    {
        currentList.emplace_back(EntWarps(warpsTex, editorMoveable, notesTex, cursorPos.x, cursorPos.y, warpsCount, sectionb, true));

        itemHandled->setTextureRect(IntRect(64, 0, 64, 64));

        lastWarp = &currentList.back();
    }
    else
    {
        currentList.emplace_back(EntWarps(warpsTex, editorMoveable, notesTex, cursorPos.x, cursorPos.y, warpsCount, sectionb, false));

        EntWarps* currentWarp = &currentList.back();

        currentWarp->m_companionWarps = lastWarp;
        lastWarp->m_companionWarps = currentWarp;

        itemHandled->setTextureRect(IntRect(0, 0, 64, 64));

        warpsCount++;

        lastWarp = NULL;
    }

    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(1), itemPut, 0, NULL);
}

static void Erasment_Tiles(Matrix* currentMatrix, list<Tile>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 1)
    {
        for (list<Tile>::iterator it = currentList.begin(); it != currentList.end(); it++)
        {
            if (it->getPosition() == cursorPos)
            {
                currentList.erase(it);
                break;
            }
        }

        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
    }
}

static void Erasment_Pipes(Matrix* currentMatrix, Matrix* entMatrix, list<Tile>& currentList)
{
    Vector2f cursorPos(itemHandled->getPosition());

    if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 2/* &&
        entMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 0*/)
    {
        for (list<Tile>::iterator it = currentList.begin(); it != currentList.end(); it++)
        {
            if (it->getPosition() == cursorPos)
            {
                Vector2f tilePos = it->m_quad[0].texCoords;

                if (tilePos == Vector2f(576, 0) ||
                    tilePos == Vector2f(576, 32) ||
                    tilePos == Vector2f(576, 64) ||
                    tilePos == Vector2f(640, 0) ||
                    tilePos == Vector2f(640, 32) ||
                    tilePos == Vector2f(640, 64) ||
                    tilePos == Vector2f(704, 0) ||
                    tilePos == Vector2f(704, 32) ||
                    tilePos == Vector2f(704, 64) ||
                    tilePos == Vector2f(768, 0) ||
                    tilePos == Vector2f(768, 32) ||
                    tilePos == Vector2f(768, 64) ||
                    tilePos == Vector2f(832, 0) ||
                    tilePos == Vector2f(832, 32) ||
                    tilePos == Vector2f(832, 64) ||
                    tilePos == Vector2f(896, 0) ||
                    tilePos == Vector2f(896, 32) ||
                    tilePos == Vector2f(896, 64))
                {
                    list<Tile>::iterator tilesToErase[2];

                    currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    currentMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 0);

                    tilesToErase[0] = it;

                    it++;

                    tilesToErase[1] = it;

                    currentList.erase(tilesToErase[0]);
                    currentList.erase(tilesToErase[1]);

                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);

                    break;
                }
                else if (tilePos == Vector2f(576, 96) ||
                         tilePos == Vector2f(608, 96) ||
                         tilePos == Vector2f(640, 96) ||
                         tilePos == Vector2f(672, 96) ||
                         tilePos == Vector2f(704, 96) ||
                         tilePos == Vector2f(736, 96) ||
                         tilePos == Vector2f(768, 96) ||
                         tilePos == Vector2f(800, 96) ||
                         tilePos == Vector2f(832, 96) ||
                         tilePos == Vector2f(576, 160) ||
                         tilePos == Vector2f(608, 160) ||
                         tilePos == Vector2f(640, 160) ||
                         tilePos == Vector2f(672, 160) ||
                         tilePos == Vector2f(704, 160) ||
                         tilePos == Vector2f(736, 160) ||
                         tilePos == Vector2f(768, 160) ||
                         tilePos == Vector2f(800, 160) ||
                         tilePos == Vector2f(832, 160))
                {
                    list<Tile>::iterator tilesToErase[2];

                    currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    currentMatrix->setValue(cursorPos.x / 32, (cursorPos.y / 32) + 1, 0);

                    tilesToErase[0] = it;

                    it++;

                    tilesToErase[1] = it;

                    currentList.erase(tilesToErase[0]);
                    currentList.erase(tilesToErase[1]);

                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);

                    break;
                }
            }
        }
    }
}

static void Erasment_Entities(Matrix* currentMatrix, Matrix* tileMatrix)
{
    Vector2f cursorPos(itemHandled->getPosition());

    if (currentMatrix->getValue(cursorPos.x / 32, cursorPos.y / 32) == 1)
    {
        #ifdef DEBUGMODE
        cout << "Erasement." << endl;
        #endif

        if (sectionb)
        {
            for (list<Entity*>::iterator it = listSceneriesb.begin(); it != listSceneriesb.end(); it++)
            {
                if ((*it)->getOriginalPosition() == cursorPos)
                {
                    currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                    delete *it;

                    listSceneriesb.erase(it);

                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);

                    break;
                }
            }

            for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
            {
                if ((*it)->getOriginalPosition() == cursorPos)
                {
                    unsigned int entType = (*it)->getType();

                    if (entType == 0)
                    {
                        bool unsetMatrix[2] = {true, true};

                        startArea = 0;

                        startPosition = Vector2f(-1, -1);

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntitiesb.begin(); itb != listEntitiesb.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                {
                                    unsetMatrix[0] = false;
                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 64)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                                {
                                    if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                        unsetMatrix[0] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 0);
                    }
                    else if (entType == 1)
                    {
                        bool unsetMatrix[2] = {true, true};

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntitiesb.begin(); itb != listEntitiesb.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                {
                                    unsetMatrix[0] = false;
                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 64)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                                {
                                    if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                        unsetMatrix[0] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 0);
                    }
                    else if (entType >= 2 && entType <= 22)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 23 && entType <= 25)
                    {
                        bool unsetMatrix[2] = {true, true};

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntitiesb.begin(); itb != listEntitiesb.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                {
                                    unsetMatrix[0] = false;
                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 64)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                                {
                                    if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                        unsetMatrix[0] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 0);
                    }
                    else if (entType >= 114 && entType <= 126)
                    {
                        bool unsetMatrix = true;

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntitiesb.begin(); itb != listEntitiesb.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                    unsetMatrix = false;
                            }
                        }

                        if (unsetMatrix)
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 127 && entType <= 132)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 133 && entType <= 136)
                    {
                        bool unsetMatrix = true;

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntitiesb.begin(); itb != listEntitiesb.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                    unsetMatrix = false;
                            }
                        }

                        if (unsetMatrix)
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 137 && entType <= 148)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 149 && entType <= 152)
                    {
                        bool unsetMatrix = true;

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntitiesb.begin(); itb != listEntitiesb.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                    unsetMatrix = false;
                            }
                        }

                        if (unsetMatrix)
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 153 && entType <= 157)
                    {
                        bool unsetMatrix[2] = {true, true};

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntitiesb.begin(); itb != listEntitiesb.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                {
                                    unsetMatrix[0] = false;
                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 64)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                                {
                                    if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                        unsetMatrix[0] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 0);
                    }
                    else if (entType >= 158 && entType <= 160)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 161 && entType <= 163)
                    {
                        bool unsetMatrix = true;

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntitiesb.begin(); itb != listEntitiesb.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                    unsetMatrix = false;
                            }
                        }

                        if (unsetMatrix)
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType == 164)
                    {
                        bool unsetMatrix[2] = {true, true};

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntitiesb.begin(); itb != listEntitiesb.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[0] = false;

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                {
                                    if ((entTypeb >= 153 && entTypeb <= 157) || entTypeb == 165)
                                        unsetMatrix[0] = false;

                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 64)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) + 1, 0);
                    }
                    else if (entType == 165)
                    {
                        bool unsetMatrix[2] = {true, true};

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntitiesb.begin(); itb != listEntitiesb.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                {
                                    unsetMatrix[0] = false;
                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 64)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                                {
                                    if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                        unsetMatrix[0] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 0);
                    }
                    else if (entType == 166)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 167 && entType <= 170)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType == 171)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 172 && entType <= 179)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 180 && entType <= 201)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 202 && entType <= 205)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType == 206)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 0);
                    }
                    else if (entType == 207)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) - 1, cursorPos.y / 32, 0);
                    }
                    else if (entType == 208 || entType == 209)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType == 210 || entType == 211)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType == 212)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 2, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 3, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 4, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 5, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 225 && entType <= 228)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                    delete *it;

                    listEntitiesb.erase(it);

                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);

                    break;
                }
            }

            for (list<Entity*>::iterator it = listBonusb.begin(); it != listBonusb.end(); it++)
            {
                if ((*it)->getOriginalPosition() == cursorPos)
                {
                    unsigned int entType = (*it)->getType();

                    if ((entType >= 26 && entType <= 51) ||
                        (entType >= 53 && entType <= 91) ||
                        (entType >= 213 && entType <= 224))
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType == 52)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                    delete *it;

                    listBonusb.erase(it);

                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);

                    break;
                }
            }
        }
        else
        {
            for (list<Entity*>::iterator it = listSceneries.begin(); it != listSceneries.end(); it++)
            {
                if ((*it)->getOriginalPosition() == cursorPos)
                {
                    currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                    delete *it;

                    listSceneries.erase(it);

                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);

                    break;
                }
            }

            for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
            {
                if ((*it)->getOriginalPosition() == cursorPos)
                {
                    unsigned int entType = (*it)->getType();

                    if (entType == 0)
                    {
                        bool unsetMatrix[2] = {true, true};

                        startArea = 0;

                        startPosition = Vector2f(-1, -1);

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntities.begin(); itb != listEntities.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                {
                                    unsetMatrix[0] = false;
                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 64)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                                {
                                    if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                        unsetMatrix[0] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 0);
                    }
                    else if (entType == 1)
                    {
                        bool unsetMatrix[2] = {true, true};

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntities.begin(); itb != listEntities.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                {
                                    unsetMatrix[0] = false;
                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 64)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                                {
                                    if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                        unsetMatrix[0] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 0);
                    }
                    else if (entType >= 2 && entType <= 22)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 23 && entType <= 25)
                    {
                        bool unsetMatrix[2] = {true, true};

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntities.begin(); itb != listEntities.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                {
                                    unsetMatrix[0] = false;
                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 64)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                                {
                                    if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                        unsetMatrix[0] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 0);
                    }
                    else if (entType >= 114 && entType <= 126)
                    {
                        bool unsetMatrix = true;

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntities.begin(); itb != listEntities.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                    unsetMatrix = false;
                            }
                        }

                        if (unsetMatrix)
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 127 && entType <= 132)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 133 && entType <= 136)
                    {
                        bool unsetMatrix = true;

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntities.begin(); itb != listEntities.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                    unsetMatrix = false;
                            }
                        }

                        if (unsetMatrix)
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 137 && entType <= 148)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 149 && entType <= 152)
                    {
                        bool unsetMatrix = true;

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntities.begin(); itb != listEntities.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                    unsetMatrix = false;
                            }
                        }

                        if (unsetMatrix)
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 153 && entType <= 157)
                    {
                        bool unsetMatrix[2] = {true, true};

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntities.begin(); itb != listEntities.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                {
                                    unsetMatrix[0] = false;
                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 64)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                                {
                                    if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                        unsetMatrix[0] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 0);
                    }
                    else if (entType >= 158 && entType <= 160)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 161 && entType <= 163)
                    {
                        bool unsetMatrix = true;

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntities.begin(); itb != listEntities.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                    unsetMatrix = false;
                            }
                        }

                        if (unsetMatrix)
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType == 164)
                    {
                        bool unsetMatrix[2] = {true, true};

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntities.begin(); itb != listEntities.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[0] = false;

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                {
                                    if ((entTypeb >= 153 && entTypeb <= 157) || entTypeb == 165)
                                        unsetMatrix[0] = false;

                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 64)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) + 1, 0);
                    }
                    else if (entType == 165)
                    {
                        bool unsetMatrix[2] = {true, true};

                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        for (list<Entity*>::iterator itb = listEntities.begin(); itb != listEntities.end(); itb++)
                        {
                            unsigned int entTypeb = (*itb)->getType();

                            if (entTypeb == 164)
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                {
                                    unsetMatrix[0] = false;
                                    unsetMatrix[1] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 64)
                                    unsetMatrix[1] = false;
                            }
                            else if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 114 && entTypeb <= 126) ||
                                (entTypeb >= 133 && entTypeb <= 136) ||
                                (entTypeb >= 149 && entTypeb <= 157) ||
                                (entTypeb >= 161 && entTypeb <= 165))
                            {
                                Vector2f currentPos = (*it)->getOriginalPosition();
                                Vector2f checkerPos = (*itb)->getOriginalPosition();

                                if (entTypeb == 0 || entTypeb == 1 ||
                                (entTypeb >= 23 && entTypeb <= 25) ||
                                (entTypeb >= 153 && entTypeb <= 157) ||
                                entTypeb >= 165)
                                {
                                    if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y + 32)
                                        unsetMatrix[0] = false;
                                }

                                if (checkerPos.x == currentPos.x && checkerPos.y == currentPos.y - 32)
                                    unsetMatrix[1] = false;
                            }
                        }

                        if (unsetMatrix[0])
                            tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        if (unsetMatrix[1])
                            tileMatrix->setValue(cursorPos.x / 32, (cursorPos.y/32) - 1, 0);
                    }
                    else if (entType == 166)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 167 && entType <= 170)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType == 171)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 172 && entType <= 179)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType >= 180 && entType <= 201)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 202 && entType <= 205)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType == 206)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 0);
                    }
                    else if (entType == 207)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) - 1, cursorPos.y / 32, 0);
                    }
                    else if (entType == 208 || entType == 209)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    else if (entType == 210 || entType == 211)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType == 212)
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 1, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 2, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 3, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 4, cursorPos.y / 32, 0);
                        tileMatrix->setValue((cursorPos.x / 32) + 5, cursorPos.y / 32, 0);
                    }
                    else if (entType >= 225 && entType <= 228)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                    delete *it;

                    listEntities.erase(it);

                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);

                    break;
                }
            }

            for (list<Entity*>::iterator it = listBonus.begin(); it != listBonus.end(); it++)
            {
                if ((*it)->getOriginalPosition() == cursorPos)
                {
                    unsigned int entType = (*it)->getType();

                    if ((entType >= 26 && entType <= 51) ||
                        (entType >= 53 && entType <= 91) ||
                        (entType >= 213 && entType <= 224))
                    {
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                        tileMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);
                    }
                    else if (entType == 52)
                        currentMatrix->setValue(cursorPos.x / 32, cursorPos.y / 32, 0);

                    delete *it;

                    listBonus.erase(it);

                    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);

                    break;
                }
            }
        }
    }
}

static void Erasment_Warps(list<EntWarps>& currentList)
{
    vector<list<EntWarps>::iterator> entitiesToErase;

    #ifdef DEBUGMODE
    cout << "Erasment called" << endl;
    #endif // DEBUGMODE

    for (list<EntWarps>::iterator it = currentList.begin(); it != currentList.end(); it++)
    {
        Vector2f warpPos(it->getPosition());

        if (FloatRect(warpPos.x, warpPos.y, 64, 64).contains(mpos_relative))
        {
            entitiesToErase.emplace_back(it);

            if (it->m_companionWarps != NULL)
            {
                if (it->getEntrance())
                {
                    list<EntWarps>::iterator itb = it;

                    itb++;

                    entitiesToErase.emplace_back(itb);
                }
                else
                {
                    list<EntWarps>::iterator itb = it;

                    itb--;

                    entitiesToErase.emplace_back(itb);
                }
            }
            else
            {
                itemHandled->setTextureRect(IntRect(0, 0, 64, 64));

                lastWarp = NULL;
            }

            for (vector<list<EntWarps>::iterator>::iterator itb = entitiesToErase.begin(); itb != entitiesToErase.end(); itb++)
                currentList.erase(*itb);

            warpsCount = 0;

            for (list<EntWarps>::iterator itb = listWarps.begin(); itb != listWarps.end(); itb++)
            {
                itb->setId(warpsCount);

                if (!itb->getEntrance())
                    warpsCount++;
                else
                {
                    if (lastWarp != NULL)
                        lastWarp = &(*itb);
                }
            }

            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(2), itemDelete, 0, NULL);

            break;
        }
    }
}

static void Button_Back()
{
    FMOD_BOOL isPlaying;

    switch (currentMenu)
    {
        case TILESET    : currentMenu = EDITION;    blockMouse = true;  break;
        case MUSIC      :
            FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

            if (isPlaying)
                FMOD_Channel_Stop(musicSamplesChannel);

            if (sectionb)
            {
                if (levelbMusic != 22)
                {
                    if (musicSamples[23] != NULL)
                    {
                        FMOD_Sound_Release(musicSamples[23]);
                        musicSamples[23] = NULL;
                    }

                    removeResource(2);
                }
            }
            else
            {
                if (levelMusic != 22)
                {
                    if (musicSamples[22] != NULL)
                    {
                        FMOD_Sound_Release(musicSamples[22]);
                        musicSamples[22] = NULL;
                    }

                    removeResource(0);
                }
            }

            if (editorMusic)
                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

            currentMenu = EDITION;

            blockMouse = true;

            for (register unsigned int i = 0; i < 23; i++)
                musicButton[i]->freeze();

            break;
        case BACKGROUND :
            currentMenu = EDITION;

            blockMouse = true;

            for (register unsigned int i = 0; i < 14; i++)
                backgroundButton[i]->freeze();

            break;

        case GRADIENT   :
            if (sectionb)
            {
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScaleb.x * 640, 0);
                backGradient[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
                backGradient[3].position = Vector2f(0, roomScaleb.y * 480);

                backGradient[0].color = topColorb;
                backGradient[1].color = topColorb;
                backGradient[2].color = bottomColorb;
                backGradient[3].color = bottomColorb;
            }
            else
            {
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScale.x * 640, 0);
                backGradient[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
                backGradient[3].position = Vector2f(0, roomScale.y * 480);

                backGradient[0].color = topColor;
                backGradient[1].color = topColor;
                backGradient[2].color = bottomColor;
                backGradient[3].color = bottomColor;
            }

            currentMenu = EDITION;

            blockMouse = true;

            for (register unsigned int i = 0; i < 3; i++)
                gradientButton[i]->freeze();

            break;

        case EFFECTS    :
            currentMenu = EDITION;

            blockMouse = true;

            break;
        case INFOS      : currentMenu = EDITION;    blockMouse = true;  break;
        case LIQUID     :
            Prefs_Title();

            blockMouse = true;

            liquidRect[0]->setOutlineThickness(0);
            liquidRect[1]->setOutlineThickness(0);
            break;
        case AUTOSCROLL :
            Prefs_Title();

            blockMouse = true;
            break;
    }

    returnButton->freeze();
}

static void IncreaseWidth()
{
    if (sectionb)
    {
        if (roomScaleb.x < 20)
            roomScaleb.x++;
    }
    else
    {
        if (roomScale.x < 20)
            roomScale.x++;
    }

    RecalculateBounds();
}

static void DecreaseWidth()
{
    if (sectionb)
    {
        if (roomScaleb.x > 1)
            roomScaleb.x--;
    }
    else
    {
        if (roomScale.x > 1)
            roomScale.x--;
    }

    RecalculateBounds();
}

static void IncreaseHeight()
{
    if (sectionb)
    {
        if (roomScaleb.y < 20)
            roomScaleb.y++;
    }
    else
    {
        if (roomScale.y < 20)
            roomScale.y++;
    }

    RecalculateBounds();
}

static void DecreaseHeight()
{
    if (sectionb)
    {
        if (roomScaleb.y > 1)
            roomScaleb.y--;
    }
    else
    {
        if (roomScale.y > 1)
            roomScale.y--;
    }

    RecalculateBounds();
}

static void RecalculateBounds()
{
    if (sectionb)
    {
        switch (levelbGradient)
        {
            case 0 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScaleb.x * 640, 0);
                backGradient[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
                backGradient[3].position = Vector2f(0, roomScaleb.y * 480);
                break;
            case 1 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScaleb.x * 640, 0);
                backGradient[2].position = Vector2f(roomScaleb.x * 640, 480);
                backGradient[3].position = Vector2f(0, 480);
                break;
            case 2 :
                backGradient[0].position = Vector2f(0, (roomScaleb.y-1) * 480);
                backGradient[1].position = Vector2f(roomScaleb.x * 640, (roomScaleb.y-1) * 480);
                backGradient[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
                backGradient[3].position = Vector2f(0, roomScaleb.y * 480);
                break;
        }

        background[0]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[1]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[2]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[3]->setPosition(0, (roomScaleb.y * 480) - 178);
        background[4]->setPosition(0, (roomScaleb.y * 480) - 165);
        background[5]->setPosition(0, (roomScaleb.y * 480) - 101);
        background[6]->setPosition(0, (roomScaleb.y * 480) - 320);
        background[7]->setPosition(0, (roomScaleb.y * 480) - 320);
        background[14]->setPosition(0, (roomScaleb.y * 480) - 320);
        background[15]->setPosition(0, (roomScaleb.y * 480) - 320);

        background[0]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[1]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[2]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[3]->setSize(Vector2f(roomScaleb.x * 640, 178));
        background[4]->setSize(Vector2f(roomScaleb.x * 640, 165));
        background[5]->setSize(Vector2f(roomScaleb.x * 640, 101));
        background[6]->setSize(Vector2f(roomScaleb.x * 640, 320));
        background[7]->setSize(Vector2f(roomScaleb.x * 640, 320));
        background[8]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[9]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[10]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[11]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[14]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[15]->setSize(Vector2f(roomScaleb.x * 640, 274));

        if (background[13] != NULL)
            background[13]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));

        {
            float liquidHeight = liquidRect[1]->getGlobalBounds().height;

            if (levelLiquidHeightb > roomScaleb.y * 480)
            {
                levelLiquidHeightb = roomScaleb.y * 480;

                liquidRect[1]->setPosition(0, levelLiquidHeight - liquidHeight);
            }
        }

        liquidRect[1]->setSize(Vector2f(roomScaleb.x * 640, liquidRect[1]->getSize().y));

        background[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[2]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[3]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 178));
        background[4]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 165));
        background[5]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 101));
        background[6]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 320));
        background[7]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 320));
        background[8]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[9]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[10]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[11]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[14]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[15]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));

        if (background[13] != NULL)
            background[13]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));

        liquidRect[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, liquidRect[1]->getTextureRect().height));

        effectClouds[0]->setSize(Vector2f(roomScaleb.x * 640, 63));
        effectClouds[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));

        effectClouds[1]->setSize(Vector2f(roomScaleb.x * 640, 63));
        effectClouds[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));

        layer1TileMatrixb->resize(roomScaleb.x * 20, roomScaleb.y * 15);
        layer2TileMatrixb->resize(roomScaleb.x * 20, roomScaleb.y * 15);
        layer3TileMatrixb->resize(roomScaleb.x * 20, roomScaleb.y * 15);

        entityMatrixb->resize(roomScaleb.x * 20, roomScaleb.y * 15);

        if (!listTileb1.empty())
        {
            vector<list<Tile>::iterator> tilesToErase;

            for (list<Tile>::iterator it = listTileb1.begin(); it != listTileb1.end(); it++)
            {
                Vector2f tilePos(it->getPosition());

                if (tilePos.x > (roomScaleb.x * 640) - 32 || tilePos.y > (roomScaleb.y * 480) - 32)
                    tilesToErase.emplace_back(it);
            }

            for (vector<list<Tile>::iterator>::iterator it = tilesToErase.begin(); it != tilesToErase.end(); it++)
                listTileb1.erase(*it);
        }

        if (!listTileb2.empty())
        {
            vector<list<Tile>::iterator> tilesToErase;

            for (list<Tile>::iterator it = listTileb2.begin(); it != listTileb2.end(); it++)
            {
                Vector2f tilePos(it->getPosition());

                if (tilePos.x > (roomScaleb.x * 640) - 32 || tilePos.y > (roomScaleb.y * 480) - 32)
                    tilesToErase.emplace_back(it);
            }

            for (vector<list<Tile>::iterator>::iterator it = tilesToErase.begin(); it != tilesToErase.end(); it++)
                listTileb2.erase(*it);
        }

        if (!listTileb3.empty())
        {
            vector<list<Tile>::iterator> tilesToErase;

            for (list<Tile>::iterator it = listTileb3.begin(); it != listTileb3.end(); it++)
            {
                Vector2f tilePos(it->getPosition());

                if (tilePos.x > (roomScaleb.x * 640) - 32 || tilePos.y > (roomScaleb.y * 480) - 32)
                    tilesToErase.emplace_back(it);
            }

            for (vector<list<Tile>::iterator>::iterator it = tilesToErase.begin(); it != tilesToErase.end(); it++)
                listTileb3.erase(*it);
        }

        if (!listSceneriesb.empty())
        {
            vector<list<Entity*>::iterator> entitiesToErase;

            for (list<Entity*>::iterator it = listSceneriesb.begin(); it != listSceneriesb.end(); it++)
            {
                Vector2f entityPos = (*it)->getOriginalPosition();

                if (entityPos.x > (roomScaleb.x * 640) - 32 || entityPos.y > (roomScaleb.y * 480) - 32)
                    entitiesToErase.emplace_back(it);
                else
                    (*it)->roomResized(roomScaleb);
            }

            for (vector<list<Entity*>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
            {
                delete **it;

                listSceneriesb.erase(*it);
            }
        }

        if (!listEntitiesb.empty())
        {
            vector<list<Entity*>::iterator> entitiesToErase;

            for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
            {
                Vector2f entityPos = (*it)->getOriginalPosition();

                if (entityPos.x > (roomScaleb.x * 640) - 32 || entityPos.y > (roomScaleb.y * 480) - 32)
                    entitiesToErase.emplace_back(it);
                else
                    (*it)->roomResized(roomScaleb);
            }

            for (vector<list<Entity*>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
            {
                delete **it;

                listEntitiesb.erase(*it);
            }
        }

        if (!listBonusb.empty())
        {
            vector<list<Entity*>::iterator> entitiesToErase;

            for (list<Entity*>::iterator it = listBonusb.begin(); it != listBonusb.end(); it++)
            {
                Vector2f entityPos = (*it)->getOriginalPosition();

                if (entityPos.x > (roomScaleb.x * 640) - 32 || entityPos.y > (roomScaleb.y * 480) - 32)
                    entitiesToErase.emplace_back(it);
                else
                    (*it)->roomResized(roomScaleb);
            }

            for (vector<list<Entity*>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
            {
                delete **it;

                listBonusb.erase(*it);
            }
        }

        if (!listWarps.empty())
        {
            vector<list<EntWarps>::iterator> entitiesToErase;

            for (list<EntWarps>::iterator it = listWarps.begin(); it != listWarps.end(); it++)
            {
                if (it->getSection() == 0)
                    continue;

                Vector2f entityPos(it->getPosition());

                if (entityPos.x > (roomScaleb.x * 640) - 32 || entityPos.y > (roomScaleb.y * 480) - 32)
                {
                    entitiesToErase.emplace_back(it);

                    if (it->m_companionWarps != NULL)
                    {
                        if (it->getEntrance())
                        {
                            list<EntWarps>::iterator itb = it;

                            itb++;

                            entitiesToErase.emplace_back(itb);
                        }
                        else
                        {
                            list<EntWarps>::iterator itb = it;

                            itb--;

                            entitiesToErase.emplace_back(itb);
                        }
                    }
                    else
                    {
                        itemHandled->setTextureRect(IntRect(0, 0, 64, 64));

                        lastWarp = NULL;
                    }
                }
            }

            for (vector<list<EntWarps>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
                listWarps.erase(*it);
        }

        warpsCount = 0;

        for (list<EntWarps>::iterator itb = listWarps.begin(); itb != listWarps.end(); itb++)
        {
            itb->setId(warpsCount);

            if (!itb->getEntrance())
                warpsCount++;
            else
            {
                if (lastWarp != NULL)
                    lastWarp = &(*itb);
            }
        }

        levelLiquidTriggerb.clear();

        if (!levelLiquidTriggerb.empty())
        {
            vector<vector<Trigger>::iterator> triggersToErase;

            for (vector<Trigger>::iterator it = levelLiquidTriggerb.begin(); it != levelLiquidTriggerb.end(); it++)
            {
                Vector2f triggerPos = (*it).getFullPosition();
                Vector2f triggerSize = (*it).getFullSize();

                float triggerMov = (*it).getMoveablePosition();

                if (triggerPos.x + triggerSize.x > (roomScaleb.x * 640) || triggerPos.y + triggerSize.y > (roomScaleb.y * 480))
                    triggersToErase.emplace_back(it);
                else if (triggerMov + 32 > (roomScaleb.y * 480))
                    (*it).setMoveablePosition((roomScaleb.y * 480) - 32);
            }

            for (vector<vector<Trigger>::iterator>::iterator it = triggersToErase.begin(); it != triggersToErase.end(); it++)
                levelLiquidTriggerb.erase(*it);
        }

        if (levelAutoscroll == 2)
        {
            if (!levelAutoscrollPath.empty())
            {
                for (vector<Dragger>::iterator it = levelAutoscrollPath.begin(); it != levelAutoscrollPath.end(); it++)
                {
                    Vector2f entityPos((*it).getPosition());

                    if (entityPos.x > (roomScaleb.x * 640) - 336)
                        entityPos.x = (roomScaleb.x * 640) - 336;

                    if (entityPos.y > (roomScaleb.y * 480) - 256)
                        entityPos.y = (roomScaleb.y * 480) - 256;

                    (*it).setPosition(entityPos);
                }
            }
        }
    }
    else
    {
        switch (levelGradient)
        {
            case 0 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScale.x * 640, 0);
                backGradient[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
                backGradient[3].position = Vector2f(0, roomScale.y * 480);
                break;
            case 1 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScale.x * 640, 0);
                backGradient[2].position = Vector2f(roomScale.x * 640, 480);
                backGradient[3].position = Vector2f(0, 480);
                break;
            case 2 :
                backGradient[0].position = Vector2f(0, (roomScale.y-1) * 480);
                backGradient[1].position = Vector2f(roomScale.x * 640, (roomScale.y-1) * 480);
                backGradient[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
                backGradient[3].position = Vector2f(0, roomScale.y * 480);
                break;
        }

        background[0]->setPosition(0, (roomScale.y * 480) - 274);
        background[1]->setPosition(0, (roomScale.y * 480) - 274);
        background[2]->setPosition(0, (roomScale.y * 480) - 274);
        background[3]->setPosition(0, (roomScale.y * 480) - 178);
        background[4]->setPosition(0, (roomScale.y * 480) - 165);
        background[5]->setPosition(0, (roomScale.y * 480) - 101);
        background[6]->setPosition(0, (roomScale.y * 480) - 320);
        background[7]->setPosition(0, (roomScale.y * 480) - 320);
        background[14]->setPosition(0, (roomScale.y * 480) - 274);
        background[15]->setPosition(0, (roomScale.y * 480) - 274);

        background[0]->setSize(Vector2f(roomScale.x * 640, 274));
        background[1]->setSize(Vector2f(roomScale.x * 640, 274));
        background[2]->setSize(Vector2f(roomScale.x * 640, 274));
        background[3]->setSize(Vector2f(roomScale.x * 640, 178));
        background[4]->setSize(Vector2f(roomScale.x * 640, 165));
        background[5]->setSize(Vector2f(roomScale.x * 640, 101));
        background[6]->setSize(Vector2f(roomScale.x * 640, 320));
        background[7]->setSize(Vector2f(roomScale.x * 640, 320));
        background[8]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[9]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[10]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[11]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[14]->setSize(Vector2f(roomScale.x * 640, 274));
        background[15]->setSize(Vector2f(roomScale.x * 640, 274));

        if (background[12] != NULL)
            background[12]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));

        {
            float liquidHeight = liquidRect[0]->getGlobalBounds().height;

            if (levelLiquidHeight > roomScale.y * 480)
            {
                levelLiquidHeight = roomScaleb.y * 480;

                liquidRect[0]->setPosition(0, levelLiquidHeight - liquidHeight);
            }
        }

        liquidRect[0]->setSize(Vector2f(roomScale.x * 640, liquidRect[0]->getSize().y));

        background[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[1]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[2]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[3]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 178));
        background[4]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 165));
        background[5]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 101));
        background[6]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 320));
        background[7]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 320));
        background[8]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[9]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[10]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[11]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[14]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[15]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));

        if (background[12] != NULL)
            background[12]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));

        liquidRect[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, liquidRect[0]->getTextureRect().height));

        effectClouds[0]->setSize(Vector2f(roomScale.x * 640, 63));
        effectClouds[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));

        effectClouds[1]->setSize(Vector2f(roomScale.x * 640, 63));
        effectClouds[1]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));

        layer1TileMatrix->resize(roomScale.x * 20, roomScale.y * 15);
        layer2TileMatrix->resize(roomScale.x * 20, roomScale.y * 15);
        layer3TileMatrix->resize(roomScale.x * 20, roomScale.y * 15);

        entityMatrix->resize(roomScale.x * 20, roomScale.y * 15);

        if (!listTile1.empty())
        {
            vector<list<Tile>::iterator> tilesToErase;

            for (list<Tile>::iterator it = listTile1.begin(); it != listTile1.end(); it++)
            {
                Vector2f tilePos(it->getPosition());

                if (tilePos.x > (roomScale.x * 640) - 32 || tilePos.y > (roomScale.y * 480) - 32)
                    tilesToErase.emplace_back(it);
            }

            for (vector<list<Tile>::iterator>::iterator it = tilesToErase.begin(); it != tilesToErase.end(); it++)
                listTile1.erase(*it);

            tilesToErase.clear();
        }

        if (!listTile2.empty())
        {
            vector<list<Tile>::iterator> tilesToErase;

            for (list<Tile>::iterator it = listTile2.begin(); it != listTile2.end(); it++)
            {
                Vector2f tilePos(it->getPosition());

                if (tilePos.x > (roomScale.x * 640) - 32 || tilePos.y > (roomScale.y * 480) - 32)
                    tilesToErase.emplace_back(it);
            }

            for (vector<list<Tile>::iterator>::iterator it = tilesToErase.begin(); it != tilesToErase.end(); it++)
                listTile2.erase(*it);

            tilesToErase.clear();
        }

        if (!listTile3.empty())
        {
            vector<list<Tile>::iterator> tilesToErase;

            for (list<Tile>::iterator it = listTile3.begin(); it != listTile3.end(); it++)
            {
                Vector2f tilePos(it->getPosition());

                if (tilePos.x > (roomScale.x * 640) - 32 || tilePos.y > (roomScale.y * 480) - 32)
                    tilesToErase.emplace_back(it);
            }

            for (vector<list<Tile>::iterator>::iterator it = tilesToErase.begin(); it != tilesToErase.end(); it++)
                listTile3.erase(*it);
        }

        if (!listSceneries.empty())
        {
            vector<list<Entity*>::iterator> entitiesToErase;

            for (list<Entity*>::iterator it = listSceneries.begin(); it != listSceneries.end(); it++)
            {
                Vector2f entityPos = (*it)->getOriginalPosition();

                if (entityPos.x > (roomScale.x * 640) - 32 || entityPos.y > (roomScale.y * 480) - 32)
                    entitiesToErase.emplace_back(it);
                else
                    (*it)->roomResized(roomScale);
            }

            for (vector<list<Entity*>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
            {
                delete **it;

                listSceneries.erase(*it);
            }
        }

        if (!listEntities.empty())
        {
            vector<list<Entity*>::iterator> entitiesToErase;

            for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
            {
                Vector2f entityPos = (*it)->getOriginalPosition();

                if (entityPos.x > (roomScale.x * 640) - 32 || entityPos.y > (roomScale.y * 480) - 32)
                    entitiesToErase.emplace_back(it);
                else
                    (*it)->roomResized(roomScale);
            }

            for (vector<list<Entity*>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
            {
                delete **it;

                listEntities.erase(*it);
            }
        }

        if (!listBonus.empty())
        {
            vector<list<Entity*>::iterator> entitiesToErase;

            for (list<Entity*>::iterator it = listBonus.begin(); it != listBonus.end(); it++)
            {
                Vector2f entityPos = (*it)->getOriginalPosition();

                if (entityPos.x > (roomScale.x * 640) - 32 || entityPos.y > (roomScale.y * 480) - 32)
                    entitiesToErase.emplace_back(it);
                else
                    (*it)->roomResized(roomScale);
            }

            for (vector<list<Entity*>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
            {
                delete **it;

                listBonus.erase(*it);
            }
        }

        if (!listWarps.empty())
        {
            vector<list<EntWarps>::iterator> entitiesToErase;

            for (list<EntWarps>::iterator it = listWarps.begin(); it != listWarps.end(); it++)
            {
                if (it->getSection() == 1)
                    continue;

                Vector2f entityPos(it->getPosition());

                if (entityPos.x > (roomScale.x * 640) - 32 || entityPos.y > (roomScale.y * 480) - 32)
                {
                    entitiesToErase.emplace_back(it);

                    if (it->m_companionWarps != NULL)
                    {
                        if (it->getEntrance())
                        {
                            list<EntWarps>::iterator itb = it;

                            itb++;

                            entitiesToErase.emplace_back(itb);
                        }
                        else
                        {
                            list<EntWarps>::iterator itb = it;

                            itb--;

                            entitiesToErase.emplace_back(itb);
                        }
                    }
                    else
                    {
                        itemHandled->setTextureRect(IntRect(0, 0, 64, 64));

                        lastWarp = NULL;
                    }
                }
            }

            for (vector<list<EntWarps>::iterator>::iterator it = entitiesToErase.begin(); it != entitiesToErase.end(); it++)
                listWarps.erase(*it);
        }

        warpsCount = 0;

        for (list<EntWarps>::iterator itb = listWarps.begin(); itb != listWarps.end(); itb++)
        {
            itb->setId(warpsCount);

            if (!itb->getEntrance())
                warpsCount++;
            else
            {
                if (lastWarp != NULL)
                    lastWarp = &(*itb);
            }
        }

        if (!levelLiquidTrigger.empty())
        {
            vector<vector<Trigger>::iterator> triggersToErase;

            for (vector<Trigger>::iterator it = levelLiquidTrigger.begin(); it != levelLiquidTrigger.end(); it++)
            {
                Vector2f triggerPos = (*it).getFullPosition();
                Vector2f triggerSize = (*it).getFullSize();

                float triggerMov = (*it).getMoveablePosition();

                if (triggerPos.x + triggerSize.x > (roomScale.x * 640) || triggerPos.y + triggerSize.y > (roomScale.y * 480))
                    triggersToErase.emplace_back(it);
                else if (triggerMov + 32 > (roomScale.y * 480))
                    (*it).setMoveablePosition((roomScale.y * 480) - 32);
            }

            for (vector<vector<Trigger>::iterator>::iterator it = triggersToErase.begin(); it != triggersToErase.end(); it++)
                levelLiquidTrigger.erase(*it);
        }

        if (levelAutoscroll == 1)
        {
            if (!levelAutoscrollPath.empty())
            {
                for (vector<Dragger>::iterator it = levelAutoscrollPath.begin(); it != levelAutoscrollPath.end(); it++)
                {
                    Vector2f entityPos((*it).getPosition());

                    if (entityPos.x > (roomScale.x * 640) - 336)
                        entityPos.x = (roomScale.x * 640) - 336;

                    if (entityPos.y > (roomScale.y * 480) - 256)
                        entityPos.y = (roomScale.y * 480) - 256;

                    (*it).setPosition(entityPos);
                }
            }
        }
    }
}

void RecalculateInfos(unsigned char info)
{
    switch (info)
    {
        case 0 :

            panelInfo[0].position = Vector2f(camPos.x - 300, camPos.y - 112);
            panelInfo[1].position = Vector2f(camPos.x - 284, camPos.y - 112);
            panelInfo[2].position = Vector2f(camPos.x - 284, camPos.y - 96);
            panelInfo[3].position = Vector2f(camPos.x - 300, camPos.y - 96);

            panelInfo[4].position = Vector2f(camPos.x - 284, camPos.y - 112);
            panelInfo[5].position = Vector2f(camPos.x + 284, camPos.y - 112);
            panelInfo[6].position = Vector2f(camPos.x + 284, camPos.y - 96);
            panelInfo[7].position = Vector2f(camPos.x - 284, camPos.y - 96);

            panelInfo[8].position = Vector2f(camPos.x + 284, camPos.y - 112);
            panelInfo[9].position = Vector2f(camPos.x + 300, camPos.y - 112);
            panelInfo[10].position = Vector2f(camPos.x + 300, camPos.y - 96);
            panelInfo[11].position = Vector2f(camPos.x + 284, camPos.y - 96);

            panelInfo[12].position = Vector2f(camPos.x - 300, camPos.y - 96);
            panelInfo[13].position = Vector2f(camPos.x - 284, camPos.y - 96);
            panelInfo[14].position = Vector2f(camPos.x - 284, camPos.y + 104);
            panelInfo[15].position = Vector2f(camPos.x - 300, camPos.y + 104);

            panelInfo[16].position = Vector2f(camPos.x - 284, camPos.y - 96);
            panelInfo[17].position = Vector2f(camPos.x + 284, camPos.y - 96);
            panelInfo[18].position = Vector2f(camPos.x + 284, camPos.y + 104);
            panelInfo[19].position = Vector2f(camPos.x - 284, camPos.y + 104);

            panelInfo[20].position = Vector2f(camPos.x + 284, camPos.y - 96);
            panelInfo[21].position = Vector2f(camPos.x + 300, camPos.y - 96);
            panelInfo[22].position = Vector2f(camPos.x + 300, camPos.y + 104);
            panelInfo[23].position = Vector2f(camPos.x + 284, camPos.y + 104);

            panelInfo[24].position = Vector2f(camPos.x - 300, camPos.y + 104);
            panelInfo[25].position = Vector2f(camPos.x - 284, camPos.y + 104);
            panelInfo[26].position = Vector2f(camPos.x - 284, camPos.y + 120);
            panelInfo[27].position = Vector2f(camPos.x - 300, camPos.y + 120);

            panelInfo[28].position = Vector2f(camPos.x - 284, camPos.y + 104);
            panelInfo[29].position = Vector2f(camPos.x + 284, camPos.y + 104);
            panelInfo[30].position = Vector2f(camPos.x + 284, camPos.y + 120);
            panelInfo[31].position = Vector2f(camPos.x - 284, camPos.y + 120);

            panelInfo[32].position = Vector2f(camPos.x + 284, camPos.y + 104);
            panelInfo[33].position = Vector2f(camPos.x + 300, camPos.y + 104);
            panelInfo[34].position = Vector2f(camPos.x + 300, camPos.y + 120);
            panelInfo[35].position = Vector2f(camPos.x + 284, camPos.y + 120);

            infosText[0]->setPosition(camPos.x-260, camPos.y-76);
            infosText[1]->setPosition(camPos.x-260, camPos.y-31);
            infosText[2]->setPosition(camPos.x-260, camPos.y+14);
            infosText[3]->setPosition(camPos.x-260, camPos.y+59);

            editButton[0]->setPosition(camPos.x+200, camPos.y-64);
            editButton[1]->setPosition(camPos.x+200, camPos.y-19);
            editButton[2]->setPosition(camPos.x+200, camPos.y+26);
            editButton[3]->setPosition(camPos.x+200, camPos.y+71);

            infoSlider[0]->setParams(camPos.x-102, camPos.y+10, camPos.x-102, camPos.x+80);
            infoSlider[1]->setParams(camPos.x-102, camPos.y+55, camPos.x-102, camPos.x+80);

            infoSlider[0]->setPosition(roundf(20.222222 * (levelGravity-1)));
            infoSlider[1]->setPosition(roundf((levelTime-100) / 54.395604));

            break;
        case 1 :

            panelInfo[0].position = Vector2f(camPos.x - 310, camPos.y - 100);
            panelInfo[1].position = Vector2f(camPos.x - 294, camPos.y - 100);
            panelInfo[2].position = Vector2f(camPos.x - 294, camPos.y - 84);
            panelInfo[3].position = Vector2f(camPos.x - 310, camPos.y - 84);

            panelInfo[4].position = Vector2f(camPos.x - 294, camPos.y - 100);
            panelInfo[5].position = Vector2f(camPos.x + 294, camPos.y - 100);
            panelInfo[6].position = Vector2f(camPos.x + 294, camPos.y - 84);
            panelInfo[7].position = Vector2f(camPos.x - 294, camPos.y - 84);

            panelInfo[8].position = Vector2f(camPos.x + 294, camPos.y - 100);
            panelInfo[9].position = Vector2f(camPos.x + 310, camPos.y - 100);
            panelInfo[10].position = Vector2f(camPos.x + 310, camPos.y - 84);
            panelInfo[11].position = Vector2f(camPos.x + 294, camPos.y - 84);

            panelInfo[12].position = Vector2f(camPos.x - 310, camPos.y - 84);
            panelInfo[13].position = Vector2f(camPos.x - 294, camPos.y - 84);
            panelInfo[14].position = Vector2f(camPos.x - 294, camPos.y + 84);
            panelInfo[15].position = Vector2f(camPos.x - 310, camPos.y + 84);

            panelInfo[16].position = Vector2f(camPos.x - 294, camPos.y - 84);
            panelInfo[17].position = Vector2f(camPos.x + 294, camPos.y - 84);
            panelInfo[18].position = Vector2f(camPos.x + 294, camPos.y + 84);
            panelInfo[19].position = Vector2f(camPos.x - 294, camPos.y + 84);

            panelInfo[20].position = Vector2f(camPos.x + 294, camPos.y - 84);
            panelInfo[21].position = Vector2f(camPos.x + 310, camPos.y - 84);
            panelInfo[22].position = Vector2f(camPos.x + 310, camPos.y + 84);
            panelInfo[23].position = Vector2f(camPos.x + 294, camPos.y + 84);

            panelInfo[24].position = Vector2f(camPos.x - 310, camPos.y + 84);
            panelInfo[25].position = Vector2f(camPos.x - 294, camPos.y + 84);
            panelInfo[26].position = Vector2f(camPos.x - 294, camPos.y + 100);
            panelInfo[27].position = Vector2f(camPos.x - 310, camPos.y + 100);

            panelInfo[28].position = Vector2f(camPos.x - 294, camPos.y + 84);
            panelInfo[29].position = Vector2f(camPos.x + 294, camPos.y + 84);
            panelInfo[30].position = Vector2f(camPos.x + 294, camPos.y + 100);
            panelInfo[31].position = Vector2f(camPos.x - 294, camPos.y + 100);

            panelInfo[32].position = Vector2f(camPos.x + 294, camPos.y + 84);
            panelInfo[33].position = Vector2f(camPos.x + 310, camPos.y + 84);
            panelInfo[34].position = Vector2f(camPos.x + 310, camPos.y + 100);
            panelInfo[35].position = Vector2f(camPos.x + 294, camPos.y + 100);

            fileButton[0]->setPosition(camPos.x-180, camPos.y+48);
            fileButton[1]->setPosition(camPos.x-180, camPos.y+114);
            fileButton[2]->setPosition(camPos.x+180, camPos.y+48);
            fileButton[3]->setPosition(camPos.x+180, camPos.y+114);

            break;
        case 2 :

            panelInfo[0].position = Vector2f(camPos.x - 310, camPos.y - 122);
            panelInfo[1].position = Vector2f(camPos.x - 294, camPos.y - 122);
            panelInfo[2].position = Vector2f(camPos.x - 294, camPos.y - 106);
            panelInfo[3].position = Vector2f(camPos.x - 310, camPos.y - 106);

            panelInfo[4].position = Vector2f(camPos.x - 294, camPos.y - 122);
            panelInfo[5].position = Vector2f(camPos.x + 294, camPos.y - 122);
            panelInfo[6].position = Vector2f(camPos.x + 294, camPos.y - 106);
            panelInfo[7].position = Vector2f(camPos.x - 294, camPos.y - 106);

            panelInfo[8].position = Vector2f(camPos.x + 294, camPos.y - 122);
            panelInfo[9].position = Vector2f(camPos.x + 310, camPos.y - 122);
            panelInfo[10].position = Vector2f(camPos.x + 310, camPos.y - 106);
            panelInfo[11].position = Vector2f(camPos.x + 294, camPos.y - 106);

            panelInfo[12].position = Vector2f(camPos.x - 310, camPos.y - 106);
            panelInfo[13].position = Vector2f(camPos.x - 294, camPos.y - 106);
            panelInfo[14].position = Vector2f(camPos.x - 294, camPos.y + 124);
            panelInfo[15].position = Vector2f(camPos.x - 310, camPos.y + 124);

            panelInfo[16].position = Vector2f(camPos.x - 294, camPos.y - 106);
            panelInfo[17].position = Vector2f(camPos.x + 294, camPos.y - 106);
            panelInfo[18].position = Vector2f(camPos.x + 294, camPos.y + 124);
            panelInfo[19].position = Vector2f(camPos.x - 294, camPos.y + 124);

            panelInfo[20].position = Vector2f(camPos.x + 294, camPos.y - 106);
            panelInfo[21].position = Vector2f(camPos.x + 310, camPos.y - 106);
            panelInfo[22].position = Vector2f(camPos.x + 310, camPos.y + 124);
            panelInfo[23].position = Vector2f(camPos.x + 294, camPos.y + 124);

            panelInfo[24].position = Vector2f(camPos.x - 310, camPos.y + 124);
            panelInfo[25].position = Vector2f(camPos.x - 294, camPos.y + 124);
            panelInfo[26].position = Vector2f(camPos.x - 294, camPos.y + 140);
            panelInfo[27].position = Vector2f(camPos.x - 310, camPos.y + 140);

            panelInfo[28].position = Vector2f(camPos.x - 294, camPos.y + 124);
            panelInfo[29].position = Vector2f(camPos.x + 294, camPos.y + 124);
            panelInfo[30].position = Vector2f(camPos.x + 294, camPos.y + 140);
            panelInfo[31].position = Vector2f(camPos.x - 294, camPos.y + 140);

            panelInfo[32].position = Vector2f(camPos.x + 294, camPos.y + 124);
            panelInfo[33].position = Vector2f(camPos.x + 310, camPos.y + 124);
            panelInfo[34].position = Vector2f(camPos.x + 310, camPos.y + 140);
            panelInfo[35].position = Vector2f(camPos.x + 294, camPos.y + 140);

            infosText[4]->setPosition(camPos.x-292, camPos.y-108);
            infosText[5]->setPosition(camPos.x-292, camPos.y-18);
            infosText[6]->setPosition(camPos.x-292, camPos.y+64);

            editButton[4]->setPosition(camPos.x+206, camPos.y+24);
            editButton[5]->setPosition(camPos.x+206, camPos.y+106);

            infoSlider[2]->setParams(camPos.x-116, camPos.y+8, camPos.x-116, camPos.x+66);
            infoSlider[3]->setParams(camPos.x-116, camPos.y+90, camPos.x-116, camPos.x+66);

            if (sectionb)
            {
                infosText[4]->setTextureRect(IntRect(0, 20, 72, 21));

                infoSlider[2]->setPosition(roundf(levelBackAlphab / 1.401098));
                infoSlider[3]->setPosition(roundf(levelFrontAlphab / 1.401098));
            }
            else
            {
                infosText[4]->setTextureRect(IntRect(0, 0, 72, 20));

                infoSlider[2]->setPosition(roundf(levelBackAlpha / 1.401098));
                infoSlider[3]->setPosition(roundf(levelFrontAlpha / 1.401098));
            }

            break;
        case 3 :

            panelInfo[0].position = Vector2f(camPos.x - 264, camPos.y - 144);
            panelInfo[1].position = Vector2f(camPos.x - 248, camPos.y - 144);
            panelInfo[2].position = Vector2f(camPos.x - 248, camPos.y - 128);
            panelInfo[3].position = Vector2f(camPos.x - 264, camPos.y - 128);

            panelInfo[4].position = Vector2f(camPos.x - 248, camPos.y - 144);
            panelInfo[5].position = Vector2f(camPos.x + 248, camPos.y - 144);
            panelInfo[6].position = Vector2f(camPos.x + 248, camPos.y - 128);
            panelInfo[7].position = Vector2f(camPos.x - 248, camPos.y - 128);

            panelInfo[8].position = Vector2f(camPos.x + 248, camPos.y - 144);
            panelInfo[9].position = Vector2f(camPos.x + 264, camPos.y - 144);
            panelInfo[10].position = Vector2f(camPos.x + 264, camPos.y - 128);
            panelInfo[11].position = Vector2f(camPos.x + 248, camPos.y - 128);

            panelInfo[12].position = Vector2f(camPos.x - 264, camPos.y - 128);
            panelInfo[13].position = Vector2f(camPos.x - 248, camPos.y - 128);
            panelInfo[14].position = Vector2f(camPos.x - 248, camPos.y + 148);
            panelInfo[15].position = Vector2f(camPos.x - 264, camPos.y + 148);

            panelInfo[16].position = Vector2f(camPos.x - 248, camPos.y - 128);
            panelInfo[17].position = Vector2f(camPos.x + 248, camPos.y - 128);
            panelInfo[18].position = Vector2f(camPos.x + 248, camPos.y + 148);
            panelInfo[19].position = Vector2f(camPos.x - 248, camPos.y + 148);

            panelInfo[20].position = Vector2f(camPos.x + 248, camPos.y - 128);
            panelInfo[21].position = Vector2f(camPos.x + 264, camPos.y - 128);
            panelInfo[22].position = Vector2f(camPos.x + 264, camPos.y + 148);
            panelInfo[23].position = Vector2f(camPos.x + 248, camPos.y + 148);

            panelInfo[24].position = Vector2f(camPos.x - 264, camPos.y + 148);
            panelInfo[25].position = Vector2f(camPos.x - 248, camPos.y + 148);
            panelInfo[26].position = Vector2f(camPos.x - 248, camPos.y + 164);
            panelInfo[27].position = Vector2f(camPos.x - 264, camPos.y + 164);

            panelInfo[28].position = Vector2f(camPos.x - 248, camPos.y + 148);
            panelInfo[29].position = Vector2f(camPos.x + 248, camPos.y + 148);
            panelInfo[30].position = Vector2f(camPos.x + 248, camPos.y + 164);
            panelInfo[31].position = Vector2f(camPos.x - 248, camPos.y + 164);

            panelInfo[32].position = Vector2f(camPos.x + 248, camPos.y + 148);
            panelInfo[33].position = Vector2f(camPos.x + 264, camPos.y + 148);
            panelInfo[34].position = Vector2f(camPos.x + 264, camPos.y + 164);
            panelInfo[35].position = Vector2f(camPos.x + 248, camPos.y + 164);

            infosText[4]->setPosition(camPos.x-244, camPos.y-130);
            infosText[7]->setPosition(camPos.x-244, camPos.y-86);
            infosText[8]->setPosition(camPos.x-244, camPos.y+124);

            liquidButton[0]->setPosition(camPos.x-48, camPos.y-12);
            liquidButton[1]->setPosition(camPos.x+112, camPos.y-12);
            liquidButton[2]->setPosition(camPos.x+272, camPos.y-12);
            liquidButton[3]->setPosition(camPos.x, camPos.y+108);

            infoSlider[4]->setParams(camPos.x - 102, camPos.y + 120, camPos.x - 102, camPos.x + 80);
            infoSlider[4]->setPosition((levelLiquidSpeed-1) * 20.222222);

            if (sectionb)
            {
                infosText[4]->setTextureRect(IntRect(0, 20, 72, 21));

                if (levelLiquidTypeb == 0)
                    liquidButton[3]->setTextureRect(IntRect(0, 54, 160, 54));
                else
                    liquidButton[3]->setTextureRect(IntRect(0, 0, 160, 54));
            }
            else
            {
                infosText[4]->setTextureRect(IntRect(0, 0, 72, 20));

                if (levelLiquidType == 0)
                    liquidButton[3]->setTextureRect(IntRect(0, 54, 160, 54));
                else
                    liquidButton[3]->setTextureRect(IntRect(0, 0, 160, 54));
            }

            break;
        case 4 :

            panelInfo[0].position = Vector2f(camPos.x - 264, camPos.y - 144);
            panelInfo[1].position = Vector2f(camPos.x - 248, camPos.y - 144);
            panelInfo[2].position = Vector2f(camPos.x - 248, camPos.y - 128);
            panelInfo[3].position = Vector2f(camPos.x - 264, camPos.y - 128);

            panelInfo[4].position = Vector2f(camPos.x - 248, camPos.y - 144);
            panelInfo[5].position = Vector2f(camPos.x + 248, camPos.y - 144);
            panelInfo[6].position = Vector2f(camPos.x + 248, camPos.y - 128);
            panelInfo[7].position = Vector2f(camPos.x - 248, camPos.y - 128);

            panelInfo[8].position = Vector2f(camPos.x + 248, camPos.y - 144);
            panelInfo[9].position = Vector2f(camPos.x + 264, camPos.y - 144);
            panelInfo[10].position = Vector2f(camPos.x + 264, camPos.y - 128);
            panelInfo[11].position = Vector2f(camPos.x + 248, camPos.y - 128);

            panelInfo[12].position = Vector2f(camPos.x - 264, camPos.y - 128);
            panelInfo[13].position = Vector2f(camPos.x - 248, camPos.y - 128);
            panelInfo[14].position = Vector2f(camPos.x - 248, camPos.y + 148);
            panelInfo[15].position = Vector2f(camPos.x - 264, camPos.y + 148);

            panelInfo[16].position = Vector2f(camPos.x - 248, camPos.y - 128);
            panelInfo[17].position = Vector2f(camPos.x + 248, camPos.y - 128);
            panelInfo[18].position = Vector2f(camPos.x + 248, camPos.y + 148);
            panelInfo[19].position = Vector2f(camPos.x - 248, camPos.y + 148);

            panelInfo[20].position = Vector2f(camPos.x + 248, camPos.y - 128);
            panelInfo[21].position = Vector2f(camPos.x + 264, camPos.y - 128);
            panelInfo[22].position = Vector2f(camPos.x + 264, camPos.y + 148);
            panelInfo[23].position = Vector2f(camPos.x + 248, camPos.y + 148);

            panelInfo[24].position = Vector2f(camPos.x - 264, camPos.y + 148);
            panelInfo[25].position = Vector2f(camPos.x - 248, camPos.y + 148);
            panelInfo[26].position = Vector2f(camPos.x - 248, camPos.y + 164);
            panelInfo[27].position = Vector2f(camPos.x - 264, camPos.y + 164);

            panelInfo[28].position = Vector2f(camPos.x - 248, camPos.y + 148);
            panelInfo[29].position = Vector2f(camPos.x + 248, camPos.y + 148);
            panelInfo[30].position = Vector2f(camPos.x + 248, camPos.y + 164);
            panelInfo[31].position = Vector2f(camPos.x - 248, camPos.y + 164);

            panelInfo[32].position = Vector2f(camPos.x + 248, camPos.y + 148);
            panelInfo[33].position = Vector2f(camPos.x + 264, camPos.y + 148);
            panelInfo[34].position = Vector2f(camPos.x + 264, camPos.y + 164);
            panelInfo[35].position = Vector2f(camPos.x + 248, camPos.y + 164);

            infosText[9]->setPosition(camPos.x-244, camPos.y-124);
            infosText[10]->setPosition(camPos.x-244, camPos.y+86);

            autoscrollButton[0]->setPosition(camPos.x+64, camPos.y-24);
            autoscrollButton[1]->setPosition(camPos.x+208, camPos.y-24);
            autoscrollButton[2]->setPosition(camPos.x+352, camPos.y-24);
            autoscrollButton[3]->setPosition(camPos.x+192, camPos.y+64);

            infoSlider[5]->setParams(camPos.x - 102, camPos.y + 120, camPos.x - 102, camPos.x + 80);
            infoSlider[5]->setPosition((levelAutoscrollSpeed-1.0f) * 36.400000);

            if (levelAutoscroll == 0)
                autoscrollButton[3]->setTextureRect(IntRect(0, 54, 160, 54));
            else
                autoscrollButton[3]->setTextureRect(IntRect(0, 0, 160, 54));

            break;
        case 5 :

            panelInfo[0].position = Vector2f(camPos.x - 236, camPos.y - 152);
            panelInfo[1].position = Vector2f(camPos.x - 220, camPos.y - 152);
            panelInfo[2].position = Vector2f(camPos.x - 220, camPos.y - 136);
            panelInfo[3].position = Vector2f(camPos.x - 236, camPos.y - 136);

            panelInfo[4].position = Vector2f(camPos.x - 220, camPos.y - 152);
            panelInfo[5].position = Vector2f(camPos.x + 284, camPos.y - 152);
            panelInfo[6].position = Vector2f(camPos.x + 284, camPos.y - 136);
            panelInfo[7].position = Vector2f(camPos.x - 220, camPos.y - 136);

            panelInfo[8].position = Vector2f(camPos.x + 284, camPos.y - 152);
            panelInfo[9].position = Vector2f(camPos.x + 300, camPos.y - 152);
            panelInfo[10].position = Vector2f(camPos.x + 300, camPos.y - 136);
            panelInfo[11].position = Vector2f(camPos.x + 284, camPos.y - 136);

            panelInfo[12].position = Vector2f(camPos.x - 236, camPos.y - 136);
            panelInfo[13].position = Vector2f(camPos.x - 220, camPos.y - 136);
            panelInfo[14].position = Vector2f(camPos.x - 220, camPos.y + 216);
            panelInfo[15].position = Vector2f(camPos.x - 236, camPos.y + 216);

            panelInfo[16].position = Vector2f(camPos.x - 220, camPos.y - 136);
            panelInfo[17].position = Vector2f(camPos.x + 284, camPos.y - 136);
            panelInfo[18].position = Vector2f(camPos.x + 284, camPos.y + 216);
            panelInfo[19].position = Vector2f(camPos.x - 220, camPos.y + 216);

            panelInfo[20].position = Vector2f(camPos.x + 284, camPos.y - 136);
            panelInfo[21].position = Vector2f(camPos.x + 300, camPos.y - 136);
            panelInfo[22].position = Vector2f(camPos.x + 300, camPos.y + 216);
            panelInfo[23].position = Vector2f(camPos.x + 284, camPos.y + 216);

            panelInfo[24].position = Vector2f(camPos.x - 236, camPos.y + 216);
            panelInfo[25].position = Vector2f(camPos.x - 220, camPos.y + 216);
            panelInfo[26].position = Vector2f(camPos.x - 220, camPos.y + 232);
            panelInfo[27].position = Vector2f(camPos.x - 236, camPos.y + 232);

            panelInfo[28].position = Vector2f(camPos.x - 220, camPos.y + 216);
            panelInfo[29].position = Vector2f(camPos.x + 284, camPos.y + 216);
            panelInfo[30].position = Vector2f(camPos.x + 284, camPos.y + 232);
            panelInfo[31].position = Vector2f(camPos.x - 220, camPos.y + 232);

            panelInfo[32].position = Vector2f(camPos.x + 284, camPos.y + 216);
            panelInfo[33].position = Vector2f(camPos.x + 300, camPos.y + 216);
            panelInfo[34].position = Vector2f(camPos.x + 300, camPos.y + 232);
            panelInfo[35].position = Vector2f(camPos.x + 284, camPos.y + 232);

            infosText[11]->setPosition(camPos.x-186, camPos.y-144);

            bowserCheckButton[0]->setPosition(camPos.x - 210, camPos.y - 124);
            bowserCheckButton[1]->setPosition(camPos.x - 210, camPos.y - 78);
            bowserCheckButton[2]->setPosition(camPos.x - 210, camPos.y - 32);
            bowserCheckButton[3]->setPosition(camPos.x - 210, camPos.y + 14);
            bowserCheckButton[4]->setPosition(camPos.x - 210, camPos.y + 60);
            bowserCheckButton[5]->setPosition(camPos.x - 210, camPos.y + 106);
            bowserCheckButton[6]->setPosition(camPos.x + 56, camPos.y + 198);

            bowserCheckButton[0]->setChecked(bowserAttacks[0]);
            bowserCheckButton[1]->setChecked(bowserAttacks[1]);
            bowserCheckButton[2]->setChecked(bowserAttacks[2]);
            bowserCheckButton[3]->setChecked(bowserAttacks[3]);
            bowserCheckButton[4]->setChecked(bowserAttacks[4]);
            bowserCheckButton[5]->setChecked(bowserAttacks[5]);
            bowserCheckButton[6]->setChecked(bowserMusic);

            infoSlider[6]->setParams(camPos.x - 112, camPos.y - 136, camPos.x - 112, camPos.x + 38);
            infoSlider[7]->setParams(camPos.x + 100, camPos.y - 136, camPos.x + 100, camPos.x + 250);
            infoSlider[8]->setParams(camPos.x - 112, camPos.y - 90, camPos.x - 112, camPos.x + 38);
            infoSlider[9]->setParams(camPos.x + 100, camPos.y - 90, camPos.x + 100, camPos.x + 250);
            infoSlider[10]->setParams(camPos.x - 112, camPos.y - 44, camPos.x - 112, camPos.x + 38);
            infoSlider[11]->setParams(camPos.x + 100, camPos.y - 44, camPos.x + 100, camPos.x + 250);
            infoSlider[12]->setParams(camPos.x - 112, camPos.y + 2, camPos.x - 112, camPos.x + 38);
            infoSlider[13]->setParams(camPos.x + 100, camPos.y + 2, camPos.x + 100, camPos.x + 250);
            infoSlider[14]->setParams(camPos.x - 112, camPos.y + 48, camPos.x - 112, camPos.x + 38);
            infoSlider[15]->setParams(camPos.x + 100, camPos.y + 48, camPos.x + 100, camPos.x + 250);
            infoSlider[16]->setParams(camPos.x - 112, camPos.y + 94, camPos.x - 112, camPos.x + 38);
            infoSlider[17]->setParams(camPos.x + 100, camPos.y + 94, camPos.x + 100, camPos.x + 250);
            infoSlider[18]->setParams(camPos.x - 112, camPos.y + 140, camPos.x - 112, camPos.x + 70);

            infoSlider[6]->setPosition((bowserSpeeds[0]-5) * 10.000000);
            infoSlider[7]->setPosition((bowserFrequences[0]-5) * 15.000000);
            infoSlider[8]->setPosition((bowserSpeeds[1]-1) * 16.666666);
            infoSlider[9]->setPosition((bowserFrequences[1]-5) * 6.000000);
            infoSlider[10]->setPosition((bowserSpeeds[2]-5) * 10.000000);
            infoSlider[11]->setPosition((bowserFrequences[2]-10) * 1.666666);
            infoSlider[12]->setPosition((bowserSpeeds[3]-5) * 10.000000);
            infoSlider[13]->setPosition((bowserFrequences[3]-10) * 1.666666);
            infoSlider[14]->setPosition((bowserSpeeds[4]-5) * 10.000000);
            infoSlider[15]->setPosition((bowserFrequences[4]-10) * 1.666666);
            infoSlider[16]->setPosition((bowserSpeeds[5]-5) * 10.000000);
            infoSlider[17]->setPosition((bowserFrequences[5]-10) * 3.000000);
            infoSlider[18]->setPosition(bowserTrail * 9.100000);

            editButton[6]->setPosition(camPos.x - 48, camPos.y + 198);
            editButton[7]->setPosition(camPos.x + 180, camPos.y + 550);

            break;
    }
}

static void ScrollUp()
{
    if (elementsLine > 1 && elementsLine <= 7)
    {
        elementsLine--;

        lastLine_platforms--;

        FreezeAllButtons();
    }
    else if (elementsLine > 8 && elementsLine <= 12)
    {
        elementsLine--;

        lastLine_bonuses--;

        FreezeAllButtons();
    }
    else if (elementsLine > 13 && elementsLine <= 18)
    {
        elementsLine--;

        lastLine_sceneries--;

        FreezeAllButtons();
    }
    else if (elementsLine > 19 && elementsLine <= 26)
    {
        elementsLine--;

        lastLine_pipes--;

        FreezeAllButtons();
    }
    else if (elementsLine > 27 && elementsLine <= 40)
    {
        elementsLine--;

        lastLine_enemies--;

        FreezeAllButtons();
    }
    else if (elementsLine > 41 && elementsLine <= 51)
    {
        elementsLine--;

        lastLine_hazards--;

        FreezeAllButtons();
    }
}

static void ScrollDown()
{
    if (elementsLine >= 1 && elementsLine < 7)
    {
        elementsLine++;

        lastLine_platforms++;

        FreezeAllButtons();
    }
    else if (elementsLine >= 8 && elementsLine < 12)
    {
        elementsLine++;

        lastLine_bonuses++;

        FreezeAllButtons();
    }
    else if (elementsLine >= 13 && elementsLine < 18)
    {
        elementsLine++;

        lastLine_sceneries++;

        FreezeAllButtons();
    }
    else if (elementsLine >= 19 && elementsLine < 26)
    {
        elementsLine++;

        lastLine_pipes++;

        FreezeAllButtons();
    }
    else if (elementsLine >= 27 && elementsLine < 40)
    {
        elementsLine++;

        lastLine_enemies++;

        FreezeAllButtons();
    }
    else if (elementsLine >= 41 && elementsLine < 51)
    {
        elementsLine++;

        lastLine_hazards++;

        FreezeAllButtons();
    }
}

static void FreezeAllButtons()
{
    for (register unsigned int i = 0; i < 3; i++)
        elementsEsssential[i]->freeze();

    for (register unsigned int i = 0; i < 35; i++)
        elementsPlatforms[i]->freeze();

    for (register unsigned int i = 0; i < 30; i++)
        elementsBonus[i]->freeze();

    for (register unsigned int i = 0; i < 36; i++)
        elementsPipes[i]->freeze();

    for (register unsigned int i = 0; i < 26; i++)
        elementsSceneries[i]->freeze();

    for (register unsigned int i = 0; i < 57; i++)
        elementsEnemies[i]->freeze();

    for (register unsigned int i = 0; i < 46; i++)
        elementsHazards[i]->freeze();
}

static void ChangeLayerTo_Back()
{
    layerNumb = 0;

    if (!listTile1.empty())
    {
        for (list<Tile>::iterator it = listTile1.begin(); it != listTile1.end(); it++)
            it->setColor(Color(255, 255, 255));
    }

    if (!listTile2.empty())
    {
        for (list<Tile>::iterator it = listTile2.begin(); it != listTile2.end(); it++)
            it->setColor(Color(128, 128, 128));
    }

    if (!listTile3.empty())
    {
        for (list<Tile>::iterator it = listTile3.begin(); it != listTile3.end(); it++)
            it->setColor(Color(128, 128, 128));
    }

    if (!listTileb1.empty())
    {
        for (list<Tile>::iterator it = listTileb1.begin(); it != listTileb1.end(); it++)
            it->setColor(Color(255, 255, 255));
    }

    if (!listTileb2.empty())
    {
        for (list<Tile>::iterator it = listTileb2.begin(); it != listTileb2.end(); it++)
            it->setColor(Color(128, 128, 128));
    }

    if (!listTileb3.empty())
    {
        for (list<Tile>::iterator it = listTileb3.begin(); it != listTileb3.end(); it++)
            it->setColor(Color(128, 128, 128));
    }
}

static void ChangeLayerTo_Middle()
{
    layerNumb = 1;

    if (!listTile1.empty())
    {
        for (list<Tile>::iterator it = listTile1.begin(); it != listTile1.end(); it++)
        {
            if (currentSelection != TILE && currentSelection != PIPES)
                it->setColor(Color(128, 128, 128));
            else
                it->setColor(Color(128, 128, 128));
        }
    }

    if (!listTile2.empty())
    {
        for (list<Tile>::iterator it = listTile2.begin(); it != listTile2.end(); it++)
            it->setColor(Color(255, 255, 255));
    }

    if (!listTile3.empty())
    {
        for (list<Tile>::iterator it = listTile3.begin(); it != listTile3.end(); it++)
        {
            if (currentSelection != TILE && currentSelection != PIPES)
                it->setColor(Color(128, 128, 128));
            else
                it->setColor(Color(128, 128, 128));
        }
    }

    if (!listTileb1.empty())
    {
        for (list<Tile>::iterator it = listTileb1.begin(); it != listTileb1.end(); it++)
        {
            if (currentSelection != TILE && currentSelection != PIPES)
                it->setColor(Color(128, 128, 128));
            else
                it->setColor(Color(128, 128, 128));
        }
    }

    if (!listTileb2.empty())
    {
        for (list<Tile>::iterator it = listTileb2.begin(); it != listTileb2.end(); it++)
            it->setColor(Color(255, 255, 255));
    }

    if (!listTileb3.empty())
    {
        for (list<Tile>::iterator it = listTileb3.begin(); it != listTileb3.end(); it++)
        {
            if (currentSelection != TILE && currentSelection != PIPES)
                it->setColor(Color(128, 128, 128));
            else
                it->setColor(Color(128, 128, 128));
        }
    }
}

static void ChangeLayerTo_Front()
{
    layerNumb = 2;

    if (!listTile1.empty())
    {
        for (list<Tile>::iterator it = listTile1.begin(); it != listTile1.end(); it++)
            it->setColor(Color(128, 128, 128));
    }

    if (!listTile2.empty())
    {
        for (list<Tile>::iterator it = listTile2.begin(); it != listTile2.end(); it++)
            it->setColor(Color(128, 128, 128));
    }

    if (!listTile3.empty())
    {
        for (list<Tile>::iterator it = listTile3.begin(); it != listTile3.end(); it++)
            it->setColor(Color(255, 255, 255));
    }

    if (!listTileb1.empty())
    {
        for (list<Tile>::iterator it = listTileb1.begin(); it != listTileb1.end(); it++)
            it->setColor(Color(128, 128, 128));
    }

    if (!listTileb2.empty())
    {
        for (list<Tile>::iterator it = listTileb2.begin(); it != listTileb2.end(); it++)
            it->setColor(Color(128, 128, 128));
    }

    if (!listTileb3.empty())
    {
        for (list<Tile>::iterator it = listTileb3.begin(); it != listTileb3.end(); it++)
            it->setColor(Color(255, 255, 255));
    }
}

static void Category_Essentials()
{
    elementsLine = 0;

    FreezeAllButtons();
}

static void Category_Platforms()
{
    elementsLine = lastLine_platforms;

    FreezeAllButtons();
}

static void Category_Bonus()
{
    elementsLine = lastLine_bonuses;

    FreezeAllButtons();
}

static void Category_Tiles()
{
    tileSelection->setSize(Vector2f(32, 32));
    tileSelection->setFillColor(Color(255, 255, 0, 128));

    tilesetSpr->setPosition(camPos.x-288, camPos.y-224);
    tilesetRect->setPosition(camPos.x-288, camPos.y-224);

    returnButton->setPosition(camPos.x-282, camPos.y+206);

    menuText[0]->setPosition(camPos.x, camPos.y+208);

    for (register unsigned int i = 0; i < 3; i++)
        elementsEsssential[i]->Unselected();

    for (register unsigned int i = 0; i < 35; i++)
        elementsPlatforms[i]->Unselected();

    for (register unsigned int i = 0; i < 30; i++)
        elementsBonus[i]->Unselected();

    for (register unsigned int i = 0; i < 36; i++)
        elementsPipes[i]->Unselected();

    for (register unsigned int i = 0; i < 26; i++)
        elementsSceneries[i]->Unselected();

    for (register unsigned int i = 0; i < 57; i++)
        elementsEnemies[i]->Unselected();

    for (register unsigned int i = 0; i < 46; i++)
        elementsHazards[i]->Unselected();

    layerButton[0]->setTextureRect(IntRect(0, 0, 26, 26));
    layerButton[1]->setTextureRect(IntRect(26, 0, 26, 26));
    layerButton[2]->setTextureRect(IntRect(52, 0, 26, 26));

    currentSelection = NONE;
    currentMenu = TILESET;
}

static void Category_Pipes()
{
    elementsLine = lastLine_sceneries;

    FreezeAllButtons();
}

static void Category_Sceneries()
{
    elementsLine = lastLine_pipes;

    FreezeAllButtons();
}

static void Category_Enemies()
{
    elementsLine = lastLine_enemies;

    FreezeAllButtons();
}

static void Category_Hazards()
{
    elementsLine = lastLine_hazards;

    FreezeAllButtons();
}

static void Category_Warps()
{
    for (register unsigned int i = 0; i < 3; i++)
        elementsEsssential[i]->Unselected();

    for (register unsigned int i = 0; i < 35; i++)
        elementsPlatforms[i]->Unselected();

    for (register unsigned int i = 0; i < 30; i++)
        elementsBonus[i]->Unselected();

    for (register unsigned int i = 0; i < 36; i++)
        elementsPipes[i]->Unselected();

    for (register unsigned int i = 0; i < 26; i++)
        elementsSceneries[i]->Unselected();

    for (register unsigned int i = 0; i < 57; i++)
        elementsEnemies[i]->Unselected();

    for (register unsigned int i = 0; i < 46; i++)
        elementsHazards[i]->Unselected();

    itemHandled->setTexture(*warpsTex);
    itemHandled->setColor(Color(255, 255, 255, 128));
    itemHandled->setOrigin(0, 0);
    itemHandled->setRotation(0);

    if (lastWarp == NULL)
        itemHandled->setTextureRect(IntRect(0, 0, 64, 64));
    else
        itemHandled->setTextureRect(IntRect(64, 0, 64, 64));

    layerButton[0]->setTextureRect(IntRect(0, 26, 26, 26));
    layerButton[1]->setTextureRect(IntRect(26, 26, 26, 26));
    layerButton[2]->setTextureRect(IntRect(52, 26, 26, 26));

    currentSelection = WARPS;
}

static void Prefs_Music()
{
    if (editorMusic)
        FMOD_Channel_Stop(musicChannel);

    lastButton = 0;

    menuText[1]->setPosition(camPos.x, camPos.y-226);

    musicButton[0]->setPosition(camPos.x-210, camPos.y+200);
    musicButton[1]->setPosition(camPos.x-210, camPos.y+233);
    musicButton[2]->setPosition(camPos.x-210, camPos.y+266);
    musicButton[3]->setPosition(camPos.x-210, camPos.y+299);
    musicButton[4]->setPosition(camPos.x-210, camPos.y+332);
    musicButton[5]->setPosition(camPos.x-210, camPos.y+365);
    musicButton[6]->setPosition(camPos.x-210, camPos.y+398);
    musicButton[7]->setPosition(camPos.x-210, camPos.y+431);
    musicButton[8]->setPosition(camPos.x-210, camPos.y+464);
    musicButton[9]->setPosition(camPos.x-210, camPos.y+497);
    musicButton[10]->setPosition(camPos.x-210, camPos.y+530);
    musicButton[11]->setPosition(camPos.x, camPos.y+200);
    musicButton[12]->setPosition(camPos.x, camPos.y+233);
    musicButton[13]->setPosition(camPos.x, camPos.y+266);
    musicButton[14]->setPosition(camPos.x, camPos.y+299);
    musicButton[15]->setPosition(camPos.x, camPos.y+332);
    musicButton[16]->setPosition(camPos.x, camPos.y+365);
    musicButton[17]->setPosition(camPos.x, camPos.y+398);
    musicButton[18]->setPosition(camPos.x, camPos.y+431);
    musicButton[19]->setPosition(camPos.x, camPos.y+464);
    musicButton[20]->setPosition(camPos.x, camPos.y+497);
    musicButton[21]->setPosition(camPos.x, camPos.y+530);
    musicButton[22]->setPosition(camPos.x+210, camPos.y+200);

    returnButton->setPosition(camPos.x+282, camPos.y+206);

    currentMenu = MUSIC;
}

static void Prefs_Background()
{
    menuText[2]->setPosition(camPos.x, camPos.y-226);

    panelInfo[0].position = Vector2f(camPos.x - 292, camPos.y - 188);
    panelInfo[1].position = Vector2f(camPos.x - 278, camPos.y - 188);
    panelInfo[2].position = Vector2f(camPos.x - 278, camPos.y - 172);
    panelInfo[3].position = Vector2f(camPos.x - 292, camPos.y - 172);

    panelInfo[4].position = Vector2f(camPos.x - 278, camPos.y - 188);
    panelInfo[5].position = Vector2f(camPos.x + 278, camPos.y - 188);
    panelInfo[6].position = Vector2f(camPos.x + 278, camPos.y - 172);
    panelInfo[7].position = Vector2f(camPos.x - 278, camPos.y - 172);

    panelInfo[8].position = Vector2f(camPos.x + 278, camPos.y - 188);
    panelInfo[9].position = Vector2f(camPos.x + 292, camPos.y - 188);
    panelInfo[10].position = Vector2f(camPos.x + 292, camPos.y - 172);
    panelInfo[11].position = Vector2f(camPos.x + 278, camPos.y - 172);

    panelInfo[12].position = Vector2f(camPos.x - 292, camPos.y - 172);
    panelInfo[13].position = Vector2f(camPos.x - 278, camPos.y - 172);
    panelInfo[14].position = Vector2f(camPos.x - 278, camPos.y + 214);
    panelInfo[15].position = Vector2f(camPos.x - 292, camPos.y + 214);

    panelInfo[16].position = Vector2f(camPos.x - 278, camPos.y - 172);
    panelInfo[17].position = Vector2f(camPos.x + 278, camPos.y - 172);
    panelInfo[18].position = Vector2f(camPos.x + 278, camPos.y + 214);
    panelInfo[19].position = Vector2f(camPos.x - 278, camPos.y + 214);

    panelInfo[20].position = Vector2f(camPos.x + 278, camPos.y - 172);
    panelInfo[21].position = Vector2f(camPos.x + 292, camPos.y - 172);
    panelInfo[22].position = Vector2f(camPos.x + 292, camPos.y + 214);
    panelInfo[23].position = Vector2f(camPos.x + 278, camPos.y + 214);

    panelInfo[24].position = Vector2f(camPos.x - 292, camPos.y + 214);
    panelInfo[25].position = Vector2f(camPos.x - 278, camPos.y + 214);
    panelInfo[26].position = Vector2f(camPos.x - 278, camPos.y + 230);
    panelInfo[27].position = Vector2f(camPos.x - 292, camPos.y + 230);

    panelInfo[28].position = Vector2f(camPos.x - 278, camPos.y + 214);
    panelInfo[29].position = Vector2f(camPos.x + 278, camPos.y + 214);
    panelInfo[30].position = Vector2f(camPos.x + 278, camPos.y + 230);
    panelInfo[31].position = Vector2f(camPos.x - 278, camPos.y + 230);

    panelInfo[32].position = Vector2f(camPos.x + 278, camPos.y + 214);
    panelInfo[33].position = Vector2f(camPos.x + 292, camPos.y + 214);
    panelInfo[34].position = Vector2f(camPos.x + 292, camPos.y + 230);
    panelInfo[35].position = Vector2f(camPos.x + 278, camPos.y + 230);

    backgroundButton[0]->setPosition(camPos.x-8, camPos.y+320);
    backgroundButton[1]->setPosition(camPos.x+191, camPos.y+320);
    backgroundButton[2]->setPosition(camPos.x-71, camPos.y);
    backgroundButton[3]->setPosition(camPos.x+69, camPos.y);
    backgroundButton[4]->setPosition(camPos.x+209, camPos.y);
    backgroundButton[5]->setPosition(camPos.x+349, camPos.y);
    backgroundButton[6]->setPosition(camPos.x-71, camPos.y+80);
    backgroundButton[7]->setPosition(camPos.x+69, camPos.y+80);
    backgroundButton[8]->setPosition(camPos.x+209, camPos.y+80);
    backgroundButton[9]->setPosition(camPos.x+349, camPos.y+80);
    backgroundButton[10]->setPosition(camPos.x-71, camPos.y+160);
    backgroundButton[11]->setPosition(camPos.x+69, camPos.y+160);
    backgroundButton[12]->setPosition(camPos.x+209, camPos.y+160);
    backgroundButton[13]->setPosition(camPos.x+349, camPos.y+160);
    backgroundButton[14]->setPosition(camPos.x+69, camPos.y+240);
    backgroundButton[15]->setPosition(camPos.x+209, camPos.y+240);

    returnButton->setPosition(camPos.x-282, camPos.y+206);

    if (sectionb)
    {
        gradientPreview[0].color = topColorb;
        gradientPreview[1].color = topColorb;
        gradientPreview[2].color = bottomColorb;
        gradientPreview[3].color = bottomColorb;
    }
    else
    {
        gradientPreview[0].color = topColor;
        gradientPreview[1].color = topColor;
        gradientPreview[2].color = bottomColor;
        gradientPreview[3].color = bottomColor;
    }

    currentMenu = BACKGROUND;
}

static void Prefs_Gradient()
{
    panelInfo[0].position = Vector2f(camPos.x - 308, camPos.y - 110);
    panelInfo[1].position = Vector2f(camPos.x - 292, camPos.y - 110);
    panelInfo[2].position = Vector2f(camPos.x - 292, camPos.y - 94);
    panelInfo[3].position = Vector2f(camPos.x - 308, camPos.y - 94);

    panelInfo[4].position = Vector2f(camPos.x - 292, camPos.y - 110);
    panelInfo[5].position = Vector2f(camPos.x + 292, camPos.y - 110);
    panelInfo[6].position = Vector2f(camPos.x + 292, camPos.y - 94);
    panelInfo[7].position = Vector2f(camPos.x - 292, camPos.y - 94);

    panelInfo[8].position = Vector2f(camPos.x + 292, camPos.y - 110);
    panelInfo[9].position = Vector2f(camPos.x + 308, camPos.y - 110);
    panelInfo[10].position = Vector2f(camPos.x + 308, camPos.y - 94);
    panelInfo[11].position = Vector2f(camPos.x + 292, camPos.y - 94);

    panelInfo[12].position = Vector2f(camPos.x - 308, camPos.y - 94);
    panelInfo[13].position = Vector2f(camPos.x - 292, camPos.y - 94);
    panelInfo[14].position = Vector2f(camPos.x - 292, camPos.y + 176);
    panelInfo[15].position = Vector2f(camPos.x - 308, camPos.y + 176);

    panelInfo[16].position = Vector2f(camPos.x - 292, camPos.y - 94);
    panelInfo[17].position = Vector2f(camPos.x + 292, camPos.y - 94);
    panelInfo[18].position = Vector2f(camPos.x + 292, camPos.y + 176);
    panelInfo[19].position = Vector2f(camPos.x - 292, camPos.y + 176);

    panelInfo[20].position = Vector2f(camPos.x + 292, camPos.y - 94);
    panelInfo[21].position = Vector2f(camPos.x + 308, camPos.y - 94);
    panelInfo[22].position = Vector2f(camPos.x + 308, camPos.y + 176);
    panelInfo[23].position = Vector2f(camPos.x + 292, camPos.y + 176);

    panelInfo[24].position = Vector2f(camPos.x - 308, camPos.y + 176);
    panelInfo[25].position = Vector2f(camPos.x - 292, camPos.y + 176);
    panelInfo[26].position = Vector2f(camPos.x - 292, camPos.y + 192);
    panelInfo[27].position = Vector2f(camPos.x - 308, camPos.y + 192);

    panelInfo[28].position = Vector2f(camPos.x - 292, camPos.y + 176);
    panelInfo[29].position = Vector2f(camPos.x + 292, camPos.y + 176);
    panelInfo[30].position = Vector2f(camPos.x + 292, camPos.y + 192);
    panelInfo[31].position = Vector2f(camPos.x - 292, camPos.y + 192);

    panelInfo[32].position = Vector2f(camPos.x + 292, camPos.y + 176);
    panelInfo[33].position = Vector2f(camPos.x + 308, camPos.y + 176);
    panelInfo[34].position = Vector2f(camPos.x + 308, camPos.y + 192);
    panelInfo[35].position = Vector2f(camPos.x + 292, camPos.y + 192);

    tileSelection->setSize(Vector2f(159, 78));
    tileSelection->setFillColor(Color(128, 255, 255, 128));

    menuText[3]->setPosition(camPos.x, camPos.y-226);
    menuText[4]->setPosition(camPos.x, camPos.y+158);

    gradientButton[0]->setPosition(camPos.x+210, camPos.y+1);
    gradientButton[1]->setPosition(camPos.x+210, camPos.y+67);
    gradientButton[2]->setPosition(camPos.x+210, camPos.y+132);

    gradientElements[0]->setPosition(camPos.x-290, camPos.y-80);
    gradientElements[1]->setPosition(camPos.x-290, camPos.y+24);
    gradientElements[2]->setPosition(camPos.x-96, camPos.y-80);

    returnButton->setPosition(camPos.x-282, camPos.y+206);

    gradientColor[0]->setPosition(camPos.x-288, camPos.y-78);
    gradientColor[1]->setPosition(camPos.x-288, camPos.y+26);

    gradientPreview[0].position = Vector2f(camPos.x-94, camPos.y-78);
    gradientPreview[1].position = Vector2f(camPos.x+64, camPos.y-78);
    gradientPreview[2].position = Vector2f(camPos.x+64, camPos.y+104);
    gradientPreview[3].position = Vector2f(camPos.x-94, camPos.y+104);

    currentMenu = GRADIENT;
}

static void Prefs_Effects()
{
    menuText[5]->setPosition(camPos.x, camPos.y-226);

    panelInfo[0].position = Vector2f(camPos.x - 308, camPos.y - 176);
    panelInfo[1].position = Vector2f(camPos.x - 292, camPos.y - 176);
    panelInfo[2].position = Vector2f(camPos.x - 292, camPos.y - 160);
    panelInfo[3].position = Vector2f(camPos.x - 308, camPos.y - 160);

    panelInfo[4].position = Vector2f(camPos.x - 292, camPos.y - 176);
    panelInfo[5].position = Vector2f(camPos.x + 292, camPos.y - 176);
    panelInfo[6].position = Vector2f(camPos.x + 292, camPos.y - 160);
    panelInfo[7].position = Vector2f(camPos.x - 292, camPos.y - 160);

    panelInfo[8].position = Vector2f(camPos.x + 292, camPos.y - 176);
    panelInfo[9].position = Vector2f(camPos.x + 308, camPos.y - 176);
    panelInfo[10].position = Vector2f(camPos.x + 308, camPos.y - 160);
    panelInfo[11].position = Vector2f(camPos.x + 292, camPos.y - 160);

    panelInfo[12].position = Vector2f(camPos.x - 308, camPos.y - 160);
    panelInfo[13].position = Vector2f(camPos.x - 292, camPos.y - 160);
    panelInfo[14].position = Vector2f(camPos.x - 292, camPos.y + 204);
    panelInfo[15].position = Vector2f(camPos.x - 308, camPos.y + 204);

    panelInfo[16].position = Vector2f(camPos.x - 292, camPos.y - 160);
    panelInfo[17].position = Vector2f(camPos.x + 292, camPos.y - 160);
    panelInfo[18].position = Vector2f(camPos.x + 292, camPos.y + 204);
    panelInfo[19].position = Vector2f(camPos.x - 292, camPos.y + 204);

    panelInfo[20].position = Vector2f(camPos.x + 292, camPos.y - 160);
    panelInfo[21].position = Vector2f(camPos.x + 308, camPos.y - 160);
    panelInfo[22].position = Vector2f(camPos.x + 308, camPos.y + 204);
    panelInfo[23].position = Vector2f(camPos.x + 292, camPos.y + 204);

    panelInfo[24].position = Vector2f(camPos.x - 308, camPos.y + 204);
    panelInfo[25].position = Vector2f(camPos.x - 292, camPos.y + 204);
    panelInfo[26].position = Vector2f(camPos.x - 292, camPos.y + 220);
    panelInfo[27].position = Vector2f(camPos.x - 308, camPos.y + 220);

    panelInfo[28].position = Vector2f(camPos.x - 292, camPos.y + 204);
    panelInfo[29].position = Vector2f(camPos.x + 292, camPos.y + 204);
    panelInfo[30].position = Vector2f(camPos.x + 292, camPos.y + 220);
    panelInfo[31].position = Vector2f(camPos.x - 292, camPos.y + 220);

    panelInfo[32].position = Vector2f(camPos.x + 292, camPos.y + 204);
    panelInfo[33].position = Vector2f(camPos.x + 308, camPos.y + 204);
    panelInfo[34].position = Vector2f(camPos.x + 308, camPos.y + 220);
    panelInfo[35].position = Vector2f(camPos.x + 292, camPos.y + 220);

    effectElements[0]->setPosition(camPos.x-180, camPos.y-116);
    effectElements[1]->setPosition(camPos.x, camPos.y-116);
    effectElements[2]->setPosition(camPos.x+180, camPos.y-116);
    effectElements[3]->setPosition(camPos.x-180, camPos.y-30);
    effectElements[4]->setPosition(camPos.x, camPos.y-30);
    effectElements[5]->setPosition(camPos.x+180, camPos.y-30);

    effectCheckButton[0]->setPosition(camPos.x-268, camPos.y-116);
    effectCheckButton[1]->setPosition(camPos.x-88, camPos.y-116);
    effectCheckButton[2]->setPosition(camPos.x+92, camPos.y-116);
    effectCheckButton[3]->setPosition(camPos.x-268, camPos.y-30);
    effectCheckButton[4]->setPosition(camPos.x-88, camPos.y-30);
    effectCheckButton[5]->setPosition(camPos.x+92, camPos.y-30);

    effectButton[0]->setPosition(camPos.x-206, camPos.y+190);
    effectButton[1]->setPosition(camPos.x, camPos.y+190);
    effectButton[2]->setPosition(camPos.x+206, camPos.y+190);
    effectButton[3]->setPosition(camPos.x, camPos.y+280);

    returnButton->setPosition(camPos.x-282, camPos.y+206);

    if (sectionb)
    {
        gradientPreview[0].color = topColorb;
        gradientPreview[1].color = topColorb;
        gradientPreview[2].color = bottomColorb;
        gradientPreview[3].color = bottomColorb;

        switch (levelbEffectb)
        {
            case 1 :
                effectCheckButton[0]->setChecked(true);
                effectCheckButton[1]->setChecked(false);
                effectCheckButton[2]->setChecked(false);
                break;
            case 2 :
                effectCheckButton[0]->setChecked(false);
                effectCheckButton[1]->setChecked(true);
                effectCheckButton[2]->setChecked(false);
                break;
            case 3 :
                effectCheckButton[0]->setChecked(false);
                effectCheckButton[1]->setChecked(false);
                effectCheckButton[2]->setChecked(true);
                break;
            default :
                effectCheckButton[0]->setChecked(false);
                effectCheckButton[1]->setChecked(false);
                effectCheckButton[2]->setChecked(false);
                break;
        }
    }
    else
    {
        gradientPreview[0].color = topColor;
        gradientPreview[1].color = topColor;
        gradientPreview[2].color = bottomColor;
        gradientPreview[3].color = bottomColor;

        switch (levelEffectb)
        {
            case 1 :
                effectCheckButton[0]->setChecked(true);
                effectCheckButton[1]->setChecked(false);
                effectCheckButton[2]->setChecked(false);
                break;
            case 2 :
                effectCheckButton[0]->setChecked(false);
                effectCheckButton[1]->setChecked(true);
                effectCheckButton[2]->setChecked(false);
                break;
            case 3 :
                effectCheckButton[0]->setChecked(false);
                effectCheckButton[1]->setChecked(false);
                effectCheckButton[2]->setChecked(true);
                break;
            default :
                effectCheckButton[0]->setChecked(false);
                effectCheckButton[1]->setChecked(false);
                effectCheckButton[2]->setChecked(false);
                break;
        }
    }

    currentMenu = EFFECTS;
}

static void Prefs_Title()
{
    currentMenu = INFOS;

    InfoButtons[0]->setPosition(camPos.x - 250, camPos.y - 204);
    InfoButtons[1]->setPosition(camPos.x - 150, camPos.y - 204);
    InfoButtons[2]->setPosition(camPos.x - 50, camPos.y - 204);
    InfoButtons[3]->setPosition(camPos.x + 50, camPos.y - 204);
    InfoButtons[4]->setPosition(camPos.x + 150, camPos.y - 204);
    InfoButtons[5]->setPosition(camPos.x + 250, camPos.y - 204);

    returnButton->setPosition(camPos.x-282, camPos.y+206);

    RecalculateInfos(currentInfo);
}

static void Prefs_Section()
{
    if (sectionb)
    {
        Vector2i temp;

        backGradient[0].color = topColor;
        backGradient[1].color = topColor;
        backGradient[2].color = bottomColor;
        backGradient[3].color = bottomColor;

        switch (levelGradient)
        {
            case 0 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScale.x * 640, 0);
                backGradient[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
                backGradient[3].position = Vector2f(0, roomScale.y * 480);
                break;
            case 1 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScale.x * 640, 0);
                backGradient[2].position = Vector2f(roomScale.x * 640, 480);
                backGradient[3].position = Vector2f(0, 480);
                break;
            case 2 :
                backGradient[0].position = Vector2f(0, (roomScale.y-1) * 480);
                backGradient[1].position = Vector2f(roomScale.x * 640, (roomScale.y-1) * 480);
                backGradient[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
                backGradient[3].position = Vector2f(0, roomScale.y * 480);
                break;
        }

        background[0]->setPosition(0, (roomScale.y * 480) - 274);
        background[1]->setPosition(0, (roomScale.y * 480) - 274);
        background[2]->setPosition(0, (roomScale.y * 480) - 274);
        background[3]->setPosition(0, (roomScale.y * 480) - 178);
        background[4]->setPosition(0, (roomScale.y * 480) - 165);
        background[5]->setPosition(0, (roomScale.y * 480) - 101);
        background[6]->setPosition(0, (roomScale.y * 480) - 320);
        background[7]->setPosition(0, (roomScale.y * 480) - 320);
        background[14]->setPosition(0, (roomScale.y * 480) - 274);
        background[15]->setPosition(0, (roomScale.y * 480) - 274);

        background[0]->setSize(Vector2f(roomScale.x * 640, 274));
        background[1]->setSize(Vector2f(roomScale.x * 640, 274));
        background[2]->setSize(Vector2f(roomScale.x * 640, 274));
        background[3]->setSize(Vector2f(roomScale.x * 640, 178));
        background[4]->setSize(Vector2f(roomScale.x * 640, 165));
        background[5]->setSize(Vector2f(roomScale.x * 640, 101));
        background[6]->setSize(Vector2f(roomScale.x * 640, 320));
        background[7]->setSize(Vector2f(roomScale.x * 640, 320));
        background[8]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[9]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[10]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[11]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[14]->setSize(Vector2f(roomScale.x * 640, 274));
        background[15]->setSize(Vector2f(roomScale.x * 640, 274));

        if (background[12] != NULL)
            background[12]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));

        background[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[1]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[2]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[3]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 178));
        background[4]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 165));
        background[5]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 101));
        background[6]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 320));
        background[7]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 320));
        background[8]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[9]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[10]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[11]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[14]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[15]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));

        if (background[12] != NULL)
            background[12]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));

        effectClouds[0]->setSize(Vector2f(roomScale.x * 640, 63));
        effectClouds[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));

        effectClouds[1]->setSize(Vector2f(roomScale.x * 640, 63));
        effectClouds[1]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));

        switch (levelEffectb)
        {
            case 1 : effectClouds[0]->setTexture(effectTex[0]); break;
            case 2 : effectClouds[0]->setTexture(effectTex[1]); break;
            case 3 : effectClouds[0]->setTexture(effectTex[2]); break;
            case 4 : effectClouds[0]->setTexture(effectTex[0]); effectClouds[1]->setTexture(effectTex[0]); break;
            case 5 : effectClouds[0]->setTexture(effectTex[1]); effectClouds[1]->setTexture(effectTex[1]); break;
            case 6 : effectClouds[0]->setTexture(effectTex[2]); effectClouds[1]->setTexture(effectTex[2]); break;
            default : break;
        }

        temp = camPos;

        camPos = camPosMem;

        camPosMem = temp;

        sectionb = false;
    }
    else
    {
        Vector2i temp;

        backGradient[0].color = topColorb;
        backGradient[1].color = topColorb;
        backGradient[2].color = bottomColorb;
        backGradient[3].color = bottomColorb;

        switch (levelbGradient)
        {
            case 0 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScaleb.x * 640, 0);
                backGradient[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
                backGradient[3].position = Vector2f(0, roomScaleb.y * 480);
                break;
            case 1 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScaleb.x * 640, 0);
                backGradient[2].position = Vector2f(roomScaleb.x * 640, 480);
                backGradient[3].position = Vector2f(0, 480);
                break;
            case 2 :
                backGradient[0].position = Vector2f(0, (roomScaleb.y-1) * 480);
                backGradient[1].position = Vector2f(roomScaleb.x * 640, (roomScaleb.y-1) * 480);
                backGradient[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
                backGradient[3].position = Vector2f(0, roomScaleb.y * 480);
                break;
        }

        background[0]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[1]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[2]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[3]->setPosition(0, (roomScaleb.y * 480) - 178);
        background[4]->setPosition(0, (roomScaleb.y * 480) - 165);
        background[5]->setPosition(0, (roomScaleb.y * 480) - 101);
        background[6]->setPosition(0, (roomScaleb.y * 480) - 320);
        background[7]->setPosition(0, (roomScaleb.y * 480) - 320);
        background[14]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[15]->setPosition(0, (roomScaleb.y * 480) - 274);

        background[0]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[1]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[2]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[3]->setSize(Vector2f(roomScaleb.x * 640, 178));
        background[4]->setSize(Vector2f(roomScaleb.x * 640, 165));
        background[5]->setSize(Vector2f(roomScaleb.x * 640, 101));
        background[6]->setSize(Vector2f(roomScaleb.x * 640, 320));
        background[7]->setSize(Vector2f(roomScaleb.x * 640, 320));
        background[8]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[9]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[10]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[11]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[14]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[15]->setSize(Vector2f(roomScaleb.x * 640, 274));

        if (background[13] != NULL)
            background[13]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));

        background[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[2]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[3]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 178));
        background[4]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 165));
        background[5]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 101));
        background[6]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 320));
        background[7]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 320));
        background[8]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[9]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[10]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[11]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[14]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[15]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));

        if (background[13] != NULL)
            background[13]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));

        effectClouds[0]->setSize(Vector2f(roomScaleb.x * 640, 63));
        effectClouds[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));

        effectClouds[1]->setSize(Vector2f(roomScaleb.x * 640, 63));
        effectClouds[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));

        switch (levelbEffectb)
        {
            case 1 : effectClouds[0]->setTexture(effectTex[0]); break;
            case 2 : effectClouds[0]->setTexture(effectTex[1]); break;
            case 3 : effectClouds[0]->setTexture(effectTex[2]); break;
            case 4 : effectClouds[0]->setTexture(effectTex[0]); effectClouds[1]->setTexture(effectTex[0]); break;
            case 5 : effectClouds[0]->setTexture(effectTex[1]); effectClouds[1]->setTexture(effectTex[1]); break;
            case 6 : effectClouds[0]->setTexture(effectTex[2]); effectClouds[1]->setTexture(effectTex[2]); break;
            default : break;
        }

        temp = camPos;

        camPos = camPosMem;

        camPosMem = temp;

        sectionb = true;
    }
}

static void Liquid_SetHeight()
{
    setLiquidSpots = false;

    if (sectionb)
        liquidRect[1]->setOutlineThickness(2);
    else
        liquidRect[0]->setOutlineThickness(2);
}

static void Liquid_SetSpots()
{
    setLiquidSpots = true;

    if (sectionb)
        liquidRect[1]->setOutlineThickness(0);
    else
        liquidRect[0]->setOutlineThickness(0);
}

static void Autoscroll_AddNode()
{
    register unsigned int sizer = levelAutoscrollPath.size();

    if (sizer == 26)
        MessageBox(NULL, "You cannot place more than 26 Nodes !", "Nodes Overflow !", MB_TASKMODAL | MB_OK | MB_ICONEXCLAMATION);
    else
    {
        autoscrollPathLine->append(Vertex(static_cast<Vector2f>(camPos + Vector2i(16, 16)), Color::White));

        levelAutoscrollPath.emplace_back(Dragger(editorMoveable, liquidTriggerText, sizer));
        levelAutoscrollPath.back().setPosition(static_cast<Vector2f>(camPos - Vector2i(16, 16)));
    }
}

static void Autoscroll_EraseNode()
{
    if (!levelAutoscrollPath.empty())
    {
        autoscrollPathLine->resize(autoscrollPathLine->getVertexCount() - 1);

        levelAutoscrollPath.pop_back();
    }
}

static void Music_World1()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 1)
    {
        if (sectionb)
        {
            levelbMusic = 0;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 0;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[0]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 1;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[0], 0, &musicSamplesChannel);
    }
}

static void Music_Cave()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 2)
    {
        if (sectionb)
        {
            levelbMusic = 1;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 1;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[1]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 2;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[1], 0, &musicSamplesChannel);
    }
}

static void Music_Underground()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 3)
    {
        if (sectionb)
        {
            levelbMusic = 2;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 2;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[2]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 3;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[2], 0, &musicSamplesChannel);
    }
}

static void Music_Rockland()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 4)
    {
        if (sectionb)
        {
            levelbMusic = 3;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 3;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[3]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 4;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[3], 0, &musicSamplesChannel);
    }
}

static void Music_Starland()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 5)
    {
        if (sectionb)
        {
            levelbMusic = 4;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 4;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[4]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 5;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[4], 0, &musicSamplesChannel);
    }
}

static void Music_StarPlatforms()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 6)
    {
        if (sectionb)
        {
            levelbMusic = 5;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 5;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[5]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 6;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[5], 0, &musicSamplesChannel);
    }
}

static void Music_Underwater()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 7)
    {
        if (sectionb)
        {
            levelbMusic = 6;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 6;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[6]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 7;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[6], 0, &musicSamplesChannel);
    }
}

static void Music_SelectSave()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 8)
    {
        if (sectionb)
        {
            levelbMusic = 7;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 7;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[7]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 8;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[7], 0, &musicSamplesChannel);
    }
}

static void Music_GhostHouse()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 9)
    {
        if (sectionb)
        {
            levelbMusic = 8;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 8;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[8]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 9;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[8], 0, &musicSamplesChannel);
    }
}

static void Music_Castle1()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 10)
    {
        if (sectionb)
        {
            levelbMusic = 9;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 9;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[9]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 10;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[9], 0, &musicSamplesChannel);
    }
}

static void Music_Castle2()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 11)
    {
        if (sectionb)
        {
            levelbMusic = 10;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 10;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[10]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 11;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[10], 0, &musicSamplesChannel);
    }
}

static void Music_Yoshi1()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 12)
    {
        if (sectionb)
        {
            levelbMusic = 11;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 11;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[11]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 12;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[11], 0, &musicSamplesChannel);
    }
}

static void Music_Yoshi2()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 13)
    {
        if (sectionb)
        {
            levelbMusic = 12;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 12;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[12]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 13;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[12], 0, &musicSamplesChannel);
    }
}

static void Music_Map1()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 14)
    {
        if (sectionb)
        {
            levelbMusic = 13;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 13;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[13]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 14;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[13], 0, &musicSamplesChannel);
    }
}

static void Music_Map2()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 15)
    {
        if (sectionb)
        {
            levelbMusic = 14;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 14;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[14]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 15;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[14], 0, &musicSamplesChannel);
    }
}

static void Music_Map3()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 16)
    {
        if (sectionb)
        {
            levelbMusic = 15;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 15;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[15]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 16;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[15], 0, &musicSamplesChannel);
    }
}

static void Music_Fastrun1()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 17)
    {
        if (sectionb)
        {
            levelbMusic = 16;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 16;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[16]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 17;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[16], 0, &musicSamplesChannel);
    }
}

static void Music_Fastrun2()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 18)
    {
        if (sectionb)
        {
            levelbMusic = 17;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 17;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[17]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 18;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[17], 0, &musicSamplesChannel);
    }
}

static void Music_InDaKitchen()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 19)
    {
        if (sectionb)
        {
            levelbMusic = 18;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 18;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[18]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 19;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[18], 0, &musicSamplesChannel);
    }
}

static void Music_Yky()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 20)
    {
        if (sectionb)
        {
            levelbMusic = 19;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 19;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[19]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 20;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[19], 0, &musicSamplesChannel);
    }
}

static void Music_YetBonus()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 21)
    {
        if (sectionb)
        {
            levelbMusic = 20;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 20;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[20]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 21;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[20], 0, &musicSamplesChannel);
    }
}

static void Music_Apoplexy()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 22)
    {
        if (sectionb)
        {
            levelbMusic = 21;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[23] != NULL)
            {
                FMOD_Sound_Release(musicSamples[23]);
                musicSamples[23] = NULL;
            }

            removeResource(2);
        }
        else
        {
            levelMusic = 21;

            FMOD_Channel_Stop(musicSamplesChannel);

            if (musicSamples[22] != NULL)
            {
                FMOD_Sound_Release(musicSamples[22]);
                musicSamples[22] = NULL;
            }

            removeResource(0);
        }

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[21]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        lastButton = 22;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[21], 0, &musicSamplesChannel);
    }
}

static void Music_Import()
{
    FMOD_BOOL isPlaying;

    if (lastButton == 23)
    {
        if (sectionb)
        {
            levelbMusic = 23;

            addNewResource(filegrab, 2);
        }
        else
        {
            levelMusic = 22;

            addNewResource(filegrab, 0);
        }

        FMOD_Channel_Stop(musicSamplesChannel);

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(0), buttonClick, 0, NULL);

        if (editorMusic)
            FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);

        blockMouse = true;

        musicButton[22]->freeze();

        currentMenu = EDITION;
    }
    else
    {
        OPENFILENAME dialogParms;

        ZeroMemory(&dialogParms, sizeof(OPENFILENAME));

        dialogParms.lStructSize = sizeof(OPENFILENAME);
        dialogParms.hwndOwner = mainWindow->getSystemHandle();
        dialogParms.hInstance = *mainInstance;
        dialogParms.lpstrFile = filegrab;
        dialogParms.nFilterIndex = 1;
        dialogParms.nMaxFile = sizeof(filegrab);
        dialogParms.lpstrTitle = "Import a valid music :";
        dialogParms.lpstrFilter = "All Sound Formats\0*.aiff;*.asf;*.asx;*.dls;*.flac;*.fsb;*.it;*.m3u;*.mid;*.mod;*.mp2;*.mp3;*.ogg;*.pls;*.s3m;*.vag;*.wav;*.wax;*.wma;*.xm;*.xma\0";
        dialogParms.Flags = OFN_FILEMUSTEXIST | OFN_PATHMUSTEXIST | OFN_HIDEREADONLY | OFN_ENABLESIZING | OFN_NOCHANGEDIR;

        FMOD_Channel_IsPlaying(musicSamplesChannel, &isPlaying);

        if (isPlaying)
            FMOD_Channel_Stop(musicSamplesChannel);

        if (GetOpenFileName(&dialogParms))
        {
            FMOD_RESULT result;

            lastButton = 23;

            if (sectionb)
            {
                if (musicSamples[23] != NULL)
                {
                    FMOD_Sound_Release(musicSamples[23]);
                    musicSamples[23] = NULL;
                }
            }
            else
            {
                if (musicSamples[22] != NULL)
                {
                    FMOD_Sound_Release(musicSamples[22]);
                    musicSamples[22] = NULL;
                }
            }

            if (sectionb)
                result = FMOD_System_CreateStream(soundSystem, filegrab, FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[23]);
            else
                result = FMOD_System_CreateStream(soundSystem, filegrab, FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[22]);

            if (result == FMOD_OK)
            {
                FMOD_RESULT resutl;

                if (sectionb)
                    resutl = FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[23], 0, &musicSamplesChannel);
                else
                    resutl = FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[22], 0, &musicSamplesChannel);

                if (resutl != FMOD_OK)
                    MessageBox(NULL, "Error ! The file cannot be played !", "File unplayable !", MB_TASKMODAL | MB_ICONERROR | MB_OK);
            }
            else
                MessageBox(NULL, "Error ! The file format is not supported !", "File unreadable !", MB_TASKMODAL | MB_ICONERROR | MB_OK);
        }
    }
}

static void Background_None()
{
    if (sectionb)
    {
        levelbBackground = 0;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 0;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[0]->freeze();

    currentMenu = EDITION;
}

static void Background_GreenHills()
{
    if (sectionb)
    {
        levelbBackground = 1;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 1;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[2]->freeze();

    currentMenu = EDITION;
}

static void Background_RedHills()
{
    if (sectionb)
    {
        levelbBackground = 2;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 2;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[6]->freeze();

    currentMenu = EDITION;
}

static void Background_DesertHills()
{
    if (sectionb)
    {
        levelbBackground = 3;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 3;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[9]->freeze();

    currentMenu = EDITION;
}

static void Background_BlueHills()
{
    if (sectionb)
    {
        levelbBackground = 14;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 14;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[10]->freeze();

    currentMenu = EDITION;
}

static void Background_SnowHills()
{
    if (sectionb)
    {
        levelbBackground = 15;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 15;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[13]->freeze();

    currentMenu = EDITION;
}

static void Background_Night()
{
    if (sectionb)
    {
        levelbBackground = 4;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 4;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[12]->freeze();

    currentMenu = EDITION;
}

static void Background_Water()
{
    if (sectionb)
    {
        levelbBackground = 5;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 5;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[8]->freeze();

    currentMenu = EDITION;
}

static void Background_Rocks()
{
    if (sectionb)
    {
        levelbBackground = 6;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 6;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[4]->freeze();

    currentMenu = EDITION;
}

static void Background_Clouds()
{
    if (sectionb)
    {
        levelbBackground = 7;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 7;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[14]->freeze();

    currentMenu = EDITION;
}

static void Background_DarkClouds()
{
    if (sectionb)
    {
        levelbBackground = 8;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 8;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[15]->freeze();

    currentMenu = EDITION;
}

static void Background_Castle()
{
    if (sectionb)
    {
        levelbBackground = 9;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 9;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[5]->freeze();

    currentMenu = EDITION;
}

static void Background_Cave()
{
    if (sectionb)
    {
        levelbBackground = 10;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 10;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[3]->freeze();

    currentMenu = EDITION;
}

static void Background_DarkCave()
{
    if (sectionb)
    {
        levelbBackground = 11;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 11;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[11]->freeze();

    currentMenu = EDITION;
}

static void Background_LavaCave()
{
    if (sectionb)
    {
        levelbBackground = 12;

        if (backgroundTxt[13] != NULL)
        {
            delete backgroundTxt[13];
            backgroundTxt[13] = NULL;
        }

        if (background[13] != NULL)
        {
            delete background[13];
            background[13] = NULL;
        }

        removeResource(3);
    }
    else
    {
        levelBackground = 12;

        if (backgroundTxt[12] != NULL)
        {
            delete backgroundTxt[12];
            backgroundTxt[12] = NULL;
        }

        if (background[12] != NULL)
        {
            delete background[12];
            background[12] = NULL;
        }

        removeResource(1);
    }

    blockMouse = true;

    backgroundButton[7]->freeze();

    currentMenu = EDITION;
}

static void Background_Import()
{
    OPENFILENAME dialogParms;

    ZeroMemory(&dialogParms, sizeof(OPENFILENAME));

    dialogParms.lStructSize = sizeof(OPENFILENAME);
    dialogParms.hwndOwner = mainWindow->getSystemHandle();
    dialogParms.hInstance = *mainInstance;
    dialogParms.lpstrFile = filegrab;
    dialogParms.nFilterIndex = 1;
    dialogParms.nMaxFile = sizeof(filegrab);
    dialogParms.lpstrTitle = "Import a valid background :";
    dialogParms.lpstrFilter = "Supported Image Formats\0*.bmp;*.dds;*.jpg;*.png;*.tga;*.psd\0";
    dialogParms.Flags = OFN_FILEMUSTEXIST | OFN_PATHMUSTEXIST | OFN_HIDEREADONLY | OFN_ENABLESIZING | OFN_NOCHANGEDIR;

    if (GetOpenFileName(&dialogParms))
    {
        if (sectionb)
        {
            if (backgroundTxt[13] != NULL)
                delete backgroundTxt[13];

            backgroundTxt[13] = new Texture;

            if (!backgroundTxt[13]->loadFromFile(filegrab))
            {
                MessageBox(NULL, "Error ! The file format is not supported !", "File unreadable !", MB_TASKMODAL | MB_ICONERROR | MB_OK);

                delete backgroundTxt[13];

                backgroundTxt[13] = NULL;

                return;
            }

            backgroundTxt[13]->setRepeated(true);

            if (background[13] != NULL)
                delete background[13];

            background[13] = new RectangleShape(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
            background[13]->setTexture(backgroundTxt[13]);
            background[13]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));

            addNewResource(filegrab, 3);

            levelbBackground = 13;
        }
        else
        {
            if (backgroundTxt[12] != NULL)
                delete backgroundTxt[12];

            backgroundTxt[12] = new Texture;

            if (!backgroundTxt[12]->loadFromFile(filegrab))
            {
                MessageBox(NULL, "Error ! The file format is not supported !", "File unreadable !", MB_TASKMODAL | MB_ICONERROR | MB_OK);

                delete backgroundTxt[12];

                backgroundTxt[12] = NULL;

                return;
            }

            backgroundTxt[12]->setRepeated(true);

            if (background[12] != NULL)
                delete background[12];

            background[12] = new RectangleShape(Vector2f(roomScale.x * 640, roomScale.y * 480));
            background[12]->setTexture(backgroundTxt[12]);
            background[12]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));

            addNewResource(filegrab, 1);

            levelBackground = 13;
        }

        blockMouse = true;

        backgroundButton[1]->freeze();

        currentMenu = EDITION;
    }
}

static void Gradient_Fit()
{
    if (sectionb)
    {
        backGradient[0].position = Vector2f(0, 0);
        backGradient[1].position = Vector2f(roomScaleb.x * 640, 0);
        backGradient[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
        backGradient[3].position = Vector2f(0, roomScaleb.y * 480);

        backGradient[0].color = topColorb;
        backGradient[1].color = topColorb;
        backGradient[2].color = bottomColorb;
        backGradient[3].color = bottomColorb;

        levelbGradient = 0;
    }
    else
    {
        backGradient[0].position = Vector2f(0, 0);
        backGradient[1].position = Vector2f(roomScale.x * 640, 0);
        backGradient[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
        backGradient[3].position = Vector2f(0, roomScale.y * 480);

        backGradient[0].color = topColor;
        backGradient[1].color = topColor;
        backGradient[2].color = bottomColor;
        backGradient[3].color = bottomColor;

        levelGradient = 0;
    }

    blockMouse = true;

    gradientButton[0]->freeze();

    currentMenu = EDITION;
}

static void Gradient_Top()
{
    if (sectionb)
    {
        backGradient[0].position = Vector2f(0, 0);
        backGradient[1].position = Vector2f(roomScaleb.x * 640, 0);
        backGradient[2].position = Vector2f(roomScaleb.x * 640, 480);
        backGradient[3].position = Vector2f(0, 480);

        backGradient[0].color = topColorb;
        backGradient[1].color = topColorb;
        backGradient[2].color = bottomColorb;
        backGradient[3].color = bottomColorb;

        backColorb = Color(bottomColorb);

        levelbGradient = 1;
    }
    else
    {
        backGradient[0].position = Vector2f(0, 0);
        backGradient[1].position = Vector2f(roomScale.x * 640, 0);
        backGradient[2].position = Vector2f(roomScale.x * 640, 480);
        backGradient[3].position = Vector2f(0, 480);

        backGradient[0].color = topColor;
        backGradient[1].color = topColor;
        backGradient[2].color = bottomColor;
        backGradient[3].color = bottomColor;

        backColor = Color(bottomColor);

        levelGradient = 1;
    }

    blockMouse = true;

    gradientButton[1]->freeze();

    currentMenu = EDITION;
}

static void Gradient_Bottom()
{
    if (sectionb)
    {
        backGradient[0].position = Vector2f(0, (roomScaleb.y-1) * 480);
        backGradient[1].position = Vector2f(roomScaleb.x * 640, (roomScaleb.y-1) * 480);
        backGradient[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
        backGradient[3].position = Vector2f(0, roomScaleb.y * 480);

        backGradient[0].color = topColorb;
        backGradient[1].color = topColorb;
        backGradient[2].color = bottomColorb;
        backGradient[3].color = bottomColorb;

        backColorb = Color(topColorb);

        levelbGradient = 2;
    }
    else
    {
        backGradient[0].position = Vector2f(0, (roomScale.y-1) * 480);
        backGradient[1].position = Vector2f(roomScale.x * 640, (roomScale.y-1) * 480);
        backGradient[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
        backGradient[3].position = Vector2f(0, roomScale.y * 480);

        backGradient[0].color = topColor;
        backGradient[1].color = topColor;
        backGradient[2].color = bottomColor;
        backGradient[3].color = bottomColor;

        backColor = Color(topColor);

        levelGradient = 2;
    }

    blockMouse = true;

    gradientButton[2]->freeze();

    currentMenu = EDITION;
}

static void Effect_None()
{
    if (sectionb)
        levelbEffect = 0;
    else
        levelEffect = 0;

    blockMouse = true;

    effectButton[3]->freeze();

    currentMenu = EDITION;
}

static void Effect_Rain()
{
    if (sectionb)
        levelbEffect = 1;
    else
        levelEffect = 1;

    blockMouse = true;

    effectButton[0]->freeze();

    currentMenu = EDITION;
}

static void Effect_Storm()
{
    if (sectionb)
        levelbEffect = 2;
    else
        levelEffect = 2;

    blockMouse = true;

    effectButton[1]->freeze();

    currentMenu = EDITION;
}

static void Effect_Snow()
{
    if (sectionb)
        levelbEffect = 3;
    else
        levelEffect = 3;

    blockMouse = true;

    effectButton[2]->freeze();

    currentMenu = EDITION;
}

static void Effect_But1()
{
    effectCheckButton[1]->setChecked(false);
    effectCheckButton[2]->setChecked(false);
    effectCheckButton[3]->setChecked(false);
    effectCheckButton[4]->setChecked(false);
    effectCheckButton[5]->setChecked(false);

    if (effectCheckButton[0]->getChecked())
    {
        if (sectionb)
            levelbEffectb = 1;
        else
            levelEffectb = 1;

        effectClouds[0]->setTexture(effectTex[0]);
    }
    else
    {
        if (sectionb)
            levelbEffectb = 0;
        else
            levelEffectb = 0;
    }
}

static void Effect_But2()
{
    effectCheckButton[0]->setChecked(false);
    effectCheckButton[2]->setChecked(false);
    effectCheckButton[3]->setChecked(false);
    effectCheckButton[4]->setChecked(false);
    effectCheckButton[5]->setChecked(false);

    if (effectCheckButton[1]->getChecked())
    {
        if (sectionb)
            levelbEffectb = 2;
        else
            levelEffectb = 2;

        effectClouds[0]->setTexture(effectTex[1]);
    }
    else
    {
        if (sectionb)
            levelbEffectb = 0;
        else
            levelEffectb = 0;
    }
}

static void Effect_But3()
{
    effectCheckButton[0]->setChecked(false);
    effectCheckButton[1]->setChecked(false);
    effectCheckButton[3]->setChecked(false);
    effectCheckButton[4]->setChecked(false);
    effectCheckButton[5]->setChecked(false);

    if (effectCheckButton[2]->getChecked())
    {
        if (sectionb)
            levelbEffectb = 3;
        else
            levelEffectb = 3;

        effectClouds[0]->setTexture(effectTex[2]);
    }
    else
    {
        if (sectionb)
            levelbEffectb = 0;
        else
            levelEffectb = 0;
    }
}

static void Effect_But4()
{
    effectCheckButton[0]->setChecked(false);
    effectCheckButton[1]->setChecked(false);
    effectCheckButton[2]->setChecked(false);
    effectCheckButton[4]->setChecked(false);
    effectCheckButton[5]->setChecked(false);

    if (effectCheckButton[3]->getChecked())
    {
        if (sectionb)
            levelbEffectb = 4;
        else
            levelEffectb = 4;

        effectClouds[0]->setTexture(effectTex[0]);
        effectClouds[1]->setTexture(effectTex[0]);
    }
    else
    {
        if (sectionb)
            levelbEffectb = 0;
        else
            levelEffectb = 0;
    }
}

static void Effect_But5()
{
    effectCheckButton[0]->setChecked(false);
    effectCheckButton[1]->setChecked(false);
    effectCheckButton[2]->setChecked(false);
    effectCheckButton[3]->setChecked(false);
    effectCheckButton[5]->setChecked(false);

    if (effectCheckButton[4]->getChecked())
    {
        if (sectionb)
            levelbEffectb = 5;
        else
            levelEffectb = 5;

        effectClouds[0]->setTexture(effectTex[1]);
        effectClouds[1]->setTexture(effectTex[1]);
    }
    else
    {
        if (sectionb)
            levelbEffectb = 0;
        else
            levelEffectb = 0;
    }
}

static void Effect_But6()
{
    effectCheckButton[0]->setChecked(false);
    effectCheckButton[1]->setChecked(false);
    effectCheckButton[2]->setChecked(false);
    effectCheckButton[3]->setChecked(false);
    effectCheckButton[4]->setChecked(false);

    if (effectCheckButton[5]->getChecked())
    {
        if (sectionb)
            levelbEffectb = 6;
        else
            levelEffectb = 6;

        effectClouds[0]->setTexture(effectTex[2]);
        effectClouds[1]->setTexture(effectTex[2]);
    }
    else
    {
        if (sectionb)
            levelbEffectb = 0;
        else
            levelEffectb = 0;
    }
}

LRESULT CALLBACK dialogProcName(HWND windowHandle, UINT message, WPARAM wParam, LPARAM lParam)
{
    HWND handleEdit;
    TCHAR textBuffer[22];

    switch(message)
    {
        case WM_INITDIALOG :
            SendDlgItemMessage(windowHandle, 5, EM_SETLIMITTEXT, 21, 0);
            SetDlgItemText(windowHandle, 5, levelName.c_str());

            return TRUE;

        case WM_COMMAND :
            switch(wParam)
            {
                case 6 :
                    EndDialog(windowHandle, 0);

                    handleEdit = GetDlgItem(windowHandle, 5);

                    GetWindowText(handleEdit, textBuffer, 22);

                    levelName = textBuffer;

                    return TRUE;
                case 7 :
                    EndDialog(windowHandle, 0);

                    return TRUE;
            }

            break;
    }

    return FALSE;
}

static void Info_LevelName()
{
    DialogBox(*mainInstance, MAKEINTRESOURCE(2), mainWindow->getSystemHandle(), reinterpret_cast<DLGPROC>(dialogProcName));
}

LRESULT CALLBACK dialogProcAuthor(HWND windowHandle, UINT message, WPARAM wParam, LPARAM lParam)
{
    HWND handleEdit;
    TCHAR textBuffer[32];

    switch(message)
    {
        case WM_INITDIALOG :
            SendDlgItemMessage(windowHandle, 11, EM_SETLIMITTEXT, 31, 0);
            SetDlgItemText(windowHandle, 11, levelAuthor.c_str());

            return TRUE;

        case WM_COMMAND :
            switch(wParam)
            {
                case 12 :
                    EndDialog(windowHandle, 0);

                    handleEdit = GetDlgItem(windowHandle, 11);

                    GetWindowText(handleEdit, textBuffer, 32);

                    levelAuthor = textBuffer;

                    return TRUE;
                case 13 :
                    EndDialog(windowHandle, 0);

                    return TRUE;
            }

            break;
    }

    return FALSE;
}

static void Info_LevelAuthor()
{
    DialogBox(*mainInstance, MAKEINTRESOURCE(8), mainWindow->getSystemHandle(), reinterpret_cast<DLGPROC>(dialogProcAuthor));
}

LRESULT CALLBACK dialogProcGrav(HWND windowHandle, UINT message, WPARAM wParam, LPARAM lParam)
{
    HWND handleEdit;
    TCHAR textBuffer[3]("");

    switch(message)
    {
        case WM_INITDIALOG :
            SendDlgItemMessage(windowHandle, 18, UDM_SETRANGE, 0, MAKELPARAM(1, 10));
            SendDlgItemMessage(windowHandle, 18, UDM_SETPOS, 0, levelGravity);

            return TRUE;

        case WM_COMMAND :
            switch(wParam)
            {
                case 19 :
                    EndDialog(windowHandle, 0);

                    handleEdit = GetDlgItem(windowHandle, 17);

                    GetWindowText(handleEdit, textBuffer, 2);

                    levelGravity = max(min(atoi(textBuffer), 10), 1);

                    infoSlider[0]->setPosition(roundf(20.222222 * (levelGravity-1)));

                    return TRUE;
                case 20 :
                    EndDialog(windowHandle, 0);

                    return TRUE;
            }

            break;
    }

    return FALSE;
}

static void sliderGravity(float sliderPos)
{
    infoSlider[0]->setPosition(roundf(sliderPos / 20.222222) * 20.222222);

    levelGravity = roundf(sliderPos / 20.222222) + 1;
}

static void Info_LevelGravity()
{
    DialogBox(*mainInstance, MAKEINTRESOURCE(14), mainWindow->getSystemHandle(), reinterpret_cast<DLGPROC>(dialogProcGrav));
}

LRESULT CALLBACK dialogProcTime(HWND windowHandle, UINT message, WPARAM wParam, LPARAM lParam)
{
    HWND handleEdit;
    TCHAR textBuffer[6]("");

    switch(message)
    {
        case WM_INITDIALOG :
            SendDlgItemMessage(windowHandle, 25, UDM_SETRANGE, 0, MAKELPARAM(100, 10000));
            SendDlgItemMessage(windowHandle, 25, UDM_SETPOS, 0, levelTime);

            return TRUE;

        case WM_COMMAND :
            switch(wParam)
            {
                case 26 :
                    EndDialog(windowHandle, 0);

                    handleEdit = GetDlgItem(windowHandle, 24);

                    GetWindowText(handleEdit, textBuffer, 5);

                    levelTime = max(min(atoi(textBuffer), 10000), 100);

                    infoSlider[1]->setPosition(roundf((levelTime-100) / 54.395604));

                    return TRUE;
                case 27 :
                    EndDialog(windowHandle, 0);

                    return TRUE;
            }

            break;
    }

    return FALSE;
}

static void sliderTime(float sliderPos)
{
    levelTime = roundf(sliderPos * 54.395604) + 100;
}

static void Info_LevelTime()
{
    DialogBox(*mainInstance, MAKEINTRESOURCE(21), mainWindow->getSystemHandle(), reinterpret_cast<DLGPROC>(dialogProcTime));
}

LRESULT CALLBACK dialogProcBackA(HWND windowHandle, UINT message, WPARAM wParam, LPARAM lParam)
{
    HWND handleEdit;
    TCHAR textBuffer[4]("");

    switch(message)
    {
        case WM_INITDIALOG :
            SendDlgItemMessage(windowHandle, 32, UDM_SETRANGE, 0, MAKELPARAM(0, 255));

            if (sectionb)
                SendDlgItemMessage(windowHandle, 32, UDM_SETPOS, 0, levelBackAlphab);
            else
                SendDlgItemMessage(windowHandle, 32, UDM_SETPOS, 0, levelBackAlpha);

            return TRUE;

        case WM_COMMAND :
            switch(wParam)
            {
                case 33 :
                    EndDialog(windowHandle, 0);

                    handleEdit = GetDlgItem(windowHandle, 31);

                    GetWindowText(handleEdit, textBuffer, 3);

                    if (sectionb)
                    {
                        levelBackAlphab = max(min(atoi(textBuffer), 255), 0);

                        infoSlider[2]->setPosition(roundf(levelBackAlphab / 1.401098));
                    }
                    else
                    {
                        levelBackAlpha = max(min(atoi(textBuffer), 255), 0);

                        infoSlider[2]->setPosition(roundf(levelBackAlpha / 1.401098));
                    }

                    return TRUE;
                case 34 :
                    EndDialog(windowHandle, 0);

                    return TRUE;
            }

            break;
    }

    return FALSE;
}

static void sliderBackAlpha(float sliderPos)
{
    if (sectionb)
        levelBackAlphab = roundf(sliderPos * 1.401098);
    else
        levelBackAlpha = roundf(sliderPos * 1.401098);
}

static void Info_BackAlpha()
{
    DialogBox(*mainInstance, MAKEINTRESOURCE(28), mainWindow->getSystemHandle(), reinterpret_cast<DLGPROC>(dialogProcBackA));
}

LRESULT CALLBACK dialogProcFrontA(HWND windowHandle, UINT message, WPARAM wParam, LPARAM lParam)
{
    HWND handleEdit;
    TCHAR textBuffer[4]("");

    switch(message)
    {
        case WM_INITDIALOG :
            SendDlgItemMessage(windowHandle, 32, UDM_SETRANGE, 0, MAKELPARAM(0, 255));

            if (sectionb)
                SendDlgItemMessage(windowHandle, 32, UDM_SETPOS, 0, levelFrontAlphab);
            else
                SendDlgItemMessage(windowHandle, 32, UDM_SETPOS, 0, levelFrontAlpha);

            return TRUE;

        case WM_COMMAND :
            switch(wParam)
            {
                case 33 :
                    EndDialog(windowHandle, 0);

                    handleEdit = GetDlgItem(windowHandle, 31);

                    GetWindowText(handleEdit, textBuffer, 3);

                    if (sectionb)
                    {
                        levelFrontAlphab = max(min(atoi(textBuffer), 255), 0);

                        infoSlider[3]->setPosition(roundf(levelFrontAlphab / 1.401098));
                    }
                    else
                    {
                        levelFrontAlpha = max(min(atoi(textBuffer), 255), 0);

                        infoSlider[3]->setPosition(roundf(levelFrontAlpha / 1.401098));
                    }

                    return TRUE;
                case 34 :
                    EndDialog(windowHandle, 0);

                    return TRUE;
            }

            break;
    }

    return FALSE;
}

static void sliderFrontAlpha(float sliderPos)
{
    if (sectionb)
        levelFrontAlphab = roundf(sliderPos * 1.401098);
    else
        levelFrontAlpha = roundf(sliderPos * 1.401098);
}

static void Info_FrontAlpha()
{
    DialogBox(*mainInstance, MAKEINTRESOURCE(28), mainWindow->getSystemHandle(), reinterpret_cast<DLGPROC>(dialogProcFrontA));
}

static void sliderLiquidSpeed(float sliderPos)
{
    levelLiquidSpeed = (sliderPos / 20.222222) + 1;

    #ifdef DEBUGMODE
    cout << "LiquidSpeed = " << levelLiquidSpeed << endl;
    #endif
}

static void sliderAutoscrollSpeed(float sliderPos)
{
    levelAutoscrollSpeed = (sliderPos / 36.400000) + 1;

    #ifdef DEBUGMODE
    cout << levelAutoscrollSpeed << endl;
    #endif
}

static void sliderBowserSpeed1(float sliderPos)
{
    infoSlider[6]->setPosition(roundf(sliderPos / 10.000000) * 10.000000);

    bowserSpeeds[0] = roundf(sliderPos / 10.000000) + 5;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserSpeeds[0]) << endl;
    #endif
}

static void sliderBowserFreq1(float sliderPos)
{
    infoSlider[7]->setPosition(roundf(sliderPos / 15.000000) * 15.000000);

    bowserFrequences[0] = roundf(sliderPos / 15.000000) + 5;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserFrequences[0]) << endl;
    #endif
}

static void sliderBowserSpeed2(float sliderPos)
{
    infoSlider[8]->setPosition(roundf(sliderPos / 16.666666) * 16.666666);

    bowserSpeeds[1] = roundf(sliderPos / 16.666666) + 1;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserSpeeds[1]) << endl;
    #endif
}

static void sliderBowserFreq2(float sliderPos)
{
    infoSlider[9]->setPosition(roundf(sliderPos / 6.000000) * 6.000000);

    bowserFrequences[1] = roundf(sliderPos / 6.000000) + 5;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserFrequences[1]) << endl;
    #endif
}

static void sliderBowserSpeed3(float sliderPos)
{
    infoSlider[10]->setPosition(roundf(sliderPos / 10.000000) * 10.000000);

    bowserSpeeds[2] = roundf(sliderPos / 10.000000) + 5;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserSpeeds[2]) << endl;
    #endif
}

static void sliderBowserFreq3(float sliderPos)
{
    infoSlider[11]->setPosition(roundf(sliderPos / 1.666666) * 1.666666);

    bowserFrequences[2] = roundf(sliderPos / 1.666666) + 10;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserFrequences[2]) << endl;
    #endif
}

static void sliderBowserSpeed4(float sliderPos)
{
    infoSlider[12]->setPosition(roundf(sliderPos / 10.000000) * 10.000000);

    bowserSpeeds[3] = roundf(sliderPos / 10.000000) + 5;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserSpeeds[3]) << endl;
    #endif
}

static void sliderBowserFreq4(float sliderPos)
{
    infoSlider[13]->setPosition(roundf(sliderPos / 1.666666) * 1.666666);

    bowserFrequences[3] = roundf(sliderPos / 1.666666) + 10;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserFrequences[3]) << endl;
    #endif
}

static void sliderBowserSpeed5(float sliderPos)
{
    infoSlider[14]->setPosition(roundf(sliderPos / 10.000000) * 10.000000);

    bowserSpeeds[4] = roundf(sliderPos / 10.000000) + 5;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserSpeeds[4]) << endl;
    #endif
}

static void sliderBowserFreq5(float sliderPos)
{
    infoSlider[15]->setPosition(roundf(sliderPos / 1.666666) * 1.666666);

    bowserFrequences[4] = roundf(sliderPos / 1.666666) + 10;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserFrequences[4]) << endl;
    #endif
}

static void sliderBowserSpeed6(float sliderPos)
{
    infoSlider[16]->setPosition(roundf(sliderPos / 10.000000) * 10.000000);

    bowserSpeeds[5] = roundf(sliderPos / 10.000000) + 5;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserSpeeds[5]) << endl;
    #endif
}

static void sliderBowserFreq6(float sliderPos)
{
    infoSlider[17]->setPosition(roundf(sliderPos / 3.000000) * 3.000000);

    bowserFrequences[5] = roundf(sliderPos / 3.000000) + 10;

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserFrequences[5]) << endl;
    #endif
}

static void sliderBowserTrail(float sliderPos)
{
    infoSlider[18]->setPosition(roundf(sliderPos / 9.100000) * 9.100000);

    bowserTrail = roundf(sliderPos / 9.100000);

    #ifdef DEBUGMODE
    cout << static_cast<unsigned int>(bowserTrail) << endl;
    #endif
}

LRESULT CALLBACK dialogProcBowserHealth(HWND windowHandle, UINT message, WPARAM wParam, LPARAM lParam)
{
    HWND handleEdit;
    TCHAR textBuffer[3]("");

    switch(message)
    {
        case WM_INITDIALOG :
            SendDlgItemMessage(windowHandle, 46, UDM_SETRANGE, 0, MAKELPARAM(1, 25));
            SendDlgItemMessage(windowHandle, 46, UDM_SETPOS, 0, bowserHealth);

            return TRUE;

        case WM_COMMAND :
            switch(wParam)
            {
                case 47 :
                    EndDialog(windowHandle, 0);

                    handleEdit = GetDlgItem(windowHandle, 45);

                    GetWindowText(handleEdit, textBuffer, 2);

                    bowserHealth = atoi(textBuffer);

                    return TRUE;
                case 48 :
                    EndDialog(windowHandle, 0);

                    return TRUE;
            }

            break;
    }

    return FALSE;
}

static void Info_BowserHealth()
{
    DialogBox(*mainInstance, MAKEINTRESOURCE(42), mainWindow->getSystemHandle(), reinterpret_cast<DLGPROC>(dialogProcBowserHealth));
}

static void Info_BowserMusic()
{
    OPENFILENAME dialogParms;

    ZeroMemory(&dialogParms, sizeof(OPENFILENAME));

    dialogParms.lStructSize = sizeof(OPENFILENAME);
    dialogParms.hwndOwner = mainWindow->getSystemHandle();
    dialogParms.hInstance = *mainInstance;
    dialogParms.lpstrFile = filegrab;
    dialogParms.nFilterIndex = 1;
    dialogParms.nMaxFile = sizeof(filegrab);
    dialogParms.lpstrInitialDir = "Data/Sfx";
    dialogParms.lpstrTitle = "Import a valid music :";
    dialogParms.lpstrFilter = "All Sound Formats\0*.aiff;*.asf;*.asx;*.dls;*.flac;*.fsb;*.it;*.m3u;*.mid;*.mod;*.mp2;*.mp3;*.ogg;*.pls;*.s3m;*.vag;*.wav;*.wax;*.wma;*.xm;*.xma\0";
    dialogParms.Flags = OFN_FILEMUSTEXIST | OFN_PATHMUSTEXIST | OFN_HIDEREADONLY | OFN_ENABLESIZING | OFN_NOCHANGEDIR;

    if (GetOpenFileName(&dialogParms))
    {
        FMOD_RESULT result;

        if (resourcesArray[4] != NULL)
        {
            delete resourcesArray[4];
            resourcesArray[4] = NULL;
        }

        if (musicSamples[24] != NULL)
        {
            FMOD_Sound_Release(musicSamples[24]);
            musicSamples[24] = NULL;
        }

        bowserMusic = 1;

        result = FMOD_System_CreateStream(soundSystem, filegrab, FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[24]);

        if (result == FMOD_OK)
        {
            FMOD_RESULT resutl;

            resutl = FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), musicSamples[24], 0, &musicSamplesChannel);

            if (resutl != FMOD_OK)
            {
                MessageBox(NULL, "Error ! The file cannot be played !", "File unplayable !", MB_TASKMODAL | MB_ICONERROR | MB_OK);
                return;
            }

            bowserMusic = 2;

            FMOD_Channel_Stop(musicSamplesChannel);

            addNewResource(filegrab, 4);
        }
        else
            MessageBox(NULL, "Error ! The file format is not supported !", "File unreadable !", MB_TASKMODAL | MB_ICONERROR | MB_OK);
    }
}

static void Info_LevelSave()
{
    if (levelDir.empty())
    {
        OPENFILENAME dialogParms;
        TCHAR personalPath[MAX_PATH];

        SHGetFolderPath(mainWindow->getSystemHandle(), CSIDL_PERSONAL | CSIDL_FLAG_CREATE, NULL, 0, personalPath);

        StrCat(personalPath, "\\Mario Constructor Master\\Levels");

        ZeroMemory(&dialogParms, sizeof(OPENFILENAME));

        dialogParms.lStructSize = sizeof(OPENFILENAME);
        dialogParms.hwndOwner = mainWindow->getSystemHandle();
        dialogParms.hInstance = *mainInstance;
        dialogParms.lpstrFile = filegrab;
        dialogParms.nFilterIndex = 1;
        dialogParms.nMaxFile = sizeof(filegrab);
        dialogParms.lpstrInitialDir = personalPath;
        dialogParms.lpstrTitle = "Save a Level :";
        dialogParms.lpstrFilter = "Constructor Master Levels (.cml)\0*.cml\0";
        dialogParms.Flags = OFN_PATHMUSTEXIST | OFN_HIDEREADONLY | OFN_ENABLESIZING | OFN_NOCHANGEDIR | OFN_OVERWRITEPROMPT;

        if (GetSaveFileName(&dialogParms))
        {
            PathRenameExtension(filegrab, ".cml");

            levelDir = filegrab;

            checkResources(levelDir.c_str(), false);

            Level_Save(levelDir);
        }
    }
    else
        Level_Save(levelDir);
}

static void Info_LevelSaveas()
{
    OPENFILENAME dialogParms;
    TCHAR personalPath[MAX_PATH];

    SHGetFolderPath(mainWindow->getSystemHandle(), CSIDL_PERSONAL | CSIDL_FLAG_CREATE, NULL, 0, personalPath);

    StrCat(personalPath, "\\Mario Constructor Master\\Levels");

    ZeroMemory(&dialogParms, sizeof(OPENFILENAME));

    dialogParms.lStructSize = sizeof(OPENFILENAME);
    dialogParms.hwndOwner = mainWindow->getSystemHandle();
    dialogParms.hInstance = *mainInstance;
    dialogParms.lpstrFile = filegrab;
    dialogParms.nFilterIndex = 1;
    dialogParms.nMaxFile = sizeof(filegrab);
    dialogParms.lpstrInitialDir = personalPath;
    dialogParms.lpstrTitle = "Save a Level :";
    dialogParms.lpstrFilter = "Constructor Master Levels (.cml)\0*.cml\0";
    dialogParms.Flags = OFN_PATHMUSTEXIST | OFN_HIDEREADONLY | OFN_ENABLESIZING | OFN_NOCHANGEDIR | OFN_OVERWRITEPROMPT;

    if (GetSaveFileName(&dialogParms))
    {
        PathRenameExtension(filegrab, ".cml");

        levelDir = filegrab;

        checkResources(levelDir.c_str(), true);

        Level_Save(levelDir);
    }
}

static void Info_LevelLoad()
{
    OPENFILENAME dialogParms;
    TCHAR personalPath[MAX_PATH];

    SHGetFolderPath(mainWindow->getSystemHandle(), CSIDL_PERSONAL | CSIDL_FLAG_CREATE, NULL, 0, personalPath);

    StrCat(personalPath, "\\Mario Constructor Master\\Levels");

    ZeroMemory(&dialogParms, sizeof(OPENFILENAME));

    dialogParms.lStructSize = sizeof(OPENFILENAME);
    dialogParms.hwndOwner = mainWindow->getSystemHandle();
    dialogParms.hInstance = *mainInstance;
    dialogParms.lpstrFile = filegrab;
    dialogParms.nFilterIndex = 1;
    dialogParms.nMaxFile = sizeof(filegrab);
    dialogParms.lpstrInitialDir = personalPath;
    dialogParms.lpstrTitle = "Load a Level :";
    dialogParms.lpstrFilter = "Constructor Master Levels (.cml)\0*.cml\0";
    dialogParms.Flags = OFN_FILEMUSTEXIST | OFN_PATHMUSTEXIST | OFN_HIDEREADONLY | OFN_ENABLESIZING | OFN_NOCHANGEDIR;

    if (GetOpenFileName(&dialogParms))
    {
        camera->setCenter(320, 240);

        mainTexture.setView(*camera);

        Level_Load(filegrab);

        Prefs_Title();
    }
}

static void Info_LevelTest()
{
    if (startArea == 0)
    {
        MessageBox(NULL, "There is no Start Point in the Level !", "No Start Point", MB_ICONINFORMATION | MB_TASKMODAL | MB_OK);
        return;
    }

    if (MessageBox(NULL, "Do you want to Test your current Level ?", "Test Level", MB_ICONQUESTION | MB_TASKMODAL | MB_YESNO) == IDYES)
    {
        circleFadeTex = new Texture;

        if (!circleFadeTex->loadFromFile("Data/Gfx/CircleFade.bmp"))
        {
            MessageBox(NULL, "Error ! Failed to load Texture :\nData/Gfx/CircleFade.bmp", "Failed to load Texture", MB_OK | MB_ICONERROR | MB_TASKMODAL);

            mainWindow->close();

            return;
        }

        circleFadeTex->setSmooth(true);

        circleSpr = new Sprite(*circleFadeTex);
        circleSpr->setPosition(camPos.x, camPos.y);
        circleSpr->setScale(1.5, 1.5);
        circleSpr->setOrigin(240, 240);

        fadeCircle = true;
        blockEditor = true;

        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(3), testLevel, 0, NULL);

        if (editorMusic)
            FMOD_Channel_Stop(musicChannel);
    }
}

static void Info_LiquidNone()
{
    if (sectionb)
        levelLiquidTypeb = 0;
    else
        levelLiquidType = 0;

    liquidButton[3]->setTextureRect(IntRect(0, 54, 160, 54));
}

static void Info_LiquidWater()
{
    if (sectionb)
    {
        levelLiquidTypeb = 1;

        liquidRect[1]->setTexture(effectTxt[7]);
        liquidRect[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 16));
        liquidRect[1]->setPosition(Vector2f(0, levelLiquidHeightb - 16));
        liquidRect[1]->setSize(Vector2f(roomScaleb.x * 640, 16));
    }
    else
    {
        levelLiquidType = 1;

        liquidRect[0]->setTexture(effectTxt[7]);
        liquidRect[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 16));
        liquidRect[0]->setPosition(Vector2f(0, levelLiquidHeight - 16));
        liquidRect[0]->setSize(Vector2f(roomScale.x * 640, 16));
    }

    liquidButton[3]->setTextureRect(IntRect(0, 0, 160, 54));
}

static void Info_LiquidLava()
{
    if (sectionb)
    {
        levelLiquidTypeb = 2;

        liquidRect[1]->setTexture(hazardsTxt[0]);
        liquidRect[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 32));
        liquidRect[1]->setPosition(Vector2f(0, levelLiquidHeightb - 32));
        liquidRect[1]->setSize(Vector2f(roomScaleb.x * 640, 32));
    }
    else
    {
        levelLiquidType = 2;

        liquidRect[0]->setTexture(hazardsTxt[0]);
        liquidRect[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 32));
        liquidRect[0]->setPosition(Vector2f(0, levelLiquidHeight - 32));
        liquidRect[0]->setSize(Vector2f(roomScale.x * 640, 32));
    }

    liquidButton[3]->setTextureRect(IntRect(0, 0, 160, 54));
}

static void Info_LiquidSetup()
{
    currentMenu = LIQUID;

    returnButton->freeze();

    ChangeLayerTo_Middle();

    blockMouse = true;
    setLiquidSpots = false;

    if (sectionb)
        liquidRect[1]->setOutlineThickness(2);
    else
        liquidRect[0]->setOutlineThickness(2);
}

static void Info_AutoscrollNone()
{
    levelAutoscrollPath.clear();

    levelAutoscroll = 0;

    autoscrollButton[3]->setTextureRect(IntRect(0, 54, 160, 54));
}

static void Info_AutoscrollA()
{
    if (levelAutoscroll == 2)
        levelAutoscrollPath.clear();

    levelAutoscroll = 1;

    autoscrollButton[3]->setTextureRect(IntRect(0, 0, 160, 54));
}

static void Info_AutoscrollB()
{
    if (levelAutoscroll == 1)
        levelAutoscrollPath.clear();

    levelAutoscroll = 2;

    autoscrollButton[3]->setTextureRect(IntRect(0, 0, 160, 54));
}

static void Info_AutoscrollSetup()
{
    currentMenu = AUTOSCROLL;

    if (levelAutoscroll == 1)
    {
        if (sectionb)
            Prefs_Section();
    }
    else
    {
        if (!sectionb)
            Prefs_Section();
    }

    returnButton->freeze();

    ChangeLayerTo_Middle();

    blockMouse = true;
}

static void Bowser_Check1()
{
    if (bowserAttacks[0])
        bowserAttacks[0] = 0;
    else
        bowserAttacks[0] = 1;
}

static void Bowser_Check2()
{
    if (bowserAttacks[1])
        bowserAttacks[1] = 0;
    else
        bowserAttacks[1] = 1;
}

static void Bowser_Check3()
{
    if (bowserAttacks[2])
        bowserAttacks[2] = 0;
    else
        bowserAttacks[2] = 1;
}

static void Bowser_Check4()
{
    if (bowserAttacks[3])
        bowserAttacks[3] = 0;
    else
        bowserAttacks[3] = 1;
}

static void Bowser_Check5()
{
    if (bowserAttacks[4])
        bowserAttacks[4] = 0;
    else
        bowserAttacks[4] = 1;
}

static void Bowser_Check6()
{
    if (bowserAttacks[5])
        bowserAttacks[5] = 0;
    else
        bowserAttacks[5] = 1;
}

static void Bowser_Check7()
{
    if (bowserMusic != 0)
    {
        bowserMusic = 0;

        if (resourcesArray[4] != NULL)
        {
            delete resourcesArray[4];
            resourcesArray[4] = NULL;
        }
    }
    else
        bowserMusic = 1;
}

static void Level_Save(const string& filename)
{
    ofstream levelFile;

    levelFile.open(filename.c_str(), ios::binary);

    if (!levelFile.good())
    {
        MessageBox(NULL, "Failed to create the Level file !", "Error !", MB_OK | MB_TASKMODAL | MB_ICONERROR);
        return;
    }

    {
        char CMLid[4];

        CMLid[0] = 'C';
        CMLid[1] = 'M';
        CMLid[2] = 'L';
        CMLid[3] = EDITOR_VERSION;

        levelFile.write(CMLid, 4);
    }

    {
        char nullChar = '\0';

        for (register unsigned int i = 0; i < 5; i++)
        {
            if (resourcesArray[i] == NULL)
                levelFile.write(&nullChar, 1);
            else
                levelFile.write(resourcesArray[i]->c_str(), resourcesArray[i]->size() + 1);
        }
    }

    levelFile.write(reinterpret_cast<char*>(&roomScale.x), 4);
    levelFile.write(reinterpret_cast<char*>(&roomScale.y), 4);
    levelFile.write(reinterpret_cast<char*>(&roomScaleb.x), 4);
    levelFile.write(reinterpret_cast<char*>(&roomScaleb.y), 4);

    levelFile.write(reinterpret_cast<char*>(&levelMusic), 1);
    levelFile.write(reinterpret_cast<char*>(&levelbMusic), 1);

    levelFile.write(reinterpret_cast<char*>(&levelBackground), 1);
    levelFile.write(reinterpret_cast<char*>(&levelbBackground), 1);

    levelFile.write(reinterpret_cast<char*>(&topColor.r), 1);
    levelFile.write(reinterpret_cast<char*>(&topColor.g), 1);
    levelFile.write(reinterpret_cast<char*>(&topColor.b), 1);
    levelFile.write(reinterpret_cast<char*>(&bottomColor.r), 1);
    levelFile.write(reinterpret_cast<char*>(&bottomColor.g), 1);
    levelFile.write(reinterpret_cast<char*>(&bottomColor.b), 1);
    levelFile.write(reinterpret_cast<char*>(&levelGradient), 1);

    levelFile.write(reinterpret_cast<char*>(&topColorb.r), 1);
    levelFile.write(reinterpret_cast<char*>(&topColorb.g), 1);
    levelFile.write(reinterpret_cast<char*>(&topColorb.b), 1);
    levelFile.write(reinterpret_cast<char*>(&bottomColorb.r), 1);
    levelFile.write(reinterpret_cast<char*>(&bottomColorb.g), 1);
    levelFile.write(reinterpret_cast<char*>(&bottomColorb.b), 1);
    levelFile.write(reinterpret_cast<char*>(&levelbGradient), 1);

    levelFile.write(reinterpret_cast<char*>(&levelEffect), 1);
    levelFile.write(reinterpret_cast<char*>(&levelEffectb), 1);

    levelFile.write(reinterpret_cast<char*>(&levelbEffect), 1);
    levelFile.write(reinterpret_cast<char*>(&levelbEffectb), 1);

    levelFile.write(reinterpret_cast<char*>(&startArea), 1);
    levelFile.write(reinterpret_cast<char*>(&levelGravity), 1);
    levelFile.write(reinterpret_cast<char*>(&levelTime), 2);

    levelFile.write(reinterpret_cast<char*>(&levelAutoscroll), 1);
    levelFile.write(reinterpret_cast<char*>(&levelAutoscrollSpeed), 4);

    {
        unsigned char nodeSize = levelAutoscrollPath.size();

        levelFile.write(reinterpret_cast<char*>(&nodeSize), 1);

        if (nodeSize > 0)
        {
            for (vector<Dragger>::iterator it = levelAutoscrollPath.begin(); it != levelAutoscrollPath.end(); it++)
            {
                Vector2f NodePos(it->getPosition());

                levelFile.write(reinterpret_cast<char*>(&NodePos.x), 4);
                levelFile.write(reinterpret_cast<char*>(&NodePos.y), 4);
            }
        }
    }

    levelFile.write(reinterpret_cast<char*>(&levelBackAlpha), 1);
    levelFile.write(reinterpret_cast<char*>(&levelFrontAlpha), 1);

    levelFile.write(reinterpret_cast<char*>(&levelBackAlphab), 1);
    levelFile.write(reinterpret_cast<char*>(&levelFrontAlphab), 1);

    levelFile.write(reinterpret_cast<char*>(&levelLiquidType), 1);
    levelFile.write(reinterpret_cast<char*>(&levelLiquidHeight), 4);

    {
        unsigned char spotSize = levelLiquidTrigger.size();

        levelFile.write(reinterpret_cast<char*>(&spotSize), 1);

        if (spotSize > 0)
        {
            for (vector<Trigger>::iterator it = levelLiquidTrigger.begin(); it != levelLiquidTrigger.end(); it++)
            {
                TriggerData data;

                data = it->save();

                levelFile.write(reinterpret_cast<char*>(&data), sizeof(TriggerData));
            }
        }
    }

    levelFile.write(reinterpret_cast<char*>(&levelLiquidTypeb), 1);
    levelFile.write(reinterpret_cast<char*>(&levelLiquidHeightb), 4);

    {
        unsigned char spotSize = levelLiquidTriggerb.size();

        levelFile.write(reinterpret_cast<char*>(&spotSize), 1);

        if (spotSize > 0)
        {
            for (vector<Trigger>::iterator it = levelLiquidTriggerb.begin(); it != levelLiquidTriggerb.end(); it++)
            {
                TriggerData data;

                data = it->save();

                levelFile.write(reinterpret_cast<char*>(&data), sizeof(TriggerData));
            }
        }
    }

    levelFile.write(reinterpret_cast<char*>(&levelLiquidSpeed), 4);

    levelFile.write(reinterpret_cast<char*>(&bowserAttacks[0]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserAttacks[1]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserAttacks[2]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserAttacks[3]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserAttacks[4]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserAttacks[5]), 1);

    levelFile.write(reinterpret_cast<char*>(&bowserFrequences[0]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserFrequences[1]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserFrequences[2]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserFrequences[3]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserFrequences[4]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserFrequences[5]), 1);

    levelFile.write(reinterpret_cast<char*>(&bowserSpeeds[0]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserSpeeds[1]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserSpeeds[2]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserSpeeds[3]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserSpeeds[4]), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserSpeeds[5]), 1);

    levelFile.write(reinterpret_cast<char*>(&bowserTrail), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserHealth), 1);
    levelFile.write(reinterpret_cast<char*>(&bowserMusic), 1);

    {
        char nullChar = '\0';

        if (levelName.empty())
            levelFile.write(&nullChar, 1);
        else
            levelFile.write(levelName.c_str(), levelName.size() + 1);

        if (levelAuthor.empty())
            levelFile.write(&nullChar, 1);
        else
            levelFile.write(levelAuthor.c_str(), levelAuthor.size() + 1);
    }

    {
        unsigned int listSize = listTile1.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 4);

        for (list<Tile>::iterator it = listTile1.begin(); it != listTile1.end(); it++)
        {
            TileData currentData = it->save();

            levelFile.write(reinterpret_cast<char*>(&currentData), sizeof(TileData));
        }
    }

    {
        unsigned int listSize = listTile2.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 4);

        for (list<Tile>::iterator it = listTile2.begin(); it != listTile2.end(); it++)
        {
            TileData currentData = it->save();

            levelFile.write(reinterpret_cast<char*>(&currentData), sizeof(TileData));
        }
    }

    {
        unsigned int listSize = listTile3.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 4);

        for (list<Tile>::iterator it = listTile3.begin(); it != listTile3.end(); it++)
        {
            TileData currentData = it->save();

            levelFile.write(reinterpret_cast<char*>(&currentData), sizeof(TileData));
        }
    }

    {
        unsigned int listSize = listTileb1.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 4);

        for (list<Tile>::iterator it = listTileb1.begin(); it != listTileb1.end(); it++)
        {
            TileData currentData = it->save();

            levelFile.write(reinterpret_cast<char*>(&currentData), sizeof(TileData));
        }
    }

    {
        unsigned int listSize = listTileb2.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 4);

        for (list<Tile>::iterator it = listTileb2.begin(); it != listTileb2.end(); it++)
        {
            TileData currentData = it->save();

            levelFile.write(reinterpret_cast<char*>(&currentData), sizeof(TileData));
        }
    }

    {
        unsigned int listSize = listTileb3.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 4);

        for (list<Tile>::iterator it = listTileb3.begin(); it != listTileb3.end(); it++)
        {
            TileData currentData = it->save();

            levelFile.write(reinterpret_cast<char*>(&currentData), sizeof(TileData));
        }
    }

    {
        unsigned short listSize = listSceneries.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 2);

        for (list<Entity*>::iterator it = listSceneries.begin(); it != listSceneries.end(); it++)
        {
            vector<float> currentData;
            unsigned char entType = (*it)->getType();

            levelFile.write(reinterpret_cast<char*>(&entType), 1);

            (*it)->save(currentData);

            for (vector<float>::iterator itb = currentData.begin(); itb != currentData.end(); itb++)
            {
                float currentValue = *itb;

                levelFile.write(reinterpret_cast<char*>(&currentValue), 4);
            }
        }
    }

    {
        unsigned short listSize = listEntities.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 2);

        for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
        {
            vector<float> currentData;
            unsigned char entType = (*it)->getType();

            levelFile.write(reinterpret_cast<char*>(&entType), 1);

            (*it)->save(currentData);

            for (vector<float>::iterator itb = currentData.begin(); itb != currentData.end(); itb++)
            {
                float currentValue = *itb;

                levelFile.write(reinterpret_cast<char*>(&currentValue), 4);
            }
        }
    }

    {
        unsigned short listSize = listBonus.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 2);

        for (list<Entity*>::iterator it = listBonus.begin(); it != listBonus.end(); it++)
        {
            vector<float> currentData;
            unsigned char entType = (*it)->getType();

            levelFile.write(reinterpret_cast<char*>(&entType), 1);

            (*it)->save(currentData);

            for (vector<float>::iterator itb = currentData.begin(); itb != currentData.end(); itb++)
            {
                float currentValue = *itb;

                levelFile.write(reinterpret_cast<char*>(&currentValue), 4);
            }
        }
    }

    {
        unsigned short listSize = listSceneriesb.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 2);

        for (list<Entity*>::iterator it = listSceneriesb.begin(); it != listSceneriesb.end(); it++)
        {
            vector<float> currentData;
            unsigned char entType = (*it)->getType();

            levelFile.write(reinterpret_cast<char*>(&entType), 1);

            (*it)->save(currentData);

            for (vector<float>::iterator itb = currentData.begin(); itb != currentData.end(); itb++)
            {
                float currentValue = *itb;

                levelFile.write(reinterpret_cast<char*>(&currentValue), 4);
            }
        }
    }

    {
        unsigned short listSize = listEntitiesb.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 2);

        for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
        {
            vector<float> currentData;
            unsigned char entType = (*it)->getType();

            levelFile.write(reinterpret_cast<char*>(&entType), 1);

            (*it)->save(currentData);

            for (vector<float>::iterator itb = currentData.begin(); itb != currentData.end(); itb++)
            {
                float currentValue = *itb;

                levelFile.write(reinterpret_cast<char*>(&currentValue), 4);
            }
        }
    }

    {
        unsigned short listSize = listBonusb.size();

        levelFile.write(reinterpret_cast<char*>(&listSize), 2);

        for (list<Entity*>::iterator it = listBonusb.begin(); it != listBonusb.end(); it++)
        {
            vector<float> currentData;
            unsigned char entType = (*it)->getType();

            levelFile.write(reinterpret_cast<char*>(&entType), 1);

            (*it)->save(currentData);

            for (vector<float>::iterator itb = currentData.begin(); itb != currentData.end(); itb++)
            {
                float currentValue = *itb;

                levelFile.write(reinterpret_cast<char*>(&currentValue), 4);
            }
        }
    }

    {
        unsigned char listSize = 0;

        for (list<EntWarps>::iterator it = listWarps.begin(); it != listWarps.end(); it++)
        {
            if (it->getEntrance())
                listSize++;
        }

        levelFile.write(reinterpret_cast<char*>(&listSize), 1);

        for (list<EntWarps>::iterator it = listWarps.begin(); it != listWarps.end(); it++)
        {
            if (it->getEntrance())
            {
                WarpsData currentData = it->save();

                levelFile.write(reinterpret_cast<char*>(&currentData), sizeof(WarpsData));
            }
        }
    }

    levelFile.close();

    FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(3), sfxSamples[7], 0, NULL);
}

static void Level_Load(const string& filename)
{
    ifstream levelFile;

    levelFile.open(filename.c_str(), ios::binary);

    if (!levelFile.good())
    {
        MessageBox(NULL, "Failed to open the Level file !", "Error !", MB_OK | MB_TASKMODAL | MB_ICONERROR);
        return;
    }

    if (!checkLoadResources(levelFile, filename.c_str()))
    {
        levelFile.close();
        return;
    }

    listTile1.clear();
    listTile2.clear();
    listTile3.clear();

    currentSelection = NONE;

    for (list<Entity*>::iterator it = listSceneries.begin(); it != listSceneries.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listBonus.begin(); it != listBonus.end(); it++)
        delete *it;

    listSceneries.clear();
    listEntities.clear();
    listBonus.clear();

    listTileb1.clear();
    listTileb2.clear();
    listTileb3.clear();

    for (list<Entity*>::iterator it = listSceneriesb.begin(); it != listSceneriesb.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listBonusb.begin(); it != listBonusb.end(); it++)
        delete *it;

    listSceneriesb.clear();
    listEntitiesb.clear();
    listBonusb.clear();

    listWarps.clear();

    levelLiquidTrigger.clear();
    levelLiquidTriggerb.clear();

    levelAutoscrollPath.clear();

    lastWarp = NULL;
    warpsCount = 0;

    for (register unsigned int i = 0; i < 57; i++)
        elementsEnemies[i]->Unselected();

    for (register unsigned int i = 0; i < 3; i++)
        elementsEsssential[i]->Unselected();

    for (register unsigned int i = 0; i < 35; i++)
        elementsPlatforms[i]->Unselected();

    for (register unsigned int i = 0; i < 30; i++)
        elementsBonus[i]->Unselected();

    for (register unsigned int i = 0; i < 36; i++)
        elementsPipes[i]->Unselected();

    for (register unsigned int i = 0; i < 26; i++)
        elementsSceneries[i]->Unselected();

    for (register unsigned int i = 0; i < 46; i++)
        elementsHazards[i]->Unselected();

    delete layer1TileMatrix;
    delete layer2TileMatrix;
    delete layer3TileMatrix;

    delete entityMatrix;

    delete layer1TileMatrixb;
    delete layer2TileMatrixb;
    delete layer3TileMatrixb;

    delete entityMatrixb;

    delete autoscrollPathLine;

    if (resourcesArray[0] != NULL)
    {
        delete resourcesArray[0];
        resourcesArray[0] = NULL;
    }

    if (resourcesArray[1] != NULL)
    {
        delete resourcesArray[1];
        resourcesArray[1] = NULL;
    }

    if (resourcesArray[2] != NULL)
    {
        delete resourcesArray[2];
        resourcesArray[2] = NULL;
    }

    if (resourcesArray[3] != NULL)
    {
        delete resourcesArray[3];
        resourcesArray[3] = NULL;
    }

    if (resourcesArray[4] != NULL)
    {
        delete resourcesArray[4];
        resourcesArray[4] = NULL;
    }

    if (backgroundTxt[12] != NULL)
    {
        delete backgroundTxt[12];

        backgroundTxt[12] = NULL;
    }

    if (backgroundTxt[13] != NULL)
    {
        delete backgroundTxt[13];

        backgroundTxt[13] = NULL;
    }

    if (background[12] != NULL)
    {
        delete background[12];

        background[12] = NULL;
    }

    if (background[13] != NULL)
    {
        delete background[13];

        background[13] = NULL;
    }

    if (musicSamples[22] != NULL)
    {
        FMOD_Sound_Release(musicSamples[22]);
        musicSamples[22] = NULL;
    }

    if (musicSamples[23] != NULL)
    {
        FMOD_Sound_Release(musicSamples[23]);
        musicSamples[23] = NULL;
    }

    if (musicSamples[24] != NULL)
    {
        FMOD_Sound_Release(musicSamples[24]);
        musicSamples[24] = NULL;
    }

    cameraSpeed = Vector2f(0, 0);

    camPos = Vector2i(320, 240);
    camPosMem = Vector2i(320, 240);

    levelFile.seekg(4, ios::beg);

    levelDir = filename;

    {
        TCHAR filePath[MAX_PATH];
        TCHAR getString[MAX_PATH];

        strcpy(filePath, filename.c_str());

        PathRemoveFileSpec(filePath);
        SetCurrentDirectory(filePath);

        for (register unsigned int i = 0; i < 5; i++)
        {
            levelFile.read(getString, 1);

            if (getString[0] != '\0')
            {
                levelFile.seekg(-1, ios::cur);

                for (register unsigned int j = 0; true; j++)
                {
                    levelFile.read(&getString[j], 1);

                    if (getString[j] == '\0')
                        break;
                }

                switch (i)
                {
                    case 0 :
                        FMOD_System_CreateStream(soundSystem, getString, FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[22]);

                        resourcesArray[0] = new string(getString);

                        break;
                    case 1 :
                        backgroundTxt[12] = new Texture;
                        backgroundTxt[12]->loadFromFile(getString);
                        backgroundTxt[12]->setRepeated(true);

                        background[12] = new RectangleShape;
                        background[12]->setTexture(backgroundTxt[12]);

                        resourcesArray[1] = new string(getString);

                        break;
                    case 2 :
                        FMOD_System_CreateStream(soundSystem, getString, FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[23]);

                        resourcesArray[2] = new string(getString);

                        break;
                    case 3 :
                        backgroundTxt[13] = new Texture;
                        backgroundTxt[13]->loadFromFile(getString);
                        backgroundTxt[13]->setRepeated(true);

                        background[13] = new RectangleShape;
                        background[13]->setTexture(backgroundTxt[13]);

                        resourcesArray[3] = new string(getString);

                        break;
                    case 4 :
                        FMOD_System_CreateStream(soundSystem, getString, FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[24]);

                        resourcesArray[4] = new string(getString);

                        break;
                }
            }
        }

        // Reset the current directory :
        GetModuleFileName(NULL, filePath, MAX_PATH);
        PathRemoveFileSpec(filePath);
        SetCurrentDirectory(filePath);
    }

    levelFile.read(reinterpret_cast<char*>(&roomScale.x), 4);
    levelFile.read(reinterpret_cast<char*>(&roomScale.y), 4);
    levelFile.read(reinterpret_cast<char*>(&roomScaleb.x), 4);
    levelFile.read(reinterpret_cast<char*>(&roomScaleb.y), 4);

    layer1TileMatrix = new Matrix(roomScale.x * 20, roomScale.y * 15);
    layer2TileMatrix = new Matrix(roomScale.x * 20, roomScale.y * 15);
    layer3TileMatrix = new Matrix(roomScale.x * 20, roomScale.y * 15);

    entityMatrix = new Matrix(roomScale.x * 20, roomScale.y * 15);

    layer1TileMatrixb = new Matrix(roomScaleb.x * 20, roomScaleb.y * 15);
    layer2TileMatrixb = new Matrix(roomScaleb.x * 20, roomScaleb.y * 15);
    layer3TileMatrixb = new Matrix(roomScaleb.x * 20, roomScaleb.y * 15);

    entityMatrixb = new Matrix(roomScaleb.x * 20, roomScaleb.y * 15);

    autoscrollPathLine = new VertexArray(LinesStrip);

    // Calling the subroutine :
    Level_LoadObjects(levelFile);
}

static void Level_LoadEntry()
{
    ifstream levelFile;

    levelFile.open(fileToLoad.c_str(), ios::binary);

    if (!levelFile.good())
    {
        MessageBox(NULL, "Failed to open the Level file !", "Error !", MB_OK | MB_TASKMODAL | MB_ICONERROR);
        return;
    }

    levelFile.seekg(4, ios::beg);

    levelDir = fileToLoad;

    {
        TCHAR filePath[MAX_PATH];
        TCHAR getString[MAX_PATH];

        strcpy(filePath, fileToLoad.c_str());

        PathRemoveFileSpec(filePath);
        SetCurrentDirectory(filePath);

        for (register unsigned int i = 0; i < 5; i++)
        {
            levelFile.read(getString, 1);

            if (getString[0] != '\0')
            {
                levelFile.seekg(-1, ios::cur);

                for (register unsigned int j = 0; true; j++)
                {
                    levelFile.read(&getString[j], 1);

                    if (getString[j] == '\0')
                        break;
                }

                switch (i)
                {
                    case 0 :
                        FMOD_System_CreateStream(soundSystem, getString, FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[22]);

                        resourcesArray[0] = new string(getString);

                        break;
                    case 1 :
                        backgroundTxt[12] = new Texture;
                        backgroundTxt[12]->loadFromFile(getString);
                        backgroundTxt[12]->setRepeated(true);

                        background[12] = new RectangleShape;
                        background[12]->setTexture(backgroundTxt[12]);

                        resourcesArray[1] = new string(getString);

                        break;
                    case 2 :
                        FMOD_System_CreateStream(soundSystem, getString, FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[23]);

                        resourcesArray[2] = new string(getString);

                        break;
                    case 3 :
                        backgroundTxt[13] = new Texture;
                        backgroundTxt[13]->loadFromFile(getString);
                        backgroundTxt[13]->setRepeated(true);

                        background[13] = new RectangleShape;
                        background[13]->setTexture(backgroundTxt[13]);

                        resourcesArray[3] = new string(getString);

                        break;
                    case 4 :
                        FMOD_System_CreateStream(soundSystem, getString, FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[24]);

                        resourcesArray[4] = new string(getString);

                        break;
                }
            }
        }

        // Reset the current directory :
        GetModuleFileName(NULL, filePath, MAX_PATH);
        PathRemoveFileSpec(filePath);
        SetCurrentDirectory(filePath);
    }

    levelFile.read(reinterpret_cast<char*>(&roomScale.x), 4);
    levelFile.read(reinterpret_cast<char*>(&roomScale.y), 4);
    levelFile.read(reinterpret_cast<char*>(&roomScaleb.x), 4);
    levelFile.read(reinterpret_cast<char*>(&roomScaleb.y), 4);

    layer1TileMatrix->resize(roomScale.x * 20, roomScale.y * 15);
    layer2TileMatrix->resize(roomScale.x * 20, roomScale.y * 15);
    layer3TileMatrix->resize(roomScale.x * 20, roomScale.y * 15);

    entityMatrix->resize(roomScale.x * 20, roomScale.y * 15);

    layer1TileMatrixb->resize(roomScaleb.x * 20, roomScaleb.y * 15);
    layer2TileMatrixb->resize(roomScaleb.x * 20, roomScaleb.y * 15);
    layer3TileMatrixb->resize(roomScaleb.x * 20, roomScaleb.y * 15);

    entityMatrixb->resize(roomScaleb.x * 20, roomScaleb.y * 15);

    // Calling the subroutine :
    Level_LoadObjects(levelFile);
}

static void Level_LoadObjects(ifstream& levelFile)
{
    levelFile.read(reinterpret_cast<char*>(&levelMusic), 1);
    levelFile.read(reinterpret_cast<char*>(&levelbMusic), 1);

    levelFile.read(reinterpret_cast<char*>(&levelBackground), 1);
    levelFile.read(reinterpret_cast<char*>(&levelbBackground), 1);

    levelFile.read(reinterpret_cast<char*>(&topColor.r), 1);
    levelFile.read(reinterpret_cast<char*>(&topColor.g), 1);
    levelFile.read(reinterpret_cast<char*>(&topColor.b), 1);
    levelFile.read(reinterpret_cast<char*>(&bottomColor.r), 1);
    levelFile.read(reinterpret_cast<char*>(&bottomColor.g), 1);
    levelFile.read(reinterpret_cast<char*>(&bottomColor.b), 1);
    levelFile.read(reinterpret_cast<char*>(&levelGradient), 1);

    levelFile.read(reinterpret_cast<char*>(&topColorb.r), 1);
    levelFile.read(reinterpret_cast<char*>(&topColorb.g), 1);
    levelFile.read(reinterpret_cast<char*>(&topColorb.b), 1);
    levelFile.read(reinterpret_cast<char*>(&bottomColorb.r), 1);
    levelFile.read(reinterpret_cast<char*>(&bottomColorb.g), 1);
    levelFile.read(reinterpret_cast<char*>(&bottomColorb.b), 1);
    levelFile.read(reinterpret_cast<char*>(&levelbGradient), 1);

    levelFile.read(reinterpret_cast<char*>(&levelEffect), 1);
    levelFile.read(reinterpret_cast<char*>(&levelEffectb), 1);

    levelFile.read(reinterpret_cast<char*>(&levelbEffect), 1);
    levelFile.read(reinterpret_cast<char*>(&levelbEffectb), 1);

    levelFile.read(reinterpret_cast<char*>(&startArea), 1);
    levelFile.read(reinterpret_cast<char*>(&levelGravity), 1);
    levelFile.read(reinterpret_cast<char*>(&levelTime), 2);

    levelFile.read(reinterpret_cast<char*>(&levelAutoscroll), 1);
    levelFile.read(reinterpret_cast<char*>(&levelAutoscrollSpeed), 4);

    {
        unsigned char nodeSize;

        levelFile.read(reinterpret_cast<char*>(&nodeSize), 1);

        if (nodeSize != 0)
        {
            for (register unsigned char i = 0; i < nodeSize; i++)
            {
                Vector2f currentNode;

                levelFile.read(reinterpret_cast<char*>(&currentNode.x), 4);
                levelFile.read(reinterpret_cast<char*>(&currentNode.y), 4);

                levelAutoscrollPath.emplace_back(Dragger(editorMoveable, liquidTriggerText, i));
                levelAutoscrollPath.back().setPosition(currentNode);

                autoscrollPathLine->append(Vertex(static_cast<Vector2f>(currentNode + Vector2f(16, 16)), Color::White));
            }
        }
    }

    levelFile.read(reinterpret_cast<char*>(&levelBackAlpha), 1);
    levelFile.read(reinterpret_cast<char*>(&levelFrontAlpha), 1);

    levelFile.read(reinterpret_cast<char*>(&levelBackAlphab), 1);
    levelFile.read(reinterpret_cast<char*>(&levelFrontAlphab), 1);

    levelFile.read(reinterpret_cast<char*>(&levelLiquidType), 1);
    levelFile.read(reinterpret_cast<char*>(&levelLiquidHeight), 4);

    switch (levelLiquidType)
    {
        case 1 :
            liquidRect[0]->setTexture(effectTxt[7]);
            liquidRect[0]->setSize(Vector2f(roomScale.x * 640, 16));
            liquidRect[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 16));

            liquidRect[0]->setPosition(Vector2f(0, levelLiquidHeight - 16));
            break;
        case 2 :
            liquidRect[0]->setTexture(hazardsTxt[0]);
            liquidRect[0]->setSize(Vector2f(roomScale.x * 640, 32));
            liquidRect[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 32));

            liquidRect[0]->setPosition(Vector2f(0, levelLiquidHeight - 32));
            break;
    }

    {
        unsigned char spotSize;

        levelFile.read(reinterpret_cast<char*>(&spotSize), 1);

        if (spotSize != 0)
        {
            for (register unsigned char i = 0; i < spotSize; i++)
            {
                TriggerData data;

                levelFile.read(reinterpret_cast<char*>(&data), sizeof(TriggerData));

                levelLiquidTrigger.emplace_back(Trigger(Vector2f(data.x, data.y), Vector2f(data.width, data.height), levelLiquidTrigger.size(), liquidTriggerText, editorMoveable, liquidRegulatorTex, data.targetHeight));
            }
        }
    }

    levelFile.read(reinterpret_cast<char*>(&levelLiquidTypeb), 1);
    levelFile.read(reinterpret_cast<char*>(&levelLiquidHeightb), 4);

    switch (levelLiquidTypeb)
    {
        case 1 :
            liquidRect[1]->setTexture(effectTxt[7]);
            liquidRect[1]->setSize(Vector2f(roomScaleb.x * 640, 16));
            liquidRect[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 16));

            liquidRect[1]->setPosition(Vector2f(0, levelLiquidHeightb - 16));
            break;
        case 2 :
            liquidRect[1]->setTexture(hazardsTxt[0]);
            liquidRect[1]->setSize(Vector2f(roomScaleb.x * 640, 32));
            liquidRect[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 32));

            liquidRect[1]->setPosition(Vector2f(0, levelLiquidHeightb - 32));
            break;
    }

    {
        unsigned char spotSize;

        levelFile.read(reinterpret_cast<char*>(&spotSize), 1);

        if (spotSize != 0)
        {
            for (register unsigned char i = 0; i < spotSize; i++)
            {
                TriggerData data;

                levelFile.read(reinterpret_cast<char*>(&data), sizeof(TriggerData));

                levelLiquidTriggerb.emplace_back(Trigger(Vector2f(data.x, data.y), Vector2f(data.width, data.height), levelLiquidTriggerb.size(), liquidTriggerText, editorMoveable, liquidRegulatorTex, data.targetHeight));
            }
        }
    }

    levelFile.read(reinterpret_cast<char*>(&levelLiquidSpeed), 4);

    levelFile.read(reinterpret_cast<char*>(&bowserAttacks[0]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserAttacks[1]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserAttacks[2]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserAttacks[3]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserAttacks[4]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserAttacks[5]), 1);

    levelFile.read(reinterpret_cast<char*>(&bowserFrequences[0]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserFrequences[1]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserFrequences[2]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserFrequences[3]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserFrequences[4]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserFrequences[5]), 1);

    levelFile.read(reinterpret_cast<char*>(&bowserSpeeds[0]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserSpeeds[1]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserSpeeds[2]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserSpeeds[3]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserSpeeds[4]), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserSpeeds[5]), 1);

    levelFile.read(reinterpret_cast<char*>(&bowserTrail), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserHealth), 1);
    levelFile.read(reinterpret_cast<char*>(&bowserMusic), 1);

    {
        TCHAR getString[MAX_PATH];

        levelFile.read(getString, 1);

        if (getString[0] != '\0')
        {
            levelFile.seekg(-1, ios::cur);

            for (register unsigned int j = 0; true; j++)
            {
                levelFile.read(&getString[j], 1);

                if (getString[j] == '\0')
                    break;
            }

            levelName = getString;
        }
        else
            levelName.clear();
    }

    {
        TCHAR getString[MAX_PATH];

        levelFile.read(getString, 1);

        if (getString[0] != '\0')
        {
            levelFile.seekg(-1, ios::cur);

            for (register unsigned int j = 0; true; j++)
            {
                levelFile.read(&getString[j], 1);

                if (getString[j] == '\0')
                    break;
            }

            levelAuthor = getString;
        }
        else
            levelAuthor.clear();
    }

    {
        unsigned int listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 4);

        if (listSize != 0)
        {
            for (register unsigned int i = 0; i < listSize; i++)
            {
                TileData currentData;

                levelFile.read(reinterpret_cast<char*>(&currentData), sizeof(TileData));

                listTile1.emplace_back(Tile(currentData.x, currentData.y, currentData.tilex, currentData.tiley));

                if (currentData.tilex < 18)
                    layer1TileMatrix->setValue(currentData.x / 32, currentData.y / 32, 1);
                else
                    layer1TileMatrix->setValue(currentData.x / 32, currentData.y / 32, 2);
            }
        }
    }

    {
        unsigned int listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 4);

        if (listSize != 0)
        {
            for (register unsigned int i = 0; i < listSize; i++)
            {
                TileData currentData;

                levelFile.read(reinterpret_cast<char*>(&currentData), sizeof(TileData));

                listTile2.emplace_back(Tile(currentData.x, currentData.y, currentData.tilex, currentData.tiley));

                if (currentData.tilex < 18)
                    layer2TileMatrix->setValue(currentData.x / 32, currentData.y / 32, 1);
                else
                    layer2TileMatrix->setValue(currentData.x / 32, currentData.y / 32, 2);
            }
        }
    }

    {
        unsigned int listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 4);

        if (listSize != 0)
        {
            for (register unsigned int i = 0; i < listSize; i++)
            {
                TileData currentData;

                levelFile.read(reinterpret_cast<char*>(&currentData), sizeof(TileData));

                listTile3.emplace_back(Tile(currentData.x, currentData.y, currentData.tilex, currentData.tiley));

                if (currentData.tilex < 18)
                    layer3TileMatrix->setValue(currentData.x / 32, currentData.y / 32, 1);
                else
                    layer3TileMatrix->setValue(currentData.x / 32, currentData.y / 32, 2);
            }
        }
    }

    {
        unsigned int listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 4);

        if (listSize != 0)
        {
            for (register unsigned int i = 0; i < listSize; i++)
            {
                TileData currentData;

                levelFile.read(reinterpret_cast<char*>(&currentData), sizeof(TileData));

                listTileb1.emplace_back(Tile(currentData.x, currentData.y, currentData.tilex, currentData.tiley));

                if (currentData.tilex < 18)
                    layer1TileMatrixb->setValue(currentData.x / 32, currentData.y / 32, 1);
                else
                    layer1TileMatrixb->setValue(currentData.x / 32, currentData.y / 32, 2);
            }
        }
    }

    {
        unsigned int listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 4);

        if (listSize != 0)
        {
            for (register unsigned int i = 0; i < listSize; i++)
            {
                TileData currentData;

                levelFile.read(reinterpret_cast<char*>(&currentData), sizeof(TileData));

                listTileb2.emplace_back(Tile(currentData.x, currentData.y, currentData.tilex, currentData.tiley));

                if (currentData.tilex < 18)
                    layer2TileMatrixb->setValue(currentData.x / 32, currentData.y / 32, 1);
                else
                    layer2TileMatrixb->setValue(currentData.x / 32, currentData.y / 32, 2);
            }
        }
    }

    {
        unsigned int listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 4);

        if (listSize != 0)
        {
            for (register unsigned int i = 0; i < listSize; i++)
            {
                TileData currentData;

                levelFile.read(reinterpret_cast<char*>(&currentData), sizeof(TileData));

                listTileb3.emplace_back(Tile(currentData.x, currentData.y, currentData.tilex, currentData.tiley));

                if (currentData.tilex < 18)
                    layer3TileMatrixb->setValue(currentData.x / 32, currentData.y / 32, 1);
                else
                    layer3TileMatrixb->setValue(currentData.x / 32, currentData.y / 32, 2);
            }
        }
    }

    switch (layerNumb)
    {
        case 0 : ChangeLayerTo_Back(); break;
        case 1 : ChangeLayerTo_Middle(); break;
        case 2 : ChangeLayerTo_Front(); break;
    }

    {
        unsigned short listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 2);

        if (listSize != 0)
        {
            for (register unsigned short i = 0; i < listSize; i++)
            {
                Vector2f entPos;
                unsigned char entType;

                levelFile.read(reinterpret_cast<char*>(&entType), 1);

                levelFile.read(reinterpret_cast<char*>(&entPos.x), 4);
                levelFile.read(reinterpret_cast<char*>(&entPos.y), 4);

                switch (entType)
                {
                    case 92 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GREEN_TREE, entPos.x, entPos.y, -1, 32, 92)); break;
                    case 93 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GREEN_BIGTREE, entPos.x, entPos.y, 0, 64, 93)); break;
                    case 94 : listSceneries.emplace_back(new Entity_MultiText(sceneriesTxt[0], IntRect(0, 0, 65, 30), entPos.x, entPos.y, 16, -2, 94)); break;
                    case 95 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GRAY_TREE, entPos.x, entPos.y, -1, 32, 95)); break;
                    case 96 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GRAY_BIGTREE, entPos.x, entPos.y, 0, 64, 96)); break;
                    case 97 : listSceneries.emplace_back(new Entity_MultiText(sceneriesTxt[1], IntRect(0, 0, 65, 30), entPos.x, entPos.y, 16, -2, 97)); break;
                    case 98 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_YELLOW_TREE, entPos.x, entPos.y, -1, 32, 98)); break;
                    case 99 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_YELLOW_BIGTREE, entPos.x, entPos.y, 0, 64, 99)); break;
                    case 100 : listSceneries.emplace_back(new Entity_MultiText(sceneriesTxt[2], IntRect(0, 0, 65, 30), entPos.x, entPos.y, 16, -2, 100)); break;
                    case 101 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_RED_TREE, entPos.x, entPos.y, -1, 32, 101)); break;
                    case 102 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_RED_BIGTREE, entPos.x, entPos.y, 0, 64, 102)); break;
                    case 103 : listSceneries.emplace_back(new Entity_MultiText(sceneriesTxt[3], IntRect(0, 0, 65, 30), entPos.x, entPos.y, 16, -2, 103)); break;
                    case 104 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_BLUE_TREE, entPos.x, entPos.y, -1, 32, 104)); break;
                    case 105 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_BLUE_BIGTREE, entPos.x, entPos.y, 0, 64, 105)); break;
                    case 106 : listSceneries.emplace_back(new Entity_MultiText(sceneriesTxt[4], IntRect(0, 0, 65, 30), entPos.x, entPos.y, 16, -2, 106)); break;
                    case 107 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_FENCE, entPos.x, entPos.y, 64, 0, 107)); break;
                    case 108 : listSceneries.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_SNOWFENCE, entPos.x, entPos.y, 64, 0, 108)); break;
                    case 109 : listSceneries.emplace_back(new Entity_MultiText(sceneriesTxt[5], IntRect(0, 0, 63, 48), entPos.x, entPos.y, 15, 8, 109)); break;
                    case 110 : listSceneries.emplace_back(new Entity_MultiText(sceneriesTxt[6], IntRect(0, 0, 63, 48), entPos.x, entPos.y, 15, 8, 110)); break;
                    case 111 : listSceneries.emplace_back(new Entity(sceneriesTxt[7], entPos.x, entPos.y, 47, 128, 111)); break;
                    case 112 : listSceneries.emplace_back(new Entity(sceneriesTxt[8], entPos.x, entPos.y, 77, 128, 112)); break;
                    case 113 : listSceneries.emplace_back(new Entity(sceneriesTxt[9], entPos.x, entPos.y, 141, 160, 113)); break;
                    case 229 : listSceneries.emplace_back(new Entity_MultiText(sceneriesTxt[10], IntRect(0, 0, 95, 91), entPos.x, entPos.y, 31, -5, 229)); break;
                    case 230 : listSceneries.emplace_back(new Entity_MultiText(sceneriesTxt[11], IntRect(0, 0, 54, 64), entPos.x, entPos.y, 11, 0, 230)); break;
                    case 231 : listSceneries.emplace_back(new Entity(sceneriesTxt[12], entPos.x, entPos.y, 77, 128, 231)); break;
                    case 232 : listSceneries.emplace_back(new Entity(sceneriesTxt[13], entPos.x, entPos.y, 141, 160, 232)); break;
                }

                entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);
            }
        }
    }

    {
        unsigned short listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 2);

        if (listSize != 0)
        {
            for (register unsigned short i = 0; i < listSize; i++)
            {
                vector<float> entData;
                unsigned char entType;
                float currentData;

                levelFile.read(reinterpret_cast<char*>(&entType), 1);

                switch (entType)
                {
                    case 0 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);
                        startPosition.x = currentData;

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);
                        startPosition.y = currentData;

                        sectionb = false;

                        camPos = static_cast<Vector2i>(startPosition) + Vector2i(16, 16);

                        if (camPos.x < 320)
                            camPos.x = 320;

                        if (camPos.y < 240)
                            camPos.y = 240;

                        if (camPos.x > roomScale.x * 640 - 320)
                            camPos.x = roomScale.x * 640 - 320;

                        if (camPos.y > roomScale.y * 480 - 240)
                            camPos.y = roomScale.y * 480 - 240;

                        listEntities.emplace_back(new Entity_MultiText(marioTxt[1], IntRect(48, 8, 31, 56), entData[0], entData[1], 0, 24, 0));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1]/32) - 1, 3);

                        break;
                    case 1 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(marksTxt[7], IntRect(107, 0, 107, 111), entData[0], entData[1], 28, 79, 1));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1]/32) - 1, 3);

                        break;
                    case 2 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new LevelEnd_Entity(marksTxt[8], marksTxt[9], editorMoveable, entData[0], entData[1]));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 3 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 32, 0, 32, 3, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 4 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 32, 0, 32, 4, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 5 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 32, 0, 32, 5, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 6 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 32, 0, 32, 6, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 7 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new FallPlatform_Entity(marksTxt[0], editorTxt[0], entData[0], entData[1], 32, 0, 32, 7, false));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 8 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 0, 0, 0, 8, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 9 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 0, 0, 0, 9, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 10 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 0, 0, 0, 10, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 11 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 0, 0, 0, 11, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 12 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new FallPlatform_Entity(marksTxt[1], editorTxt[0], entData[0], entData[1], 0, 0, 0, 12, false));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 13 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 45, 0, 45, 13, true));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 14 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 45, 0, 45, 14, true));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 15 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 45, 0, 45, 15, true));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 16 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 45, 0, 45, 16, true));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 17 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new FallPlatform_Entity(marksTxt[2], editorTxt[0], entData[0], entData[1], 45, 0, 45, 17, true));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 18 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 43, 0, 43, 18, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 19 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 43, 0, 43, 19, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 20 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 43, 0, 43, 20, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 21 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 43, 0, 43, 21, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 22 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new FallPlatform_Entity(marksTxt[3], editorTxt[0], entData[0], entData[1], 43, 0, 43, 22, false));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 23 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(marksTxt[4], IntRect(0, 0, 32, 64), entData[0], entData[1], 0, 32, 23));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1]/32) - 1, 2);

                        break;
                    case 24 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(marksTxt[5], IntRect(0, 0, 32, 64), entData[0], entData[1], 0, 32, 24));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1]/32) - 1, 2);

                        break;
                    case 25 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(marksTxt[6], IntRect(0, 0, 32, 64), entData[0], entData[1], 0, 32, 25));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1]/32) - 1, 2);

                        break;
                    case 114 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[0], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 114));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 115 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[1], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 115));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 116 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[2], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 116));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 117 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[3], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 117));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 118 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[4], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 118));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 119 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[5], IntRect(0, 0, 32, 47), entData[0], entData[1], 0, 15, 119));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 120 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[6], IntRect(0, 0, 32, 47), entData[0], entData[1], 0, 15, 120));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 121 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[7], IntRect(0, 0, 32, 47), entData[0], entData[1], 0, 15, 121));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 122 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[8], IntRect(0, 0, 32, 47), entData[0], entData[1], 0, 15, 122));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 123 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[14], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 123));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 124 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[15], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 124));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 125 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[16], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 125));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 126 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[17], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 126));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 127 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalEnemy_Entity(enemiesTxt[9], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 127));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 128 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalEnemy_Entity(enemiesTxt[10], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 128));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 129 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new HorizontalEnemy_Entity(enemiesTxt[11], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 129));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 130 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalEnemy_Entity(enemiesTxt[9], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 130));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 131 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalEnemy_Entity(enemiesTxt[10], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 131));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 132 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new VerticalEnemy_Entity(enemiesTxt[11], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 132));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 133 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entityj(enemiesTxt[9], editorTxt[0], entData[0], entData[1], 0, 14, 133));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 134 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entityj(enemiesTxt[10], editorTxt[0], entData[0], entData[1], 0, 14, 134));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 135 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entityj(enemiesTxt[11], editorTxt[0], entData[0], entData[1], 0, 14, 135));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 136 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[12], IntRect(0, 0, 32, 47), entData[0], entData[1], 0, 14, 136));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 137 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), entData[0], entData[1], -17, 15, 137));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 138 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), entData[0], entData[1], 16, 15, 138, 1, 270));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 139 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), entData[0], entData[1], 15, 47, 139, 1, 90));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 140 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), entData[0], entData[1], 48, 47, 140, 1, 180));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 141 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), entData[0], entData[1], -17, 15, 141));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 142 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), entData[0], entData[1], 16, 15, 142, 1, 270));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 143 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), entData[0], entData[1], 15, 47, 143, 1, 90));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 144 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), entData[0], entData[1], 48, 47, 144, 1, 180));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 145 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), entData[0], entData[1], -17, 15, 145));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 146 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), entData[0], entData[1], 16, 15, 146, 1, 270));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 147 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), entData[0], entData[1], 15, 47, 147, 1, 90));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 148 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), entData[0], entData[1], 48, 47, 148, 1, 180));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 149 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[21], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 149));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 150 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[22], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 150));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 151 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[23], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 151));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 152 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[24], IntRect(0, 0, 31, 37), entData[0], entData[1], 0, 5, 152));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 153 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[25], IntRect(76, 0, 38, 48), entData[0], entData[1], 5, 16, 153));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 154 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[26], IntRect(76, 0, 38, 48), entData[0], entData[1], 5, 16, 154));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 155 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[27], IntRect(66, 0, 33, 48), entData[0], entData[1], 0, 16, 155));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 156 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[28], IntRect(76, 0, 38, 48), entData[0], entData[1], 5, 16, 156));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 157 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[29], IntRect(76, 0, 38, 48), entData[0], entData[1], 5, 16, 157));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 158 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(32, 0, 31, 48), entData[0], entData[1], 0, 16, 158));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 159 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(63, 0, 31, 48), entData[0], entData[1], 0, 16, 159));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 160 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(94, 0, 31, 48), entData[0], entData[1], 0, 16, 160));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 161 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[37], IntRect(0, 0, 32, 32), entData[0], entData[1], 0, 0, 161));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 162 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(0, 0, 32, 32), entData[0], entData[1], 0, 0, 162));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 163 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(0, 0, 32, 32), entData[0], entData[1], 0, 0, 163, 1, 0, true));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 164 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[38], IntRect(0, 0, 54, 68), entData[0], entData[1], 10, 4, 164));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1] / 32) + 1, 3);

                        break;
                    case 165 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[38], IntRect(0, 0, 54, 68), entData[0], entData[1], 44, 36, 165, 1, 180));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrix->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 166 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[39], IntRect(0, 0, 64, 72), entData[0], entData[1], 16, 40, 166));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 167 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), entData[0], entData[1], 0, 2, 167));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 168 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), entData[0], entData[1], 32, 34, 168, 1, 180));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 169 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), entData[0], entData[1], 32, 2, 169, 1, 270));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 170 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), entData[0], entData[1], 0, 34, 170, 1, 90));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 171 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_LAVABOTTOM, entData[0], entData[1], 0, 0, 171));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 172 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Podoboo_Entity(hazardsTxt[1], editorTxt[1], editorMoveable, entData[0], entData[1], -3, 0));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 173 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new PodobooD_Entity(hazardsTxt[1], editorTxt[1], editorMoveable, entData[0], entData[1], 30, 32));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 174 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new PodobooL_Entity(hazardsTxt[1], editorTxt[1], editorMoveable, entData[0], entData[1], 30, 0));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 175 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new PodobooR_Entity(hazardsTxt[1], editorTxt[1], editorMoveable, entData[0], entData[1], -3, 32));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 176 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entityj(hazardsTxt[1], editorTxt[0], entData[0], entData[1], -3, 0, 176, 0, true));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 177 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entityj(hazardsTxt[1], editorTxt[0], entData[0], entData[1], 30, 32, 177, 180, true));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 178 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entityj(hazardsTxt[1], editorTxt[0], entData[0], entData[1], 30, 0, 178, 270, true));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 179 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entityj(hazardsTxt[1], editorTxt[0], entData[0], entData[1], -3, 32, 179, 90, true));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 180 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKETOP, entData[0], entData[1], 0, 0, 180));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 181 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKEBOTTOM, entData[0], entData[1], 0, 0, 181));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 182 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKELEFT, entData[0], entData[1], 0, 0, 182));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 183 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKERIGHT, entData[0], entData[1], 0, 0, 183));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 184 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity(hazardsTxt[2], entData[0], entData[1], 0, -1, 184));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 185 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_Rotation(hazardsTxt[2], entData[0], entData[1], 180, 32, 31, 185));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 186 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_Rotation(hazardsTxt[2], entData[0], entData[1], 270, 32, -1, 186));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 187 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_Rotation(hazardsTxt[2], entData[0], entData[1], 90, 0, 31, 187));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 188 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), entData[0], entData[1], 0, -1, 188));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 189 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), entData[0], entData[1], 32, 31, 189, 1, 180));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 190 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), entData[0], entData[1], 32, -1, 190, 1, 270));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 191 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), entData[0], entData[1], 0, 31, 191, 1, 90));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 192 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLTOP, entData[0], entData[1], 0, 0, 192));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 193 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLTOPB, entData[0], entData[1], 0, 0, 193));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 194 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLMIDV, entData[0], entData[1], 0, 0, 194));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 195 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLBOT, entData[0], entData[1], 0, 0, 195));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 196 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLBOTB, entData[0], entData[1], 0, 0, 196));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 197 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLLEF, entData[0], entData[1], 0, 0, 197));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 198 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLLEFB, entData[0], entData[1], 0, 0, 198));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 199 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLMIDH, entData[0], entData[1], 0, 0, 199));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 200 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLRIG, entData[0], entData[1], 0, 0, 200));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 201 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLRIGB, entData[0], entData[1], 0, 0, 201));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 202 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, NULL, entData[0], entData[1], -1, -1, 202, true));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 203 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, editorTxt[3], entData[0], entData[1], -1, -1, 203, true));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 204 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, NULL, entData[0], entData[1], -1, -1, 204, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 205 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, editorTxt[3], entData[0], entData[1], -1, -1, 205, false));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 206 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity(hazardsTxt[5], entData[0], entData[1], 0, 0, 206));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrix->setValue((entData[0] / 32) + 1, entData[1] / 32, 2);

                        break;
                    case 207 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(32, 0, 64, 32), entData[0], entData[1], 32, 0, 207));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrix->setValue((entData[0] / 32) - 1, entData[1] / 32, 2);

                        break;
                    case 208 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity(hazardsTxt[6], entData[0], entData[1], 2, 37, 208));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 209 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(96, 0, 56, 69), entData[0], entData[1], 23, 37, 209));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 210 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity(hazardsTxt[8], entData[0], entData[1], 12, 8, 210));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 211 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_Rotation(hazardsTxt[8], entData[0], entData[1], 180, 45, 40, 211));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 212 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        for (register unsigned int i = 0; i < entData[2]; i++)
                        {
                            levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                            entData.emplace_back(currentData);

                            levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                            entData.emplace_back(currentData);
                        }

                        listEntities.emplace_back(new Centipede_Entity(editorTxt[3], editorMoveable, nodesTex, entData[0], entData[1], 0, 0));
                        listEntities.back()->load(entData);

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrix->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrix->setValue((entData[0] / 32) + 1, entData[1] / 32, 2);
                        layer2TileMatrix->setValue((entData[0] / 32) + 2, entData[1] / 32, 2);
                        layer2TileMatrix->setValue((entData[0] / 32) + 3, entData[1] / 32, 2);
                        layer2TileMatrix->setValue((entData[0] / 32) + 4, entData[1] / 32, 2);
                        layer2TileMatrix->setValue((entData[0] / 32) + 5, entData[1] / 32, 2);

                        break;
                    case 225 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), entData[0], entData[1], -1, -1, 225));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 226 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), entData[0], entData[1], 32, -1, 226, 1, 270));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 227 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), entData[0], entData[1], -1, 31, 227, 1, 90));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 228 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntities.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), entData[0], entData[1], 32, 32, 228, 1, 180));

                        entityMatrix->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                }
            }
        }
    }

    {
        unsigned short listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 2);

        if (listSize != 0)
        {
            for (register unsigned short i = 0; i < listSize; i++)
            {
                Vector2f entPos;
                unsigned char entType;

                levelFile.read(reinterpret_cast<char*>(&entType), 1);

                levelFile.read(reinterpret_cast<char*>(&entPos.x), 4);
                levelFile.read(reinterpret_cast<char*>(&entPos.y), 4);

                switch (entType)
                {
                    case 26 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(32, 0, 32, 32), entPos.x, entPos.y, 0, 0, 26));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 27 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(64, 0, 32, 32), entPos.x, entPos.y, 0, 0, 27));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 28 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(96, 0, 32, 32), entPos.x, entPos.y, 0, 0, 28));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 29 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(128, 0, 32, 32), entPos.x, entPos.y, 0, 0, 29));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 30 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(160, 0, 32, 32), entPos.x, entPos.y, 0, 0, 30));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 31 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(192, 0, 32, 32), entPos.x, entPos.y, 0, 0, 31));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 32 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(32, 0, 32, 32), entPos.x, entPos.y, 0, 0, 32, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 33 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(64, 0, 32, 32), entPos.x, entPos.y, 0, 0, 33, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 34 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(96, 0, 32, 32), entPos.x, entPos.y, 0, 0, 34, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 35 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(128, 0, 32, 32), entPos.x, entPos.y, 0, 0, 35, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 36 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(160, 0, 32, 32), entPos.x, entPos.y, 0, 0, 36, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 37 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(192, 0, 32, 32), entPos.x, entPos.y, 0, 0, 37, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 38 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(224, 0, 32, 32), entPos.x, entPos.y, 0, 0, 38, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 39 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(256, 0, 32, 32), entPos.x, entPos.y, 0, 0, 39, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 40 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(288, 0, 32, 32), entPos.x, entPos.y, 0, 0, 40, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 41 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(320, 0, 32, 32), entPos.x, entPos.y, 0, 0, 41, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 42 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(352, 0, 32, 32), entPos.x, entPos.y, 0, 0, 42, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 43 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(384, 0, 32, 32), entPos.x, entPos.y, 0, 0, 43, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 44 :
                        listBonus.emplace_back(new Entity(itemsTxt[3], entPos.x, entPos.y, 0, 0, 44));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 45 :
                        listBonus.emplace_back(new Entity_MultiText(itemsTxt[4], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 45));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 46 :
                        listBonus.emplace_back(new Entity_MultiText(itemsTxt[5], IntRect(0, 0, 27, 34), entPos.x, entPos.y, -3, 2, 46));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 47 :
                        listBonus.emplace_back(new Entity_MultiText(itemsTxt[6], IntRect(0, 0, 30, 31), entPos.x, entPos.y, -1, -1, 47));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 48 :
                        listBonus.emplace_back(new Entity_MultiText(itemsTxt[7], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 48));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 49 :
                        listBonus.emplace_back(new Entity(itemsTxt[8], entPos.x, entPos.y, 0, 0, 49));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 50 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 50));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 51 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 51, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 52 :
                        listBonus.emplace_back(new Entity_MultiText(itemsTxt[2], IntRect(0, 0, 19, 28), entPos.x, entPos.y, -7, -2, 52));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        break;
                    case 53 :
                        listBonus.emplace_back(new Entity_MultiText(itemsTxt[1], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 53));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 54 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(416, 0, 32, 32), entPos.x, entPos.y, 0, 0, 54));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 55 :
                        listBonus.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(448, 0, 32, 32), entPos.x, entPos.y, 0, 0, 55));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 213 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 213));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 214 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 214, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 215 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 215));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 216 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(32, 0, 32, 32), entPos.x, entPos.y, 0, 0, 216));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 217 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(32, 0, 32, 32), entPos.x, entPos.y, 0, 0, 217, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 218 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(32, 0, 32, 32), entPos.x, entPos.y, 0, 0, 218));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 219 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(64, 0, 32, 32), entPos.x, entPos.y, 0, 0, 219));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 220 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(64, 0, 32, 32), entPos.x, entPos.y, 0, 0, 220, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 221 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(64, 0, 32, 32), entPos.x, entPos.y, 0, 0, 221));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 222 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(96, 0, 32, 32), entPos.x, entPos.y, 0, 0, 222));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 223 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(96, 0, 32, 32), entPos.x, entPos.y, 0, 0, 223, 1, 0, true));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 224 :
                        listBonus.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(96, 0, 32, 32), entPos.x, entPos.y, 0, 0, 224));

                        entityMatrix->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrix->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                }
            }
        }
    }

    {
        unsigned short listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 2);

        if (listSize != 0)
        {
            for (register unsigned short i = 0; i < listSize; i++)
            {
                Vector2f entPos;
                unsigned char entType;

                levelFile.read(reinterpret_cast<char*>(&entType), 1);

                levelFile.read(reinterpret_cast<char*>(&entPos.x), 4);
                levelFile.read(reinterpret_cast<char*>(&entPos.y), 4);

                switch (entType)
                {
                    case 92 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GREEN_TREE, entPos.x, entPos.y, -1, 32, 92)); break;
                    case 93 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GREEN_BIGTREE, entPos.x, entPos.y, 0, 64, 93)); break;
                    case 94 : listSceneriesb.emplace_back(new Entity_MultiText(sceneriesTxt[0], IntRect(0, 0, 65, 30), entPos.x, entPos.y, 16, -2, 94)); break;
                    case 95 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GRAY_TREE, entPos.x, entPos.y, -1, 32, 95)); break;
                    case 96 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_GRAY_BIGTREE, entPos.x, entPos.y, 0, 64, 96)); break;
                    case 97 : listSceneriesb.emplace_back(new Entity_MultiText(sceneriesTxt[1], IntRect(0, 0, 65, 30), entPos.x, entPos.y, 16, -2, 97)); break;
                    case 98 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_YELLOW_TREE, entPos.x, entPos.y, -1, 32, 98)); break;
                    case 99 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_YELLOW_BIGTREE, entPos.x, entPos.y, 0, 64, 99)); break;
                    case 100 : listSceneriesb.emplace_back(new Entity_MultiText(sceneriesTxt[2], IntRect(0, 0, 65, 30), entPos.x, entPos.y, 16, -2, 100)); break;
                    case 101 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_RED_TREE, entPos.x, entPos.y, -1, 32, 101)); break;
                    case 102 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_RED_BIGTREE, entPos.x, entPos.y, 0, 64, 102)); break;
                    case 103 : listSceneriesb.emplace_back(new Entity_MultiText(sceneriesTxt[3], IntRect(0, 0, 65, 30), entPos.x, entPos.y, 16, -2, 103)); break;
                    case 104 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_BLUE_TREE, entPos.x, entPos.y, -1, 32, 104)); break;
                    case 105 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_BLUE_BIGTREE, entPos.x, entPos.y, 0, 64, 105)); break;
                    case 106 : listSceneriesb.emplace_back(new Entity_MultiText(sceneriesTxt[4], IntRect(0, 0, 65, 30), entPos.x, entPos.y, 16, -2, 106)); break;
                    case 107 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_FENCE, entPos.x, entPos.y, 64, 0, 107)); break;
                    case 108 : listSceneriesb.emplace_back(new Entity_MultiText(mainTileset, TILE_SCENERY_SNOWFENCE, entPos.x, entPos.y, 64, 0, 108)); break;
                    case 109 : listSceneriesb.emplace_back(new Entity_MultiText(sceneriesTxt[5], IntRect(0, 0, 63, 48), entPos.x, entPos.y, 15, 8, 109)); break;
                    case 110 : listSceneriesb.emplace_back(new Entity_MultiText(sceneriesTxt[6], IntRect(0, 0, 63, 48), entPos.x, entPos.y, 15, 8, 110)); break;
                    case 111 : listSceneriesb.emplace_back(new Entity(sceneriesTxt[7], entPos.x, entPos.y, 47, 128, 111)); break;
                    case 112 : listSceneriesb.emplace_back(new Entity(sceneriesTxt[8], entPos.x, entPos.y, 77, 128, 112)); break;
                    case 113 : listSceneriesb.emplace_back(new Entity(sceneriesTxt[9], entPos.x, entPos.y, 141, 160, 113)); break;
                    case 229 : listSceneriesb.emplace_back(new Entity_MultiText(sceneriesTxt[10], IntRect(0, 0, 95, 91), entPos.x, entPos.y, 31, -5, 229)); break;
                    case 230 : listSceneriesb.emplace_back(new Entity_MultiText(sceneriesTxt[11], IntRect(0, 0, 54, 64), entPos.x, entPos.y, 11, 0, 230)); break;
                    case 231 : listSceneriesb.emplace_back(new Entity(sceneriesTxt[12], entPos.x, entPos.y, 77, 128, 231)); break;
                    case 232 : listSceneriesb.emplace_back(new Entity(sceneriesTxt[13], entPos.x, entPos.y, 141, 160, 232)); break;
                }

                entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);
            }
        }
    }

    {
        unsigned short listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 2);

        if (listSize != 0)
        {
            for (register unsigned short i = 0; i < listSize; i++)
            {
                vector<float> entData;
                unsigned char entType;
                float currentData;

                levelFile.read(reinterpret_cast<char*>(&entType), 1);

                switch (entType)
                {
                    case 0 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);
                        startPosition.x = currentData;

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);
                        startPosition.y = currentData;

                        sectionb = true;

                        camPos = static_cast<Vector2i>(startPosition) + Vector2i(16, 16);

                        if (camPos.x < 320)
                            camPos.x = 320;

                        if (camPos.y < 240)
                            camPos.y = 240;

                        if (camPos.x > roomScale.x * 640 - 320)
                            camPos.x = roomScale.x * 640 - 320;

                        if (camPos.y > roomScale.y * 480 - 240)
                            camPos.y = roomScale.y * 480 - 240;

                        listEntitiesb.emplace_back(new Entity_MultiText(marioTxt[1], IntRect(48, 8, 31, 56), entData[0], entData[1], 0, 24, 0));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1]/32) - 1, 3);

                        break;
                    case 1 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(marksTxt[7], IntRect(107, 0, 107, 111), entData[0], entData[1], 28, 79, 1));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1]/32) - 1, 3);

                        break;
                    case 2 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new LevelEnd_Entity(marksTxt[8], marksTxt[9], editorMoveable, entData[0], entData[1]));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 3 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 32, 0, 32, 3, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 4 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 32, 0, 32, 4, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 5 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 32, 0, 32, 5, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 6 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalPlatform_Entity(marksTxt[0], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 32, 0, 32, 6, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 7 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new FallPlatform_Entity(marksTxt[0], editorTxt[0], entData[0], entData[1], 32, 0, 32, 7, false));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 8 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 0, 0, 0, 8, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 9 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 0, 0, 0, 9, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 10 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 0, 0, 0, 10, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 11 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalPlatform_Entity(marksTxt[1], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 0, 0, 0, 11, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 12 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new FallPlatform_Entity(marksTxt[1], editorTxt[0], entData[0], entData[1], 0, 0, 0, 12, false));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 13 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 45, 0, 45, 13, true));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 14 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 45, 0, 45, 14, true));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 15 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 45, 0, 45, 15, true));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 16 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalPlatform_Entity(marksTxt[2], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 45, 0, 45, 16, true));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 17 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new FallPlatform_Entity(marksTxt[2], editorTxt[0], entData[0], entData[1], 45, 0, 45, 17, true));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 18 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 43, 0, 43, 18, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 19 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 43, 0, 43, 19, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 20 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(0, 0, 138, 16), entData[0], entData[1], 43, 0, 43, 20, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 21 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalPlatform_Entity(marksTxt[3], speedRegTex, sliderTex, editorTxt[1], editorMoveable, editorTxt[0], IntRect(138, 0, 73, 16), entData[0], entData[1], 43, 0, 43, 21, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 22 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new FallPlatform_Entity(marksTxt[3], editorTxt[0], entData[0], entData[1], 43, 0, 43, 22, false));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 23 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(marksTxt[4], IntRect(0, 0, 32, 64), entData[0], entData[1], 0, 32, 23));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1]/32) - 1, 2);

                        break;
                    case 24 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(marksTxt[5], IntRect(0, 0, 32, 64), entData[0], entData[1], 0, 32, 24));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1]/32) - 1, 2);

                        break;
                    case 25 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(marksTxt[6], IntRect(0, 0, 32, 64), entData[0], entData[1], 0, 32, 25));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1]/32) - 1, 2);

                        break;
                    case 114 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[0], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 114));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 115 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[1], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 115));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 116 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[2], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 116));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 117 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[3], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 117));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 118 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[4], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 118));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 119 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[5], IntRect(0, 0, 32, 47), entData[0], entData[1], 0, 15, 119));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 120 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[6], IntRect(0, 0, 32, 47), entData[0], entData[1], 0, 15, 120));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 121 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[7], IntRect(0, 0, 32, 47), entData[0], entData[1], 0, 15, 121));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 122 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[8], IntRect(0, 0, 32, 47), entData[0], entData[1], 0, 15, 122));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 123 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[14], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 123));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 124 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[15], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 124));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 125 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[16], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 125));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 126 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[17], IntRect(0, 0, 33, 32), entData[0], entData[1], 0, 0, 126));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 127 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalEnemy_Entity(enemiesTxt[9], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 127));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 128 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalEnemy_Entity(enemiesTxt[10], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 128));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 129 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new HorizontalEnemy_Entity(enemiesTxt[11], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 129));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 130 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalEnemy_Entity(enemiesTxt[9], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 130));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 131 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalEnemy_Entity(enemiesTxt[10], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 131));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 132 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new VerticalEnemy_Entity(enemiesTxt[11], editorTxt[1], editorMoveable, entData[0], entData[1], 0, 14, 132));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 133 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entityj(enemiesTxt[9], editorTxt[0], entData[0], entData[1], 0, 14, 133));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 134 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entityj(enemiesTxt[10], editorTxt[0], entData[0], entData[1], 0, 14, 134));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 135 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entityj(enemiesTxt[11], editorTxt[0], entData[0], entData[1], 0, 14, 135));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 136 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[12], IntRect(0, 0, 32, 47), entData[0], entData[1], 0, 14, 136));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 137 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), entData[0], entData[1], -17, 15, 137));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 138 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), entData[0], entData[1], 16, 15, 138, 1, 270));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 139 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), entData[0], entData[1], 15, 47, 139, 1, 90));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 140 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[18], IntRect(31, 0, 31, 47), entData[0], entData[1], 48, 47, 140, 1, 180));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 141 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), entData[0], entData[1], -17, 15, 141));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 142 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), entData[0], entData[1], 16, 15, 142, 1, 270));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 143 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), entData[0], entData[1], 15, 47, 143, 1, 90));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 144 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[19], IntRect(31, 0, 31, 47), entData[0], entData[1], 48, 47, 144, 1, 180));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 145 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), entData[0], entData[1], -17, 15, 145));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 146 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), entData[0], entData[1], 16, 15, 146, 1, 270));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 147 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), entData[0], entData[1], 15, 47, 147, 1, 90));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 148 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[20], IntRect(31, 0, 31, 47), entData[0], entData[1], 48, 47, 148, 1, 180));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 149 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[21], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 149));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 150 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[22], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 150));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 151 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[23], IntRect(0, 0, 31, 32), entData[0], entData[1], 0, 0, 151));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 152 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[24], IntRect(0, 0, 31, 37), entData[0], entData[1], 0, 5, 152));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 153 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[25], IntRect(76, 0, 38, 48), entData[0], entData[1], 5, 16, 153));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 154 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[26], IntRect(76, 0, 38, 48), entData[0], entData[1], 5, 16, 154));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 155 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[27], IntRect(66, 0, 33, 48), entData[0], entData[1], 0, 16, 155));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 156 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[28], IntRect(76, 0, 38, 48), entData[0], entData[1], 5, 16, 156));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 157 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[29], IntRect(76, 0, 38, 48), entData[0], entData[1], 5, 16, 157));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 158 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(32, 0, 31, 48), entData[0], entData[1], 0, 16, 158));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 159 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(63, 0, 31, 48), entData[0], entData[1], 0, 16, 159));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 160 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(94, 0, 31, 48), entData[0], entData[1], 0, 16, 160));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 161 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[37], IntRect(0, 0, 32, 32), entData[0], entData[1], 0, 0, 161));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 162 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(0, 0, 32, 32), entData[0], entData[1], 0, 0, 162));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 163 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[4], IntRect(0, 0, 32, 32), entData[0], entData[1], 0, 0, 163, 1, 0, true));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);

                        break;
                    case 164 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[38], IntRect(0, 0, 54, 68), entData[0], entData[1], 10, 4, 164));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1] / 32) + 1, 3);

                        break;
                    case 165 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[38], IntRect(0, 0, 54, 68), entData[0], entData[1], 44, 36, 165, 1, 180));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 3);
                        layer2TileMatrixb->setValue(entData[0] / 32, (entData[1] / 32) - 1, 3);

                        break;
                    case 166 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[39], IntRect(0, 0, 64, 72), entData[0], entData[1], 16, 40, 166));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 167 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), entData[0], entData[1], 0, 2, 167));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 168 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), entData[0], entData[1], 32, 34, 168, 1, 180));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 169 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), entData[0], entData[1], 32, 2, 169, 1, 270));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 170 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(hazardsTxt[0], IntRect(0, 0, 32, 34), entData[0], entData[1], 0, 34, 170, 1, 90));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 171 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_LAVABOTTOM, entData[0], entData[1], 0, 0, 171));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 172 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Podoboo_Entity(hazardsTxt[2], editorTxt[1], editorMoveable, entData[0], entData[1], -3, 0));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 173 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new PodobooD_Entity(hazardsTxt[2], editorTxt[1], editorMoveable, entData[0], entData[1], 30, 32));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 174 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new PodobooL_Entity(hazardsTxt[2], editorTxt[1], editorMoveable, entData[0], entData[1], 30, 0));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 175 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new PodobooR_Entity(hazardsTxt[2], editorTxt[1], editorMoveable, entData[0], entData[1], -3, 32));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 176 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entityj(hazardsTxt[2], editorTxt[0], entData[0], entData[1], -3, 0, 176, 0, true));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 177 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entityj(hazardsTxt[2], editorTxt[0], entData[0], entData[1], 30, 32, 177, 180, true));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 178 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entityj(hazardsTxt[2], editorTxt[0], entData[0], entData[1], 30, 0, 178, 270, true));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 179 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entityj(hazardsTxt[2], editorTxt[0], entData[0], entData[1], -3, 32, 179, 90, true));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 180 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKETOP, entData[0], entData[1], 0, 0, 180));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 181 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKEBOTTOM, entData[0], entData[1], 0, 0, 181));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 182 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKELEFT, entData[0], entData[1], 0, 0, 182));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 183 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_SPIKERIGHT, entData[0], entData[1], 0, 0, 183));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 184 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity(hazardsTxt[2], entData[0], entData[1], 0, -1, 184));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 185 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_Rotation(hazardsTxt[2], entData[0], entData[1], 180, 32, 31, 185));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 186 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_Rotation(hazardsTxt[2], entData[0], entData[1], 270, 32, -1, 186));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 187 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_Rotation(hazardsTxt[2], entData[0], entData[1], 90, 0, 31, 187));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 188 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), entData[0], entData[1], 0, -1, 188));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 189 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), entData[0], entData[1], 32, 31, 189, 1, 180));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 190 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), entData[0], entData[1], 32, -1, 190, 1, 270));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 191 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(0, 0, 32, 31), entData[0], entData[1], 0, 31, 191, 1, 90));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 192 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset,TILE_HAZARD_BBILLTOP, entData[0], entData[1], 0, 0, 192));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 193 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLTOPB, entData[0], entData[1], 0, 0, 193));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 194 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLMIDV, entData[0], entData[1], 0, 0, 194));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 195 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLBOT, entData[0], entData[1], 0, 0, 195));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 196 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLBOTB, entData[0], entData[1], 0, 0, 196));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 197 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLLEF, entData[0], entData[1], 0, 0, 197));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 198 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLLEFB, entData[0], entData[1], 0, 0, 198));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 199 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLMIDH, entData[0], entData[1], 0, 0, 199));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 200 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLRIG, entData[0], entData[1], 0, 0, 200));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 201 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(mainTileset, TILE_HAZARD_BBILLRIGB, entData[0], entData[1], 0, 0, 201));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 202 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, NULL, entData[0], entData[1], -1, -1, 202, true));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 203 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, editorTxt[3], entData[0], entData[1], -1, -1, 203, true));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 204 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, NULL, entData[0], entData[1], -1, -1, 204, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 205 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Rotodisc_Entity(mainTileset, hazardsTxt[4], editorMoveable, speedRegTex, sliderTex, editorTxt[3], entData[0], entData[1], -1, -1, 205, false));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 206 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity(hazardsTxt[5], entData[0], entData[1], 0, 0, 206));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrixb->setValue((entData[0] / 32) + 1, entData[1] / 32, 2);

                        break;
                    case 207 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(32, 0, 64, 32), entData[0], entData[1], 32, 0, 207));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrixb->setValue((entData[0] / 32) - 1, entData[1] / 32, 2);

                        break;
                    case 208 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity(hazardsTxt[6], entData[0], entData[1], 2, 37, 208));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 209 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(editorTxt[3], IntRect(96, 0, 56, 69), entData[0], entData[1], 23, 37, 209));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 210 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity(hazardsTxt[8], entData[0], entData[1], 12, 8, 210));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 211 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_Rotation(hazardsTxt[8], entData[0], entData[1], 180, 45, 40, 211));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);

                        break;
                    case 212 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        for (register unsigned int i = 0; i < entData[2]; i++)
                        {
                            levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                            entData.emplace_back(currentData);

                            levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                            entData.emplace_back(currentData);
                        }

                        listEntitiesb.emplace_back(new Centipede_Entity(editorTxt[3], editorMoveable, nodesTex, entData[0], entData[1], 0, 0));
                        listEntitiesb.back()->load(entData);

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        layer2TileMatrixb->setValue(entData[0] / 32, entData[1] / 32, 2);
                        layer2TileMatrixb->setValue((entData[0] / 32) + 1, entData[1] / 32, 2);
                        layer2TileMatrixb->setValue((entData[0] / 32) + 2, entData[1] / 32, 2);
                        layer2TileMatrixb->setValue((entData[0] / 32) + 3, entData[1] / 32, 2);
                        layer2TileMatrixb->setValue((entData[0] / 32) + 4, entData[1] / 32, 2);
                        layer2TileMatrixb->setValue((entData[0] / 32) + 5, entData[1] / 32, 2);

                        break;
                    case 225 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), entData[0], entData[1], -1, -1, 225));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 226 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), entData[0], entData[1], 32, -1, 226, 1, 270));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 227 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), entData[0], entData[1], -1, 31, 227, 1, 90));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                    case 228 :
                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        levelFile.read(reinterpret_cast<char*>(&currentData), 4);
                        entData.emplace_back(currentData);

                        listEntitiesb.emplace_back(new Entity_MultiText(enemiesTxt[41], IntRect(62, 0, 31, 31), entData[0], entData[1], 32, 32, 228, 1, 180));

                        entityMatrixb->setValue(entData[0] / 32, entData[1] / 32, 1);

                        break;
                }
            }
        }
    }

    {
        unsigned short listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 2);

        if (listSize != 0)
        {
            for (register unsigned short i = 0; i < listSize; i++)
            {
                Vector2f entPos;
                unsigned char entType;

                levelFile.read(reinterpret_cast<char*>(&entType), 1);

                levelFile.read(reinterpret_cast<char*>(&entPos.x), 4);
                levelFile.read(reinterpret_cast<char*>(&entPos.y), 4);

                switch (entType)
                {
                    case 26 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(32, 0, 32, 32), entPos.x, entPos.y, 0, 0, 26));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 27 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(64, 0, 32, 32), entPos.x, entPos.y, 0, 0, 27));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 28 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(96, 0, 32, 32), entPos.x, entPos.y, 0, 0, 28));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 29 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(128, 0, 32, 32), entPos.x, entPos.y, 0, 0, 29));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 30 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(160, 0, 32, 32), entPos.x, entPos.y, 0, 0, 30));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 31 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(192, 0, 32, 32), entPos.x, entPos.y, 0, 0, 31));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 32 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(32, 0, 32, 32), entPos.x, entPos.y, 0, 0, 32, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 33 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(64, 0, 32, 32), entPos.x, entPos.y, 0, 0, 33, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 34 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(96, 0, 32, 32), entPos.x, entPos.y, 0, 0, 34, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 35 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(128, 0, 32, 32), entPos.x, entPos.y, 0, 0, 35, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 36 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(160, 0, 32, 32), entPos.x, entPos.y, 0, 0, 36, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 37 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(192, 0, 32, 32), entPos.x, entPos.y, 0, 0, 37, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 38 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(224, 0, 32, 32), entPos.x, entPos.y, 0, 0, 38, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 39 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(256, 0, 32, 32), entPos.x, entPos.y, 0, 0, 39, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 40 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(288, 0, 32, 32), entPos.x, entPos.y, 0, 0, 40, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 41 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(320, 0, 32, 32), entPos.x, entPos.y, 0, 0, 41, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 42 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(352, 0, 32, 32), entPos.x, entPos.y, 0, 0, 42, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 43 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(384, 0, 32, 32), entPos.x, entPos.y, 0, 0, 43, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 44 :
                        listBonusb.emplace_back(new Entity(itemsTxt[3], entPos.x, entPos.y, 0, 0, 44));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 45 :
                        listBonusb.emplace_back(new Entity_MultiText(itemsTxt[4], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 45));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 46 :
                        listBonusb.emplace_back(new Entity_MultiText(itemsTxt[5], IntRect(0, 0, 27, 34), entPos.x, entPos.y, -3, 2, 46));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 47 :
                        listBonusb.emplace_back(new Entity_MultiText(itemsTxt[6], IntRect(0, 0, 30, 31), entPos.x, entPos.y, -1, -1, 47));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 48 :
                        listBonusb.emplace_back(new Entity_MultiText(itemsTxt[7], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 48));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 49 :
                        listBonusb.emplace_back(new Entity(itemsTxt[8], entPos.x, entPos.y, 0, 0, 49));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 50 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 50));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 51 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 51, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 52 :
                        listBonusb.emplace_back(new Entity_MultiText(itemsTxt[2], IntRect(0, 0, 19, 28), entPos.x, entPos.y, -7, -2, 52));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        break;
                    case 53 :
                        listBonusb.emplace_back(new Entity_MultiText(itemsTxt[1], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 53));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 54 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(416, 0, 32, 32), entPos.x, entPos.y, 0, 0, 54));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 55 :
                        listBonusb.emplace_back(new Entity_MultiText(editorTxt[2], IntRect(448, 0, 32, 32), entPos.x, entPos.y, 0, 0, 55));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 213 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 213));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 214 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 214, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 215 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(0, 0, 32, 32), entPos.x, entPos.y, 0, 0, 215));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 216 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(32, 0, 32, 32), entPos.x, entPos.y, 0, 0, 216));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 217 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(32, 0, 32, 32), entPos.x, entPos.y, 0, 0, 217, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 218 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(32, 0, 32, 32), entPos.x, entPos.y, 0, 0, 218));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 219 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(64, 0, 32, 32), entPos.x, entPos.y, 0, 0, 219));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 220 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(64, 0, 32, 32), entPos.x, entPos.y, 0, 0, 220, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 221 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(64, 0, 32, 32), entPos.x, entPos.y, 0, 0, 221));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 222 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(96, 0, 32, 32), entPos.x, entPos.y, 0, 0, 222));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 223 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[11], IntRect(96, 0, 32, 32), entPos.x, entPos.y, 0, 0, 223, 1, 0, true));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                    case 224 :
                        listBonusb.emplace_back(new Entity_MultiText(marksTxt[10], IntRect(96, 0, 32, 32), entPos.x, entPos.y, 0, 0, 224));

                        entityMatrixb->setValue(entPos.x / 32, entPos.y / 32, 1);

                        layer2TileMatrixb->setValue(entPos.x / 32, entPos.y / 32, 2);

                        break;
                }
            }
        }
    }

    {
        unsigned char listSize;

        levelFile.read(reinterpret_cast<char*>(&listSize), 1);

        if (listSize != 0)
        {
            for (register unsigned short i = 0; i < listSize; i++)
            {
                WarpsData currentData;

                EntWarps* entrance;
                EntWarps* exit;

                levelFile.read(reinterpret_cast<char*>(&currentData), sizeof(WarpsData));

                listWarps.emplace_back(EntWarps(warpsTex, editorMoveable, notesTex, currentData.entrancex, currentData.entrancey, i, currentData.entrancesection, true));
                entrance = &listWarps.back();

                entrance->setDirection(currentData.entrancedir);

                if (currentData.exitx == -1)
                    lastWarp = entrance;
                else
                {
                    listWarps.emplace_back(EntWarps(warpsTex, editorMoveable, notesTex, currentData.exitx, currentData.exity, i, currentData.exitsection, false));
                    exit = &listWarps.back();

                    entrance->m_companionWarps = exit;

                    exit->setDirection(currentData.exitdir);
                    exit->m_companionWarps = entrance;

                    warpsCount++;

                    lastWarp = NULL;
                }
            }
        }
    }

    if (sectionb)
    {
        background[0]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[1]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[2]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[3]->setPosition(0, (roomScaleb.y * 480) - 178);
        background[4]->setPosition(0, (roomScaleb.y * 480) - 165);
        background[5]->setPosition(0, (roomScaleb.y * 480) - 101);
        background[6]->setPosition(0, (roomScaleb.y * 480) - 320);
        background[7]->setPosition(0, (roomScaleb.y * 480) - 320);
        background[14]->setPosition(0, (roomScaleb.y * 480) - 274);
        background[15]->setPosition(0, (roomScaleb.y * 480) - 274);

        background[0]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[1]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[2]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[3]->setSize(Vector2f(roomScaleb.x * 640, 178));
        background[4]->setSize(Vector2f(roomScaleb.x * 640, 165));
        background[5]->setSize(Vector2f(roomScaleb.x * 640, 101));
        background[6]->setSize(Vector2f(roomScaleb.x * 640, 320));
        background[7]->setSize(Vector2f(roomScaleb.x * 640, 320));
        background[8]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[9]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[10]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[11]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
        background[14]->setSize(Vector2f(roomScaleb.x * 640, 274));
        background[15]->setSize(Vector2f(roomScaleb.x * 640, 274));

        if (background[13] != NULL)
            background[13]->setSize(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));

        background[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[2]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[3]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 178));
        background[4]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 165));
        background[5]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 101));
        background[6]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 320));
        background[7]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 320));
        background[8]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[9]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[10]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[11]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
        background[14]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
        background[15]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));

        if (background[13] != NULL)
            background[13]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));

        backGradient[0].color = topColorb;
        backGradient[1].color = topColorb;

        backGradient[2].color = bottomColorb;
        backGradient[3].color = bottomColorb;

        switch (levelbGradient)
        {
            case 0 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScaleb.x * 640, 0);
                backGradient[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
                backGradient[3].position = Vector2f(0, roomScaleb.y * 480);
                break;
            case 1 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScaleb.x * 640, 0);
                backGradient[2].position = Vector2f(roomScaleb.x * 640, 480);
                backGradient[3].position = Vector2f(0, 480);

                backColor = Color(bottomColor);
                backColorb = Color(bottomColorb);

                break;
            case 2 :
                backGradient[0].position = Vector2f(0, (roomScaleb.y-1) * 480);
                backGradient[1].position = Vector2f(roomScaleb.x * 640, (roomScaleb.y-1) * 480);
                backGradient[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
                backGradient[3].position = Vector2f(0, roomScaleb.y * 480);

                backColor = Color(topColor);
                backColorb = Color(topColorb);

                break;
        }

        effectClouds[0]->setSize(Vector2f(roomScaleb.x * 640, 63));
        effectClouds[0]->setTexture(effectTex[levelbEffectb-1]);
        effectClouds[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));

        effectClouds[1]->setSize(Vector2f(roomScaleb.x * 640, 63));
        effectClouds[1]->setTexture(effectTex[levelbEffectb-1]);
        effectClouds[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));
    }
    else
    {
        background[0]->setPosition(0, (roomScale.y * 480) - 274);
        background[1]->setPosition(0, (roomScale.y * 480) - 274);
        background[2]->setPosition(0, (roomScale.y * 480) - 274);
        background[3]->setPosition(0, (roomScale.y * 480) - 178);
        background[4]->setPosition(0, (roomScale.y * 480) - 165);
        background[5]->setPosition(0, (roomScale.y * 480) - 101);
        background[6]->setPosition(0, (roomScale.y * 480) - 320);
        background[7]->setPosition(0, (roomScale.y * 480) - 320);
        background[14]->setPosition(0, (roomScale.y * 480) - 274);
        background[15]->setPosition(0, (roomScale.y * 480) - 274);

        background[0]->setSize(Vector2f(roomScale.x * 640, 274));
        background[1]->setSize(Vector2f(roomScale.x * 640, 274));
        background[2]->setSize(Vector2f(roomScale.x * 640, 274));
        background[3]->setSize(Vector2f(roomScale.x * 640, 178));
        background[4]->setSize(Vector2f(roomScale.x * 640, 165));
        background[5]->setSize(Vector2f(roomScale.x * 640, 101));
        background[6]->setSize(Vector2f(roomScale.x * 640, 320));
        background[7]->setSize(Vector2f(roomScale.x * 640, 320));
        background[8]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[9]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[10]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[11]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));
        background[14]->setSize(Vector2f(roomScale.x * 640, 274));
        background[15]->setSize(Vector2f(roomScale.x * 640, 274));

        if (background[12] != NULL)
            background[12]->setSize(Vector2f(roomScale.x * 640, roomScale.y * 480));

        background[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[1]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[2]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[3]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 178));
        background[4]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 165));
        background[5]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 101));
        background[6]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 320));
        background[7]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 320));
        background[8]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[9]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[10]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[11]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
        background[14]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
        background[15]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));

        if (background[12] != NULL)
            background[12]->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));

        backGradient[0].color = topColor;
        backGradient[1].color = topColor;

        backGradient[2].color = bottomColor;
        backGradient[3].color = bottomColor;

        switch (levelGradient)
        {
            case 0 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScale.x * 640, 0);
                backGradient[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
                backGradient[3].position = Vector2f(0, roomScale.y * 480);
                break;
            case 1 :
                backGradient[0].position = Vector2f(0, 0);
                backGradient[1].position = Vector2f(roomScale.x * 640, 0);
                backGradient[2].position = Vector2f(roomScale.x * 640, 480);
                backGradient[3].position = Vector2f(0, 480);

                backColor = Color(bottomColor);
                backColorb = Color(bottomColorb);

                break;
            case 2 :
                backGradient[0].position = Vector2f(0, (roomScale.y-1) * 480);
                backGradient[1].position = Vector2f(roomScale.x * 640, (roomScale.y-1) * 480);
                backGradient[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
                backGradient[3].position = Vector2f(0, roomScale.y * 480);

                backColor = Color(topColor);
                backColorb = Color(topColorb);

                break;
        }

        effectClouds[0]->setSize(Vector2f(roomScale.x * 640, 63));
        effectClouds[0]->setTexture(effectTex[levelEffectb-1]);
        effectClouds[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));

        effectClouds[1]->setSize(Vector2f(roomScale.x * 640, 63));
        effectClouds[1]->setTexture(effectTex[levelEffectb-1]);
        effectClouds[1]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));
    }

    levelFile.close();
}

static void Level_New()
{
    listTile1.clear();
    listTile2.clear();
    listTile3.clear();

    for (list<Entity*>::iterator it = listSceneries.begin(); it != listSceneries.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listBonus.begin(); it != listBonus.end(); it++)
        delete *it;

    listSceneries.clear();
    listEntities.clear();
    listBonus.clear();

    listTileb1.clear();
    listTileb2.clear();
    listTileb3.clear();

    for (list<Entity*>::iterator it = listSceneriesb.begin(); it != listSceneriesb.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
        delete *it;

    for (list<Entity*>::iterator it = listBonusb.begin(); it != listBonusb.end(); it++)
        delete *it;

    listSceneriesb.clear();
    listEntitiesb.clear();
    listBonusb.clear();

    listWarps.clear();

    levelLiquidTrigger.clear();
    levelLiquidTriggerb.clear();

    levelAutoscrollPath.clear();

    lastWarp = NULL;
    warpsCount = 0;

    delete layer1TileMatrix;
    delete layer2TileMatrix;
    delete layer3TileMatrix;

    delete entityMatrix;

    delete layer1TileMatrixb;
    delete layer2TileMatrixb;
    delete layer3TileMatrixb;

    delete entityMatrixb;

    delete autoscrollPathLine;

    topColor = Color(0, 111, 223);
    bottomColor = Color(242, 253, 252);

    topColorb = Color(0, 111, 223);
    bottomColorb = Color(242, 253, 252);

    backColor = Color::Black;
    backColorb = Color::Black;

    roomScale = Vector2i(2, 1);
    roomScaleb = Vector2i(1, 1);

    cameraSpeed = Vector2f(0, 0);

    sectionb = false;

    levelMusic = 0;
    levelBackground = 0;
    levelGradient = 0;
    levelEffect = 0;
    levelEffectb = 0;

    levelbMusic = 1;
    levelbBackground = 10;
    levelbGradient = 0;
    levelbEffect = 0;
    levelbEffectb = 0;

    startArea = 0;

    levelName = "World Name";
    levelAuthor = "Author Name";

    levelGravity = 5;
    levelTime = 400;

    levelAutoscroll = 0;
    levelAutoscrollSpeed = 1;

    levelBackAlpha = 255;
    levelFrontAlpha = 255;

    levelBackAlphab = 255;
    levelFrontAlphab = 255;

    levelLiquidType = 0;
    levelLiquidHeight = 280;

    levelLiquidTypeb = 0;
    levelLiquidHeightb = 280;

    levelLiquidSpeed = 1;

    bowserAttacks[0] = 1;
    bowserAttacks[1] = 1;
    bowserAttacks[2] = 1;
    bowserAttacks[3] = 0;
    bowserAttacks[4] = 0;
    bowserAttacks[5] = 0;

    bowserFrequences[0] = 5;
    bowserFrequences[1] = 5;
    bowserFrequences[2] = 10;
    bowserFrequences[3] = 10;
    bowserFrequences[4] = 10;
    bowserFrequences[5] = 10;

    bowserSpeeds[0] = 5;
    bowserSpeeds[1] = 1;
    bowserSpeeds[2] = 5;
    bowserSpeeds[3] = 5;
    bowserSpeeds[4] = 5;
    bowserSpeeds[5] = 5;

    bowserTrail = 0;
    bowserHealth = 6;

    bowserMusic = 0;

    startPosition = Vector2f(-1, -1);

    backGradient[0].position = Vector2f(0, 0);
    backGradient[1].position = Vector2f(1280, 0);
    backGradient[2].position = Vector2f(1280, 480);
    backGradient[3].position = Vector2f(0, 480);

    backGradient[0].color = topColor;
    backGradient[1].color = topColor;
    backGradient[2].color = bottomColor;
    backGradient[3].color = bottomColor;

    layer1TileMatrix = new Matrix(40, 15);
    layer2TileMatrix = new Matrix(40, 15);
    layer3TileMatrix = new Matrix(40, 15);

    entityMatrix = new Matrix(40, 15);

    layer1TileMatrixb = new Matrix(20, 15);
    layer2TileMatrixb = new Matrix(20, 15);
    layer3TileMatrixb = new Matrix(20, 15);

    entityMatrixb = new Matrix(20, 15);

    autoscrollPathLine = new VertexArray(LinesStrip);

    lastWarp = NULL;

    warpsCount = 0;

    if (resourcesArray[0] != NULL)
    {
        delete resourcesArray[0];
        resourcesArray[0] = NULL;
    }

    if (resourcesArray[1] != NULL)
    {
        delete resourcesArray[1];
        resourcesArray[1] = NULL;
    }

    if (resourcesArray[2] != NULL)
    {
        delete resourcesArray[2];
        resourcesArray[2] = NULL;
    }

    if (resourcesArray[3] != NULL)
    {
        delete resourcesArray[3];
        resourcesArray[3] = NULL;
    }

    if (resourcesArray[4] != NULL)
    {
        delete resourcesArray[4];
        resourcesArray[4] = NULL;
    }

    if (backgroundTxt[12] != NULL)
    {
        delete backgroundTxt[12];

        backgroundTxt[12] = NULL;
    }

    if (backgroundTxt[13] != NULL)
    {
        delete backgroundTxt[13];

        backgroundTxt[13] = NULL;
    }

    if (background[12] != NULL)
    {
        delete background[12];

        background[12] = NULL;
    }

    if (background[13] != NULL)
    {
        delete background[13];

        background[13] = NULL;
    }

    if (musicSamples[22] != NULL)
    {
        FMOD_Sound_Release(musicSamples[22]);
        musicSamples[22] = NULL;
    }

    if (musicSamples[23] != NULL)
    {
        FMOD_Sound_Release(musicSamples[23]);
        musicSamples[23] = NULL;
    }

    if (musicSamples[24] != NULL)
    {
        FMOD_Sound_Release(musicSamples[24]);
        musicSamples[24] = NULL;
    }

    camPos = Vector2i(320, 240);
    camPosMem = Vector2i(320, 240);

    levelDir.clear();

    background[0]->setPosition(0, 206);
    background[1]->setPosition(0, 206);
    background[2]->setPosition(0, 206);
    background[3]->setPosition(0, 302);
    background[4]->setPosition(0, 315);
    background[5]->setPosition(0, 379);
    background[6]->setPosition(0, 160);
    background[7]->setPosition(0, 160);
    background[14]->setPosition(0, 206);
    background[15]->setPosition(0, 206);

    background[0]->setSize(Vector2f(1280, 274));
    background[1]->setSize(Vector2f(1280, 274));
    background[2]->setSize(Vector2f(1280, 274));
    background[3]->setSize(Vector2f(1280, 178));
    background[4]->setSize(Vector2f(1280, 165));
    background[5]->setSize(Vector2f(1280, 101));
    background[6]->setSize(Vector2f(1280, 320));
    background[7]->setSize(Vector2f(1280, 320));
    background[8]->setSize(Vector2f(1280, 480));
    background[9]->setSize(Vector2f(1280, 480));
    background[10]->setSize(Vector2f(1280, 480));
    background[11]->setSize(Vector2f(1280, 480));
    background[14]->setSize(Vector2f(1280, 274));
    background[15]->setSize(Vector2f(1280, 274));

    background[0]->setTextureRect(IntRect(0, 0, 1280, 274));
    background[1]->setTextureRect(IntRect(0, 0, 1280, 274));
    background[2]->setTextureRect(IntRect(0, 0, 1280, 274));
    background[3]->setTextureRect(IntRect(0, 0, 1280, 178));
    background[4]->setTextureRect(IntRect(0, 0, 1280, 165));
    background[5]->setTextureRect(IntRect(0, 0, 1280, 101));
    background[6]->setTextureRect(IntRect(0, 0, 1280, 320));
    background[7]->setTextureRect(IntRect(0, 0, 1280, 320));
    background[8]->setTextureRect(IntRect(0, 0, 1280, 480));
    background[9]->setTextureRect(IntRect(0, 0, 1280, 480));
    background[10]->setTextureRect(IntRect(0, 0, 1280, 480));
    background[11]->setTextureRect(IntRect(0, 0, 1280, 480));
    background[14]->setTextureRect(IntRect(0, 0, 1280, 274));
    background[15]->setTextureRect(IntRect(0, 0, 1280, 274));

    effectClouds[0]->setSize(Vector2f(1280, 63));
    effectClouds[0]->setTextureRect(IntRect(0, 0, 1280, 63));

    effectClouds[1]->setSize(Vector2f(1280, 63));
    effectClouds[1]->setTextureRect(IntRect(0, 0, 1280, 63));
}

static void Level_Test()
{
    // Initialisation :
    exitToTitle = false;
    restartLevel = false;

    loadingType = 0;

    cameraPos = Vector2f(320, 240);

    levelCamera = new View(Vector2f(320, 240), Vector2f(640, 480));
    levelCamera_shake = 0;

    effectCloudPos[0] = 0;
    effectCloudPos[1] = 0;
    effectLavafallPos = 0;
    effectWeatherPos = 0;

    autoscroll_node = 0;
    autoscroll_nodesaved = 0;

    koopaEngaged = 0;

    frame_Hud = 0;
    frame_Water = 0;
    frame_Lava = 0;
    frame_Flame = 0;
    frame_Podoboo = 0;
    frame_Clouds = 0;
    frame_Flower = 0;
    frame_Rotodisc = 0;

    game_powerup = 0;
    game_coins = 0;
    game_lives = 255;
    game_score = 0;

    game_toggleSolidity[0] = 0;
    game_toggleSolidity[1] = 0;
    game_toggleSolidity[2] = 0;
    game_toggleSolidity[3] = 0;

    game_toggleSoliditySave[0] = 0;
    game_toggleSoliditySave[1] = 0;
    game_toggleSoliditySave[2] = 0;
    game_toggleSoliditySave[3] = 0;

    player = NULL;

    backgroundSpr = NULL;
    effectCloudsSpr[0] = NULL;
    effectCloudsSpr[1] = NULL;
    effectWeatherSpr = NULL;

    backgroundSprb = NULL;
    effectCloudsSprb[0] = NULL;
    effectCloudsSprb[1] = NULL;
    effectWeatherSprb = NULL;

    watera = NULL;
    waterb = NULL;

    hudSpr[0] = new Sprite(*hudTxt[0]);
    hudSpr[1] = new Sprite(*hudTxt[1]);
    hudSpr[2] = new Sprite(*hudTxt[2]);
    hudSpr[3] = new Sprite(*hudTxt[3]);
    hudSpr[3]->setOrigin(0, 8);

    hudBowser = new VertexArray(Quads);
    hudBowser_descend = -308;

    scoreFont = new SpriteFont(Vector2f(153, 36), true, "0");
    livesFont = new SpriteFont(Vector2f(138, 16), false, "Test");
    coinsFont = new SpriteFont(Vector2f(285, 36), false, "0");

    {
        TCHAR filePath[MAX_PATH];

        strcpy(filePath, levelDir.c_str());

        PathRemoveFileSpec(filePath);
        SetCurrentDirectory(filePath);

        for (register unsigned int i = 0; i < 5; i++)
        {
            if (resourcesArray[i] == NULL)
                continue;

            switch (i)
            {
                case 0 :
                    FMOD_System_CreateStream(soundSystem, resourcesArray[0]->c_str(), FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[22]);

                    break;
                case 2 :
                    FMOD_System_CreateStream(soundSystem, resourcesArray[2]->c_str(), FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[23]);

                    break;
                case 4 :
                    FMOD_System_CreateStream(soundSystem, resourcesArray[4]->c_str(), FMOD_LOOP_NORMAL | FMOD_SOFTWARE | FMOD_2D, NULL, &musicSamples[24]);

                    break;
            }
        }

        // Reset the current directory :
        GetModuleFileName(NULL, filePath, MAX_PATH);
        PathRemoveFileSpec(filePath);
        SetCurrentDirectory(filePath);
    }

    // Level loading :
    vector <Placeable*> listMiddle;
    vector <Placeable*> listAfter;

    vector <Placeable*> listMiddleb;
    vector <Placeable*> listAfterb;

    Vector2f startPos(-64, -64);

    levelCamera_shake = 0;

    effectCloudPos[0] = 0;
    effectCloudPos[1] = 0;
    effectLavafallPos = 0;
    effectWeatherPos = 0;
    effectLightning = (rand() % 350) + 100;

    autoscroll_node = 0;
    autoscroll_nodesaved = 0;

    frame_Hud = 0;
    frame_Water = 0;
    frame_Lava = 0;
    frame_Flame = 0;
    frame_Podoboo = 0;
    frame_Clouds = 0;
    frame_Flower = 0;
    frame_Rotodisc = 0;

    blockhitter = FloatRect(-64, -64, 28, 8);
    spritehitter = FloatRect(-64, -64, 0, 0);
    enemystomper = FloatRect(-64, -64, 34, 12);
    enemykiller = FloatRect(-64, -64, 8, 8);
    blockkiller = FloatRect(-64, -64, 28, 33);
    enemystomper_pt = NULL;
    enemykiller_fire = 0;
    enemykiller_create = false;
    blockkiller_create = true;
    spritehitter_create = false;

    killcount = 0;

    timerAlert = 1.0f;
    timerAlertPhase = true;

    levelScale = roomScale;
    levelScaleb = roomScaleb;

    collisionMatrix = new Matrix(roomScale.x * 20, roomScale.y * 15);
    collisionMatrixb = new Matrix(roomScaleb.x * 20, roomScaleb.y * 15);

    musicZonea = &musicSamples[levelMusic];
    musicZoneb = &musicSamples[levelbMusic];

    #ifdef DEBUGMODE
    cout << "levelMusic : " << static_cast<unsigned int>(levelMusic) << endl;
    cout << "levelbMusic : " << static_cast<unsigned int>(levelbMusic) << endl;
    #endif // DEBUGMODE

    switch (levelBackground)
    {
        case 0 : break;
        case 1 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, 274));
            backgroundSpr->setPosition(0, (roomScale.y * 480) - 274);
            backgroundSpr->setTexture(backgroundTxt[0]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
            break;
        case 2 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, 274));
            backgroundSpr->setPosition(0, (roomScale.y * 480) - 274);
            backgroundSpr->setTexture(backgroundTxt[1]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
            break;
        case 3 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, 274));
            backgroundSpr->setPosition(0, (roomScale.y * 480) - 274);
            backgroundSpr->setTexture(backgroundTxt[2]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
            break;
        case 4 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, 178));
            backgroundSpr->setPosition(0, (roomScale.y * 480) - 178);
            backgroundSpr->setTexture(backgroundTxt[3]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, 178));
            break;
        case 5 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, 165));
            backgroundSpr->setPosition(0, (roomScale.y * 480) - 165);
            backgroundSpr->setTexture(backgroundTxt[4]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, 165));
            break;
        case 6 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, 101));
            backgroundSpr->setPosition(0, (roomScale.y * 480) - 101);
            backgroundSpr->setTexture(backgroundTxt[5]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, 101));
            break;
        case 7 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, 320));
            backgroundSpr->setPosition(0, (roomScale.y * 480) - 320);
            backgroundSpr->setTexture(backgroundTxt[6]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, 320));
            break;
        case 8 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, 320));
            backgroundSpr->setPosition(0, (roomScale.y * 480) - 320);
            backgroundSpr->setTexture(backgroundTxt[7]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, 320));
            break;
        case 9 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, roomScale.y * 480));
            backgroundSpr->setTexture(backgroundTxt[8]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
            break;
        case 10 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, roomScale.y * 480));
            backgroundSpr->setTexture(backgroundTxt[9]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
            break;
        case 11 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, roomScale.y * 480));
            backgroundSpr->setTexture(backgroundTxt[10]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
            break;
        case 12 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, roomScale.y * 480));
            backgroundSpr->setTexture(backgroundTxt[11]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
            break;
        case 13 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, roomScale.y * 480));
            backgroundSpr->setTexture(backgroundTxt[12]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
            break;
        case 14 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, 274));
            backgroundSpr->setPosition(0, (roomScale.y * 480) - 274);
            backgroundSpr->setTexture(backgroundTxt[14]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
            break;
        case 15 :
            backgroundSpr = new RectangleShape(Vector2f(roomScale.x * 640, 274));
            backgroundSpr->setPosition(0, (roomScale.y * 480) - 274);
            backgroundSpr->setTexture(backgroundTxt[15]);
            backgroundSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, 274));
            break;
    }

    switch (levelbBackground)
    {
        case 0 : break;
        case 1 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, 274));
            backgroundSprb->setPosition(0, (roomScaleb.y * 480) - 274);
            backgroundSprb->setTexture(backgroundTxt[0]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
            break;
        case 2 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, 274));
            backgroundSprb->setPosition(0, (roomScaleb.y * 480) - 274);
            backgroundSprb->setTexture(backgroundTxt[1]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
            break;
        case 3 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, 274));
            backgroundSprb->setPosition(0, (roomScaleb.y * 480) - 274);
            backgroundSprb->setTexture(backgroundTxt[2]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
            break;
        case 4 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, 178));
            backgroundSprb->setPosition(0, (roomScaleb.y * 480) - 178);
            backgroundSprb->setTexture(backgroundTxt[3]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 178));
            break;
        case 5 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, 165));
            backgroundSprb->setPosition(0, (roomScaleb.y * 480) - 165);
            backgroundSprb->setTexture(backgroundTxt[4]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 165));
            break;
        case 6 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, 101));
            backgroundSprb->setPosition(0, (roomScaleb.y * 480) - 101);
            backgroundSprb->setTexture(backgroundTxt[5]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 101));
            break;
        case 7 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, 320));
            backgroundSprb->setPosition(0, (roomScaleb.y * 480) - 320);
            backgroundSprb->setTexture(backgroundTxt[6]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 320));
            break;
        case 8 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, 320));
            backgroundSprb->setPosition(0, (roomScaleb.y * 480) - 320);
            backgroundSprb->setTexture(backgroundTxt[7]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 320));
            break;
        case 9 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
            backgroundSprb->setTexture(backgroundTxt[8]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
            break;
        case 10 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
            backgroundSprb->setTexture(backgroundTxt[9]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
            break;
        case 11 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
            backgroundSprb->setTexture(backgroundTxt[10]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
            break;
        case 12 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
            backgroundSprb->setTexture(backgroundTxt[11]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
            break;
        case 13 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
            backgroundSprb->setTexture(backgroundTxt[13]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
            break;
        case 14 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, 274));
            backgroundSprb->setPosition(0, (roomScaleb.y * 480) - 274);
            backgroundSprb->setTexture(backgroundTxt[14]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
            break;
        case 15 :
            backgroundSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, 274));
            backgroundSprb->setPosition(0, (roomScaleb.y * 480) - 274);
            backgroundSprb->setTexture(backgroundTxt[15]);
            backgroundSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 274));
            break;
    }

    switch (levelGradient)
    {
        case 0 :
            gradientRectangle[0].position = Vector2f(0, 0);
            gradientRectangle[1].position = Vector2f(roomScale.x * 640, 0);
            gradientRectangle[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
            gradientRectangle[3].position = Vector2f(0, roomScale.y * 480);
            clearColora = false;
            break;
        case 1 :
            gradientRectangle[0].position = Vector2f(0, 0);
            gradientRectangle[1].position = Vector2f(roomScale.x * 640, 0);
            gradientRectangle[2].position = Vector2f(roomScale.x * 640, 480);
            gradientRectangle[3].position = Vector2f(0, 480);
            levelBackColor = bottomColor;
            clearColora = true;
            break;
        case 2 :
            gradientRectangle[0].position = Vector2f(0, (roomScale.y * 480) - 480);
            gradientRectangle[1].position = Vector2f(roomScale.x * 640, (roomScale.y * 480) - 480);
            gradientRectangle[2].position = Vector2f(roomScale.x * 640, roomScale.y * 480);
            gradientRectangle[3].position = Vector2f(0, roomScale.y * 480);
            levelBackColor = topColor;
            clearColora = true;
            break;
    }

    gradientRectangle[0].color = topColor;
    gradientRectangle[1].color = topColor;
    gradientRectangle[2].color = bottomColor;
    gradientRectangle[3].color = bottomColor;

    switch (levelbGradient)
    {
        case 0 :
            gradientRectangleb[0].position = Vector2f(0, 0);
            gradientRectangleb[1].position = Vector2f(roomScaleb.x * 640, 0);
            gradientRectangleb[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
            gradientRectangleb[3].position = Vector2f(0, roomScaleb.y * 480);
            clearColorb = false;
            break;
        case 1 :
            gradientRectangleb[0].position = Vector2f(0, 0);
            gradientRectangleb[1].position = Vector2f(roomScaleb.x * 640, 0);
            gradientRectangleb[2].position = Vector2f(roomScaleb.x * 640, 480);
            gradientRectangleb[3].position = Vector2f(0, 480);
            levelBackColorb = bottomColor;
            clearColorb = true;
            break;
        case 2 :
            gradientRectangleb[0].position = Vector2f(0, (roomScaleb.y * 480) - 480);
            gradientRectangleb[1].position = Vector2f(roomScaleb.x * 640, (roomScaleb.y * 480) - 480);
            gradientRectangleb[2].position = Vector2f(roomScaleb.x * 640, roomScaleb.y * 480);
            gradientRectangleb[3].position = Vector2f(0, roomScaleb.y * 480);
            levelBackColorb = topColor;
            clearColorb = true;
            break;
    }

    gradientRectangleb[0].color = topColorb;
    gradientRectangleb[1].color = topColorb;
    gradientRectangleb[2].color = bottomColorb;
    gradientRectangleb[3].color = bottomColorb;

    switch (levelEffect)
    {
        case 0 : break;
        case 1 :
            effectWeatherSpr = new RectangleShape(Vector2f(roomScale.x * 640, roomScale.y * 480));
            effectWeatherSpr->setFillColor(Color(255, 255, 255, 128));
            effectWeatherSpr->setTexture(effectTxt[3]);
            effectWeatherSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
            break;
        case 2 :
            effectWeatherSpr = new RectangleShape(Vector2f(roomScale.x * 640, roomScale.y * 480));
            effectWeatherSpr->setFillColor(Color(255, 255, 255, 128));
            effectWeatherSpr->setTexture(effectTxt[3]);
            effectWeatherSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
            break;
        case 3 :
            effectWeatherSpr = new RectangleShape(Vector2f(roomScale.x * 640, roomScale.y * 480));
            effectWeatherSpr->setTexture(effectTxt[5]);
            effectWeatherSpr->setTextureRect(IntRect(0, 0, roomScale.x * 640, roomScale.y * 480));
            break;
    }

    switch (levelEffectb)
    {
        case 0 : break;
        case 1 :
            effectCloudsSpr[0] = new RectangleShape(Vector2f(roomScale.x * 640, 63));
            effectCloudsSpr[0]->setTexture(effectTxt[0]);
            effectCloudsSpr[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));
            break;
        case 2 :
            effectCloudsSpr[0] = new RectangleShape(Vector2f(roomScale.x * 640, 63));
            effectCloudsSpr[0]->setTexture(effectTxt[2]);
            effectCloudsSpr[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));
            break;
        case 3 :
            effectCloudsSpr[0] = new RectangleShape(Vector2f(roomScale.x * 640, 63));
            effectCloudsSpr[0]->setTexture(effectTxt[1]);
            effectCloudsSpr[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));
            break;
        case 4 :
            effectCloudsSpr[0] = new RectangleShape(Vector2f(roomScale.x * 640, 63));
            effectCloudsSpr[0]->setTexture(effectTxt[0]);
            effectCloudsSpr[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));
            effectCloudsSpr[1] = new RectangleShape(Vector2f(roomScale.x * 640, 63));
            effectCloudsSpr[1]->setPosition(0, 24);
            effectCloudsSpr[1]->setTexture(effectTxt[0]);
            effectCloudsSpr[1]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));
            break;
        case 5 :
            effectCloudsSpr[0] = new RectangleShape(Vector2f(roomScale.x * 640, 63));
            effectCloudsSpr[0]->setTexture(effectTxt[2]);
            effectCloudsSpr[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));
            effectCloudsSpr[1] = new RectangleShape(Vector2f(roomScale.x * 640, 63));
            effectCloudsSpr[1]->setPosition(0, 24);
            effectCloudsSpr[1]->setTexture(effectTxt[2]);
            effectCloudsSpr[1]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));
            break;
        case 6 :
            effectCloudsSpr[0] = new RectangleShape(Vector2f(roomScale.x * 640, 63));
            effectCloudsSpr[0]->setTexture(effectTxt[1]);
            effectCloudsSpr[0]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));
            effectCloudsSpr[1] = new RectangleShape(Vector2f(roomScale.x * 640, 63));
            effectCloudsSpr[1]->setPosition(0, 24);
            effectCloudsSpr[1]->setTexture(effectTxt[1]);
            effectCloudsSpr[1]->setTextureRect(IntRect(0, 0, roomScale.x * 640, 63));
            break;
    }

    switch (levelbEffect)
    {
        case 0 : break;
        case 1 :
            effectWeatherSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
            effectWeatherSprb->setFillColor(Color(255, 255, 255, 128));
            effectWeatherSprb->setTexture(effectTxt[3]);
            effectWeatherSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
            break;
        case 2 :
            effectWeatherSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
            effectWeatherSprb->setFillColor(Color(255, 255, 255, 128));
            effectWeatherSprb->setTexture(effectTxt[3]);
            effectWeatherSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
            break;
        case 3 :
            effectWeatherSprb = new RectangleShape(Vector2f(roomScaleb.x * 640, roomScaleb.y * 480));
            effectWeatherSprb->setTexture(effectTxt[5]);
            effectWeatherSprb->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, roomScaleb.y * 480));
            break;
    }

    switch (levelbEffectb)
    {
        case 0 : break;
        case 1 :
            effectCloudsSprb[0] = new RectangleShape(Vector2f(roomScaleb.x * 640, 63));
            effectCloudsSprb[0]->setTexture(effectTxt[0]);
            effectCloudsSprb[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));
            break;
        case 2 :
            effectCloudsSprb[0] = new RectangleShape(Vector2f(roomScaleb.x * 640, 63));
            effectCloudsSprb[0]->setTexture(effectTxt[2]);
            effectCloudsSprb[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));
            break;
        case 3 :
            effectCloudsSprb[0] = new RectangleShape(Vector2f(roomScaleb.x * 640, 63));
            effectCloudsSprb[0]->setTexture(effectTxt[1]);
            effectCloudsSprb[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));
            break;
        case 4 :
            effectCloudsSprb[0] = new RectangleShape(Vector2f(roomScaleb.x * 640, 63));
            effectCloudsSprb[0]->setTexture(effectTxt[0]);
            effectCloudsSprb[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));
            effectCloudsSprb[1] = new RectangleShape(Vector2f(roomScaleb.x * 640, 63));
            effectCloudsSprb[1]->setPosition(0, 24);
            effectCloudsSprb[1]->setTexture(effectTxt[0]);
            effectCloudsSprb[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));
            break;
        case 5 :
            effectCloudsSprb[0] = new RectangleShape(Vector2f(roomScaleb.x * 640, 63));
            effectCloudsSprb[0]->setTexture(effectTxt[2]);
            effectCloudsSprb[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));
            effectCloudsSprb[1] = new RectangleShape(Vector2f(roomScaleb.x * 640, 63));
            effectCloudsSprb[1]->setPosition(0, 24);
            effectCloudsSprb[1]->setTexture(effectTxt[2]);
            effectCloudsSprb[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));
            break;
        case 6 :
            effectCloudsSprb[0] = new RectangleShape(Vector2f(roomScaleb.x * 640, 63));
            effectCloudsSprb[0]->setTexture(effectTxt[1]);
            effectCloudsSprb[0]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));
            effectCloudsSprb[1] = new RectangleShape(Vector2f(roomScaleb.x * 640, 63));
            effectCloudsSprb[1]->setPosition(0, 24);
            effectCloudsSprb[1]->setTexture(effectTxt[1]);
            effectCloudsSprb[1]->setTextureRect(IntRect(0, 0, roomScaleb.x * 640, 63));
            break;
    }

    timer = levelTime * 25;
    levelTimer = timer;

    autoscroll = levelAutoscroll;
    autoscrollSpeed = fma((levelAutoscrollSpeed - 1.0f), 0.8f, 1.0f);

    mario_gravity = levelGravity / 7.0f;
    sprite_gravity = levelGravity / 14.0f;
    star_gravity = levelGravity / 28.0f;

    if (!levelAutoscrollPath.empty())
    {
        for (vector<Dragger>::iterator it = levelAutoscrollPath.begin(); it != levelAutoscrollPath.end(); it++)
        {
            Vector2f currentNode(it->getPosition());

            autoscrollPath.emplace_back(Vector2f(currentNode.x + 16, currentNode.y + 16));
        }
    }

    liquidStartHeight = levelLiquidHeight;
    liquidTargetHeight = levelLiquidHeight;

    if (levelLiquidType == 1)
        watera = new Mark_WaterPlane(effectTxt[7], levelLiquidHeight, roomScale);
    else if (levelLiquidType == 2)
        watera = new Mark_LavaPlane(hazardsTxt[0], levelLiquidHeight, roomScale);

    if (!levelLiquidTrigger.empty())
    {
        for (vector<Trigger>::iterator it = levelLiquidTrigger.begin(); it != levelLiquidTrigger.end(); it++)
        {
            TriggerData* currentData = new TriggerData(it->save());

            liquidSpots.emplace_back(currentData);
        }
    }

    liquidStartHeightb = levelLiquidHeightb;
    liquidTargetHeightb = levelLiquidHeightb;

    if (levelLiquidTypeb == 1)
        waterb = new Mark_WaterPlane(effectTxt[7], levelLiquidHeightb, roomScaleb);
    else if (levelLiquidTypeb == 2)
        waterb = new Mark_LavaPlane(hazardsTxt[0], levelLiquidHeightb, roomScaleb);

    if (!levelLiquidTriggerb.empty())
    {
        for (vector<Trigger>::iterator it = levelLiquidTriggerb.begin(); it != levelLiquidTriggerb.end(); it++)
        {
            TriggerData* currentData = new TriggerData(it->save());

            liquidSpotsb.emplace_back(currentData);
        }
    }

    liquidSpeed = levelLiquidSpeed;

    for (register unsigned char i = 0; i < 6; i++)
    {
        if (bowserAttacks[i] == 0)
            koopaAttacks[i] = false;
        else
            koopaAttacks[i] = true;
    }

    koopaFrequences[0] = 225 - (bowserFrequences[0] - 5) * 14;
    koopaFrequences[1] = 85 - (bowserFrequences[1] - 5) * 2;
    koopaFrequences[2] = 250 - (bowserFrequences[2] - 10);
    koopaFrequences[3] = 350 - (bowserFrequences[3] - 10) * 2;
    koopaFrequences[4] = 305 - (bowserFrequences[4] - 10) * 2;
    koopaFrequences[5] = 200 - (bowserFrequences[5] - 10) * 2;

    koopaSpeeds[0] = fma((bowserSpeeds[0] - 5.0f), 0.25f, 6.0f);
    koopaSpeeds[1] = fma((bowserSpeeds[1] - 1.0f), (4.0f) / (9.0f), 2.0f);
    koopaSpeeds[2] = fma((bowserSpeeds[2] - 5.0f), (5.5f) / (15.0f), 2.5f);
    koopaSpeeds[3] = fma((bowserSpeeds[3] - 5.0f), (5.5f) / (15.0f), 2.5f);
    koopaSpeeds[4] = fma((bowserSpeeds[4] - 5.0f), (4.0f) / (15.0f), 2.0f);
    koopaSpeeds[5] = fma((bowserSpeeds[5] - 5.0f), (5.5f) / (15.0f), 2.5f);

    koopaTrail = 2 + (20 - bowserTrail);

    koopaHealth = bowserHealth;
    koopaMusic = bowserMusic;

    worldFont = new SpriteFont(Vector2f(0, 0), false, levelName);

    if (!listTile1.empty())
    {
        for (list<Tile>::iterator it = listTile1.begin(); it != listTile1.end(); it++)
        {
            TileData currentData(it->save());

            tilemapLayer1.emplace_back(Vertex(Vector2f(currentData.x, currentData.y), Color(255, 255, 255, levelBackAlpha), Vector2f(currentData.tilex * 32, currentData.tiley * 32)));
            tilemapLayer1.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y), Color(255, 255, 255, levelBackAlpha), Vector2f((currentData.tilex + 1) * 32, currentData.tiley * 32)));
            tilemapLayer1.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y + 32), Color(255, 255, 255, levelBackAlpha), Vector2f((currentData.tilex + 1) * 32, (currentData.tiley + 1) * 32)));
            tilemapLayer1.emplace_back(Vertex(Vector2f(currentData.x, currentData.y + 32), Color(255, 255, 255, levelBackAlpha), Vector2f(currentData.tilex * 32, (currentData.tiley + 1) * 32)));
        }
    }

    if (!listTile2.empty())
    {
        for (list<Tile>::iterator it = listTile2.begin(); it != listTile2.end(); it++)
        {
            TileData currentData(it->save());

            tilemapLayer2.emplace_back(Vertex(Vector2f(currentData.x, currentData.y), Color::White, Vector2f(currentData.tilex * 32, currentData.tiley * 32)));
            tilemapLayer2.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y), Color::White, Vector2f((currentData.tilex + 1) * 32, currentData.tiley * 32)));
            tilemapLayer2.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y + 32), Color::White, Vector2f((currentData.tilex + 1) * 32, (currentData.tiley + 1) * 32)));
            tilemapLayer2.emplace_back(Vertex(Vector2f(currentData.x, currentData.y + 32), Color::White, Vector2f(currentData.tilex * 32, (currentData.tiley + 1) * 32)));

            collisionMatrix->setValue(currentData.x / 32, currentData.y / 32, 1);
        }
    }

    if (!listTile3.empty())
    {
            for (list<Tile>::iterator it = listTile3.begin(); it != listTile3.end(); it++)
            {
                TileData currentData(it->save());

                tilemapLayer3.emplace_back(Vertex(Vector2f(currentData.x, currentData.y), Color(255, 255, 255, levelFrontAlpha), Vector2f(currentData.tilex * 32, currentData.tiley * 32)));
                tilemapLayer3.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y), Color(255, 255, 255, levelFrontAlpha), Vector2f((currentData.tilex + 1) * 32, currentData.tiley * 32)));
                tilemapLayer3.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y + 32), Color(255, 255, 255, levelFrontAlpha), Vector2f((currentData.tilex + 1) * 32, (currentData.tiley + 1) * 32)));
                tilemapLayer3.emplace_back(Vertex(Vector2f(currentData.x, currentData.y + 32), Color(255, 255, 255, levelFrontAlpha), Vector2f(currentData.tilex * 32, (currentData.tiley + 1) * 32)));
            }
    }

    if (!listTileb1.empty())
    {
        for (list<Tile>::iterator it = listTileb1.begin(); it != listTileb1.end(); it++)
        {
            TileData currentData(it->save());

            tilemapLayer1b.emplace_back(Vertex(Vector2f(currentData.x, currentData.y), Color(255, 255, 255, levelBackAlphab), Vector2f(currentData.tilex * 32, currentData.tiley * 32)));
            tilemapLayer1b.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y), Color(255, 255, 255, levelBackAlphab), Vector2f((currentData.tilex + 1) * 32, currentData.tiley * 32)));
            tilemapLayer1b.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y + 32), Color(255, 255, 255, levelBackAlphab), Vector2f((currentData.tilex + 1) * 32, (currentData.tiley + 1) * 32)));
            tilemapLayer1b.emplace_back(Vertex(Vector2f(currentData.x, currentData.y + 32), Color(255, 255, 255, levelBackAlphab), Vector2f(currentData.tilex * 32, (currentData.tiley + 1) * 32)));
        }
    }

    if (!listTileb2.empty())
    {
        for (list<Tile>::iterator it = listTileb2.begin(); it != listTileb2.end(); it++)
        {
            TileData currentData(it->save());

            tilemapLayer2b.emplace_back(Vertex(Vector2f(currentData.x, currentData.y), Color::White, Vector2f(currentData.tilex * 32, currentData.tiley * 32)));
            tilemapLayer2b.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y), Color::White, Vector2f((currentData.tilex + 1) * 32, currentData.tiley * 32)));
            tilemapLayer2b.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y + 32), Color::White, Vector2f((currentData.tilex + 1) * 32, (currentData.tiley + 1) * 32)));
            tilemapLayer2b.emplace_back(Vertex(Vector2f(currentData.x, currentData.y + 32), Color::White, Vector2f(currentData.tilex * 32, (currentData.tiley + 1) * 32)));

            collisionMatrixb->setValue(currentData.x / 32, currentData.y / 32, 1);
        }
    }

    if (!listTileb3.empty())
    {
        for (list<Tile>::iterator it = listTileb3.begin(); it != listTileb3.end(); it++)
        {
            TileData currentData(it->save());

            tilemapLayer3b.emplace_back(Vertex(Vector2f(currentData.x, currentData.y), Color(255, 255, 255, levelFrontAlphab), Vector2f(currentData.tilex * 32, currentData.tiley * 32)));
            tilemapLayer3b.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y), Color(255, 255, 255, levelFrontAlphab), Vector2f((currentData.tilex + 1) * 32, currentData.tiley * 32)));
            tilemapLayer3b.emplace_back(Vertex(Vector2f(currentData.x + 32, currentData.y + 32), Color(255, 255, 255, levelFrontAlphab), Vector2f((currentData.tilex + 1) * 32, (currentData.tiley + 1) * 32)));
            tilemapLayer3b.emplace_back(Vertex(Vector2f(currentData.x, currentData.y + 32), Color(255, 255, 255, levelFrontAlphab), Vector2f(currentData.tilex * 32, (currentData.tiley + 1) * 32)));
        }
    }

    if (!listSceneries.empty())
    {
        for (list<Entity*>::iterator it = listSceneries.begin(); it != listSceneries.end(); it++)
        {
            vector<float> data;
            Vector2f originPos;

            (*it)->save(data);

            switch ((*it)->getType())
            {
                case 92 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_GREEN_TREE)); originPos = Vector2f(-1, 32); break;
                case 93 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_GREEN_BIGTREE)); originPos = Vector2f(0, 64); break;
                case 94 : listPlaceables.emplace_back(new Scenery_Bush(*sceneriesTxt[0])); originPos = Vector2f(16, -2); break;
                case 95 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_GRAY_TREE)); originPos = Vector2f(-1, 32); break;
                case 96 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_GRAY_BIGTREE)); originPos = Vector2f(0, 64); break;
                case 97 : listPlaceables.emplace_back(new Scenery_Bush(*sceneriesTxt[1])); originPos = Vector2f(16, -2); break;
                case 98 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_YELLOW_TREE)); originPos = Vector2f(-1, 32); break;
                case 99 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_YELLOW_BIGTREE)); originPos = Vector2f(0, 64); break;
                case 100 : listPlaceables.emplace_back(new Scenery_Bush(*sceneriesTxt[2])); originPos = Vector2f(16, -2); break;
                case 101 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_RED_TREE)); originPos = Vector2f(-1, 32); break;
                case 102 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_RED_BIGTREE)); originPos = Vector2f(0, 64); break;
                case 103 : listPlaceables.emplace_back(new Scenery_Bush(*sceneriesTxt[3])); originPos = Vector2f(16, -2); break;
                case 104 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_BLUE_TREE)); originPos = Vector2f(-1, 32); break;
                case 105 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_BLUE_BIGTREE)); originPos = Vector2f(0, 64); break;
                case 106 : listPlaceables.emplace_back(new Scenery_Bush(*sceneriesTxt[4])); originPos = Vector2f(16, -2); break;
                case 107 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_FENCE)); originPos = Vector2f(64, 0); break;
                case 108 : listPlaceables.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_SNOWFENCE)); originPos = Vector2f(64, 0); break;
                case 109 : listPlaceables.emplace_back(new Scenery_Cloud(*sceneriesTxt[5])); originPos = Vector2f(15, 8); break;
                case 110 : listPlaceables.emplace_back(new Scenery_Cloud(*sceneriesTxt[6])); originPos = Vector2f(15, 8); break;
                case 111 : listPlaceables.emplace_back(new Scenery_Static(*sceneriesTxt[7], IntRect(0, 0, 127, 160))); originPos = Vector2f(47, 128); break;
                case 112 : listPlaceables.emplace_back(new Scenery_Static(*sceneriesTxt[8], IntRect(0, 0, 187, 160))); originPos = Vector2f(77, 128); break;
                case 113 : listPlaceables.emplace_back(new Scenery_Static(*sceneriesTxt[9], IntRect(0, 0, 315, 192))); originPos = Vector2f(141, 160); break;
                case 229 : listPlaceables.emplace_back(new Scenery_Waterfall(*sceneriesTxt[10])); originPos = Vector2f(31, -5); break;
                case 230 : listPlaceables.emplace_back(new Scenery_Scroll(*sceneriesTxt[11])); originPos = Vector2f(11, 0); break;
                case 231 : listPlaceables.emplace_back(new Scenery_Static(*sceneriesTxt[12], IntRect(0, 0, 187, 160))); originPos = Vector2f(77, 128); break;
                case 232 : listPlaceables.emplace_back(new Scenery_Static(*sceneriesTxt[13], IntRect(0, 0, 315, 192))); originPos = Vector2f(141, 160); break;
            }

            listPlaceables.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
        }
    }

    if (!listEntities.empty())
    {
        for (list<Entity*>::iterator it = listEntities.begin(); it != listEntities.end(); it++)
        {
            vector<float> data;
            Vector2f originPos;

            (*it)->save(data);

            unsigned char create = 0;

            switch ((*it)->getType())
            {
                case 0 : startPos = Vector2f(data[0], data[1]); break;
                case 1 : listMiddle.emplace_back(new Mark_CheckPoint(*marksTxt[7], false)); originPos = Vector2f(28, 79); create = 2; break;
                case 2 :
                    listPlaceables.emplace_back(new Mark_LevelEnd(*marksTxt[8], *marksTxt[9], *effectTxt[6], data[2]));
                    originPos = Vector2f(-2, 256);
                    create = 1;
                    break;
                case 3 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 32, data[1]), Vector2f(96, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformRedMoveH(*marksTxt[0], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(32, 0);
                    create = 3;
                    break;
                case 4 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 32, data[1]), Vector2f(96, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformRedTouchH(*marksTxt[0], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(32, 0);
                    create = 3;
                    break;
                case 5 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 32, data[1]), Vector2f(96, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformRedMoveV(*marksTxt[0], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(32, 0);
                    create = 3;
                    break;
                case 6 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 32, data[1]), Vector2f(96, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformRedTouchV(*marksTxt[0], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(32, 0);
                    create = 3;
                    break;
                case 7 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 32, data[1]), Vector2f(96, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformRedFall(*marksTxt[0], listCollider.back()));

                    originPos = Vector2f(32, 0);
                    create = 3;
                    break;
                case 8 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformShortMoveH(*marksTxt[1], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 9 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformShortTouchH(*marksTxt[1], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 10 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformShortMoveV(*marksTxt[1], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 11 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformShortTouchV(*marksTxt[1], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 12 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformShortFall(*marksTxt[1], listCollider.back()));

                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 13 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 45, data[1]), Vector2f(126, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformCloudMoveH(*marksTxt[2], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(45, 0);
                    create = 3;
                    break;
                case 14 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 45, data[1]), Vector2f(126, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformCloudTouchH(*marksTxt[2], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(45, 0);
                    create = 3;
                    break;
                case 15 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 45, data[1]), Vector2f(126, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformCloudMoveV(*marksTxt[2], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(45, 0);
                    create = 3;
                    break;
                case 16 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 45, data[1]), Vector2f(126, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformCloudTouchV(*marksTxt[2], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(45, 0);
                    create = 3;
                    break;
                case 17 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 45, data[1]), Vector2f(126, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformCloudFall(*marksTxt[2], listCollider.back()));

                    originPos = Vector2f(45, 0);
                    create = 3;
                    break;
                case 18 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 43, data[1]), Vector2f(120, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformStoneMoveH(*marksTxt[3], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(43, 0);
                    create = 3;
                    break;
                case 19 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 43, data[1]), Vector2f(120, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformStoneTouchH(*marksTxt[3], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(43, 0);
                    create = 3;
                    break;
                case 20 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 43, data[1]), Vector2f(120, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformStoneMoveV(*marksTxt[3], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(43, 0);
                    create = 3;
                    break;
                case 21 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 43, data[1]), Vector2f(120, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformStoneTouchV(*marksTxt[3], data[2], data[3], listCollider.back()));

                    originPos = Vector2f(43, 0);
                    create = 3;
                    break;
                case 22 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 43, data[1]), Vector2f(120, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfter.emplace_back(new Mark_PlatformStoneFall(*marksTxt[3], listCollider.back()));

                    originPos = Vector2f(43, 0);
                    create = 3;
                    break;
                case 23 : listMiddle.emplace_back(new Mark_Spring(*marksTxt[4], 20)); originPos = Vector2f(0, 32); create = 2; break;
                case 24 : listMiddle.emplace_back(new Mark_Spring(*marksTxt[5], 28)); originPos = Vector2f(0, 32); create = 2; break;
                case 25 : listMiddle.emplace_back(new Mark_Spring(*marksTxt[6], 36)); originPos = Vector2f(0, 32); create = 2; break;
                case 114 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_Goomba(*enemiesTxt[0], listCollider.back())); originPos = Vector2f(0, 0); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 115 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_GoombaGrey(*enemiesTxt[1], listCollider.back())); originPos = Vector2f(0, 0); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 116 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_Spiny(*enemiesTxt[2], listCollider.back())); originPos = Vector2f(-17, 0); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 117 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_SpinyGrey(*enemiesTxt[3], listCollider.back())); originPos = Vector2f(-17, 0); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 118 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_BuzzyBeetle(*enemiesTxt[4], enemiesTxt[13], listCollider.back())); originPos = Vector2f(-16, 0); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 119 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_KoopaGreen(*enemiesTxt[5], enemiesTxt[14], listCollider.back(), false)); originPos = Vector2f(-16, 15); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 120 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_KoopaRed(*enemiesTxt[6], enemiesTxt[15], listCollider.back(), false)); originPos = Vector2f(-16, 15); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 121 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_KoopaBlue(*enemiesTxt[7], enemiesTxt[16], listCollider.back(), false)); originPos = Vector2f(-16, 15); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 122 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_KoopaYellow(*enemiesTxt[8], enemiesTxt[17], listCollider.back(), false)); originPos = Vector2f(-16, 15); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 123 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_KoopaGreen(*enemiesTxt[5], enemiesTxt[14], listCollider.back(), true)); originPos = Vector2f(-16, 0); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 124 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_KoopaRed(*enemiesTxt[6], enemiesTxt[15], listCollider.back(), true)); originPos = Vector2f(-16, 0); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 125 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_KoopaBlue(*enemiesTxt[7], enemiesTxt[16], listCollider.back(), true)); originPos = Vector2f(-16, 0); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 126 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_KoopaYellow(*enemiesTxt[8], enemiesTxt[17], listCollider.back(), true)); originPos = Vector2f(-16, 0); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 127 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_ParatroopaGreenH(*enemiesTxt[9], enemiesTxt[5], enemiesTxt[14], listCollider.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 128 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_ParatroopaRedH(*enemiesTxt[10], enemiesTxt[6], enemiesTxt[15], listCollider.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 129 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_ParatroopaBlueH(*enemiesTxt[11], enemiesTxt[7], enemiesTxt[16], listCollider.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 130 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_ParatroopaGreenV(*enemiesTxt[9], enemiesTxt[5], enemiesTxt[14], listCollider.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 131 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_ParatroopaRedV(*enemiesTxt[10], enemiesTxt[6], enemiesTxt[15], listCollider.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 132 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_ParatroopaBlueV(*enemiesTxt[11], enemiesTxt[7], enemiesTxt[16], listCollider.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 133 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_ParatroopaGreenJ(*enemiesTxt[9], enemiesTxt[5], enemiesTxt[14], listCollider.back())); originPos = Vector2f(-16, 16); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 134 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_ParatroopaRedJ(*enemiesTxt[10], enemiesTxt[6], enemiesTxt[15], listCollider.back())); originPos = Vector2f(-16, 16); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 135 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_ParatroopaBlueJ(*enemiesTxt[11], enemiesTxt[7], enemiesTxt[16], listCollider.back())); originPos = Vector2f(-16, 16); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 136 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddle.emplace_back(new Sprite_ParatroopaYellow(*enemiesTxt[12], enemiesTxt[8], enemiesTxt[17], listCollider.back())); originPos = Vector2f(-16, 16); create = 2;
                    listCollider.back()->object = listMiddle.back();
                    break;
                case 137 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1] + 32), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantGreenT(enemiesTxt[18], listCollider.back())); originPos = Vector2f(-16, 15); create = 2;
                    break;
                case 138 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 32, data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantGreenL(enemiesTxt[18], listCollider.back())); originPos = Vector2f(16, 15); create = 2;
                    break;
                case 139 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantGreenR(enemiesTxt[18], listCollider.back())); originPos = Vector2f(0, 15); create = 2;
                    break;
                case 140 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1]), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantGreenB(enemiesTxt[18], listCollider.back())); originPos = Vector2f(-16, 0); create = 2;
                    break;
                case 141 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1] + 32), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantFireT(enemiesTxt[19], listCollider.back())); originPos = Vector2f(-16, 15); create = 2;
                    break;
                case 142 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 32, data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantFireL(enemiesTxt[19], listCollider.back())); originPos = Vector2f(16, 15); create = 2;
                    break;
                case 143 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantFireR(enemiesTxt[19], listCollider.back())); originPos = Vector2f(0, 15); create = 2;
                    break;
                case 144 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1]), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantFireB(enemiesTxt[19], listCollider.back())); originPos = Vector2f(-16, 0); create = 2;
                    break;
                case 145 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1] + 32), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantGreyT(enemiesTxt[20], listCollider.back())); originPos = Vector2f(-16, 15); create = 2;
                    break;
                case 146 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 32, data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantGreyL(enemiesTxt[20], listCollider.back())); originPos = Vector2f(16, 15); create = 2;
                    break;
                case 147 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantGreyR(enemiesTxt[20], listCollider.back())); originPos = Vector2f(0, 15); create = 2;
                    break;
                case 148 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1]), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_PlantGreyB(enemiesTxt[20], listCollider.back())); originPos = Vector2f(-16, 0); create = 2;
                    break;
                case 149 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_CheepCheepRed(*enemiesTxt[21], listCollider.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 150 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_CheepCheepGreen(*enemiesTxt[22], listCollider.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 151 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_CheepCheepBlue(*enemiesTxt[23], listCollider.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 152 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_CheepCheepYellow(*enemiesTxt[24], listCollider.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 153 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, reinterpret_cast<Placeable*>(1)});
                    listMiddle.emplace_back(new Sprite_HammerBro(*enemiesTxt[25], listCollider.back())); originPos = Vector2f(-16, 16); create = 2;
                    break;
                case 154 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, reinterpret_cast<Placeable*>(1)});
                    listMiddle.emplace_back(new Sprite_SilverBro(*enemiesTxt[26], listCollider.back())); originPos = Vector2f(-16, 16); create = 2;
                    break;
                case 155 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, reinterpret_cast<Placeable*>(1)});
                    listMiddle.emplace_back(new Sprite_FireBro(*enemiesTxt[27], listCollider.back())); originPos = Vector2f(-16, 16); create = 2;
                    break;
                case 156 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, reinterpret_cast<Placeable*>(1)});
                    listMiddle.emplace_back(new Sprite_BeetBro(*enemiesTxt[28], listCollider.back())); originPos = Vector2f(-16, 16); create = 2;
                    break;
                case 157 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, reinterpret_cast<Placeable*>(1)});
                    listMiddle.emplace_back(new Sprite_SpikeBro(*enemiesTxt[29], listCollider.back())); originPos = Vector2f(-16, 16); create = 2;
                    break;
                case 158 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_LakituWhite(*enemiesTxt[32], listCollider.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 159 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_LakituDark(*enemiesTxt[33], listCollider.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 160 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_LakituGold(*enemiesTxt[34], listCollider.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 161 : listMiddle.emplace_back(new Sprite_Poison(*enemiesTxt[37])); originPos = Vector2f(0, 0); create = 2; break;
                case 162 :
                    listPlaceables.emplace_back(new Bonus_PoisonBlock(itemsTxt[0])); originPos = Vector2f(0, 0); create = 1;
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 163 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_PoisonBlockInv(itemsTxt[0], listCollider.back())); originPos = Vector2f(0, 0); create = 1;
                    break;
                case 164 : listMiddle.emplace_back(new Sprite_ThwompB(*enemiesTxt[38])); originPos = Vector2f(10, 4); create = 2; break;
                case 165 : listMiddle.emplace_back(new Sprite_ThwompT(*enemiesTxt[38])); originPos = Vector2f(10, -36); create = 2; break;
                case 166 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 42, data[1] - 23), Vector2f(52, 55)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddle.emplace_back(new Sprite_Bowser(*enemiesTxt[39], listCollider.back())); originPos = Vector2f(16, 40); create = 2;
                    break;
                case 167 : listPlaceables.emplace_back(new Hazard_LavaT(*hazardsTxt[0])); originPos = Vector2f(0, 2); create = 1; break;
                case 168 : listPlaceables.emplace_back(new Hazard_LavaB(*hazardsTxt[0])); originPos = Vector2f(0, -34); create = 1; break;
                case 169 : listPlaceables.emplace_back(new Hazard_LavaL(*hazardsTxt[0])); originPos = Vector2f(2, 0); create = 1; break;
                case 170 : listPlaceables.emplace_back(new Hazard_LavaR(*hazardsTxt[0])); originPos = Vector2f(-34, 0); create = 1; break;
                case 171 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(928, 96)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(960, 96)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(960, 128)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(928, 128)));
                    create = 0;
                    break;
                case 172 : listMiddle.emplace_back(new Hazard_PodobooT(*hazardsTxt[1], data[2])); originPos = Vector2f(-2, 0); create = 2; break;
                case 173 : listMiddle.emplace_back(new Hazard_PodobooB(*hazardsTxt[1], data[2])); originPos = Vector2f(-2, 0); create = 2; break;
                case 174 : listMiddle.emplace_back(new Hazard_PodobooL(*hazardsTxt[1], data[2])); originPos = Vector2f(-2, 0); create = 2; break;
                case 175 : listMiddle.emplace_back(new Hazard_PodobooR(*hazardsTxt[1], data[2])); originPos = Vector2f(-2, 0); create = 2; break;
                case 176 : listMiddle.emplace_back(new Hazard_PodobooFountainT); originPos = Vector2f(0, 0); create = 2; break;
                case 177 : listMiddle.emplace_back(new Hazard_PodobooFountainB); originPos = Vector2f(0, 0); create = 2; break;
                case 178 : listMiddle.emplace_back(new Hazard_PodobooFountainL); originPos = Vector2f(0, 0); create = 2; break;
                case 179 : listMiddle.emplace_back(new Hazard_PodobooFountainR); originPos = Vector2f(0, 0); create = 2; break;
                case 180 : listPlaceables.emplace_back(new Hazard_Spike(Vector2i(864, 96))); originPos = Vector2f(0, 0); create = 1; break;
                case 181 : listPlaceables.emplace_back(new Hazard_Spike(Vector2i(864, 192))); originPos = Vector2f(0, 0); create = 1; break;
                case 182 : listPlaceables.emplace_back(new Hazard_Spike(Vector2i(864, 128))); originPos = Vector2f(0, 0); create = 1; break;
                case 183 : listPlaceables.emplace_back(new Hazard_Spike(Vector2i(864, 160))); originPos = Vector2f(0, 0); create = 1; break;
                case 184 :
                    listMiddle.emplace_back(new Hazard_CannonHT(*hazardsTxt[2])); originPos = Vector2f(0, -1); create = 2;
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 185 :
                    listMiddle.emplace_back(new Hazard_CannonHB(*hazardsTxt[2])); originPos = Vector2f(0, -31); create = 2;
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 186 :
                    listMiddle.emplace_back(new Hazard_CannonVL(*hazardsTxt[2])); originPos = Vector2f(-1, 0); create = 2;
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 187 :
                    listMiddle.emplace_back(new Hazard_CannonVR(*hazardsTxt[2])); originPos = Vector2f(-31, 0); create = 2;
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 188 :
                    listMiddle.emplace_back(new Hazard_CannonHomingHT(*hazardsTxt[2])); originPos = Vector2f(0, -1); create = 2;
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 189 :
                    listMiddle.emplace_back(new Hazard_CannonHomingHB(*hazardsTxt[2])); originPos = Vector2f(0, -31); create = 2;
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 190 :
                    listMiddle.emplace_back(new Hazard_CannonHomingVL(*hazardsTxt[2])); originPos = Vector2f(-1, 0); create = 2;
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 191 :
                    listMiddle.emplace_back(new Hazard_CannonHomingVR(*hazardsTxt[2])); originPos = Vector2f(-31, 0); create = 2;
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 192 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(608, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(640, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(640, 256)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(608, 256)));
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 193 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(576, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(608, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(608, 256)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(576, 256)));
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 194 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(640, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(672, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(672, 256)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(640, 256)));
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 195 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(704, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(736, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(736, 256)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(704, 256)));
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 196 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(672, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(704, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(704, 256)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(672, 256)));
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 197 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(768, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(800, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(800, 256)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(768, 256)));
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 198 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(736, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(768, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(768, 256)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(736, 256)));
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 199 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(800, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(832, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(832, 256)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(800, 256)));
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 200 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(864, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(896, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(896, 256)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(864, 256)));
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 201 :
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(832, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(864, 224)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(864, 256)));
                    tilemapLayer2.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(832, 256)));
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 202 : listAfter.emplace_back(new Hazard_RotodiscCC(*hazardsTxt[4], Vector2f(data[2], data[3]), data[4])); originPos = Vector2f(0, 0); create = 3; break;
                case 203 : listAfter.emplace_back(new Hazard_RotodiscC(*hazardsTxt[4], Vector2f(data[2], data[3]), data[4])); originPos = Vector2f(0, 0); create = 3; break;
                case 204 : listAfter.emplace_back(new Hazard_RotodiscRCC(*hazardsTxt[4], Vector2f(data[2], data[3]), data[4])); originPos = Vector2f(0, 0); create = 3; break;
                case 205 : listAfter.emplace_back(new Hazard_RotodiscRC(*hazardsTxt[4], Vector2f(data[2], data[3]), data[4])); originPos = Vector2f(0, 0); create = 3; break;
                case 206 :
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    collisionMatrix->setValue((data[0]/32) + 1, data[1]/32, 1);
                    listMiddle.emplace_back(new Hazard_LavalauncherL(*hazardsTxt[5])); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 207 :
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    collisionMatrix->setValue((data[0]/32) - 1, data[1]/32, 1);
                    listMiddle.emplace_back(new Hazard_LavalauncherR(*hazardsTxt[5])); originPos = Vector2f(-32, 0); create = 2;
                    break;
                case 208 :
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    collisionMatrix->setValue(data[0]/32, (data[1]/32)-1, 1);
                    listMiddle.emplace_back(new Hazard_LavalauncherVL(*hazardsTxt[6])); originPos = Vector2f(2, 37); create = 2;
                    break;
                case 209 :
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    collisionMatrix->setValue(data[0]/32, (data[1]/32)-1, 1);
                    listMiddle.emplace_back(new Hazard_LavalauncherVR(*hazardsTxt[6])); originPos = Vector2f(-30, 37); create = 2;
                    break;
                case 210 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 10, data[1] - 6), Vector2f(54, 38)), Vector2f(0, 0), 0, C_IMMOBILE, false, NULL});
                    listMiddle.emplace_back(new Hazard_SpikelauncherT(*hazardsTxt[8])); originPos = Vector2f(12, 8); create = 2;
                    break;
                case 211 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 10, data[1] + 2), Vector2f(54, 38)), Vector2f(0, 0), 0, C_IMMOBILE, false, NULL});
                    listMiddle.emplace_back(new Hazard_SpikelauncherB(*hazardsTxt[8])); originPos = Vector2f(12, -40); create = 2;
                    break;
                case 212 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 32, data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 64, data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 96, data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 128, data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 160, data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    {
                        vector<Vector2f> path;
                        short t = static_cast<short>(data[2]);

                        for (short i = 0; i < t*2; i += 2)
                            path.emplace_back(data[i+3], data[i+4]);

                        listAfter.emplace_back(new Hazard_Centipede(&path.front(), t, listCollider.end()));
                    }
                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 225 : listPlaceables.emplace_back(new Sprite_StaticPlant(Vector2f(data[0], data[1]), 0)); originPos = Vector2f(-1, -1); create = 1; break;
                case 226 : listPlaceables.emplace_back(new Sprite_StaticPlant(Vector2f(data[0], data[1]), 270)); originPos = Vector2f(-1, -32); create = 1; break;
                case 227 : listPlaceables.emplace_back(new Sprite_StaticPlant(Vector2f(data[0], data[1]), 90)); originPos = Vector2f(-31, -1); create = 1; break;
                case 228 : listPlaceables.emplace_back(new Sprite_StaticPlant(Vector2f(data[0], data[1]), 180)); originPos = Vector2f(-31, -31); create = 1; break;
            }

            if (create == 1)
                listPlaceables.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
            else if (create == 2)
                listMiddle.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
            else if (create == 3)
                listAfter.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
        }
    }

    if (!listBonus.empty())
    {
        for (list<Entity*>::iterator it = listBonus.begin(); it != listBonus.end(); it++)
        {
            vector<float> data;
            Vector2f originPos;

            (*it)->save(data);

            bool toMiddle = false;

            switch ((*it)->getType())
            {
                case 26 :
                    listPlaceables.emplace_back(new Bonus_MushroomBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 27 :
                    listPlaceables.emplace_back(new Bonus_FlowerBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 28 :
                    listPlaceables.emplace_back(new Bonus_BeetBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 29 :
                    listPlaceables.emplace_back(new Bonus_LuiBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 30 :
                    listPlaceables.emplace_back(new Bonus_StarBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 31 :
                    listPlaceables.emplace_back(new Bonus_LifeBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 32 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_MushroomBlockInv(itemsTxt[0], listCollider.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 33 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_FlowerBlockInv(itemsTxt[0], listCollider.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 34 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_BeetBlockInv(itemsTxt[0], listCollider.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 35 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_LuiBlockInv(itemsTxt[0], listCollider.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 36 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_StarBlockInv(itemsTxt[0], listCollider.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 37 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_LifeBlockInv(itemsTxt[0], listCollider.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 38 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_MushroomBlockInv(itemsTxt[0], listCollider.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 39 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_FlowerBlockInv(itemsTxt[0], listCollider.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 40 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_BeetBlockInv(itemsTxt[0], listCollider.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 41 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_LuiBlockInv(itemsTxt[0], listCollider.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 42 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_StarBlockInv(itemsTxt[0], listCollider.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 43 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_LifeBlockInv(itemsTxt[0], listCollider.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 44 : listMiddle.emplace_back(new Sprite_Mushroom(*itemsTxt[3])); originPos = Vector2f(0, 0); toMiddle = true; break;
                case 45 : listMiddle.emplace_back(new Sprite_Flower(*itemsTxt[4])); originPos = Vector2f(0, 0); toMiddle = true; break;
                case 46 : listMiddle.emplace_back(new Sprite_Beet(*itemsTxt[5])); originPos = Vector2f(-2, 2); toMiddle = true; break;
                case 47 : listMiddle.emplace_back(new Sprite_Lui(*itemsTxt[6])); originPos = Vector2f(-1, 1); toMiddle = true; break;
                case 48 : listMiddle.emplace_back(new Sprite_Star(*itemsTxt[7])); originPos = Vector2f(0, 0); toMiddle = true; break;
                case 49 : listMiddle.emplace_back(new Sprite_Life(*itemsTxt[8])); originPos = Vector2f(0, 0); toMiddle = true; break;
                case 50 :
                    listPlaceables.emplace_back(new Bonus_CoinBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 51 :
                    listCollider.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceables.emplace_back(new Bonus_CoinBlockInv(itemsTxt[0], listCollider.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 52 : listPlaceables.emplace_back(new Bonus_Coin(*itemsTxt[2])); originPos = Vector2f(-6, -2); break;
                case 53 :
                    listPlaceables.emplace_back(new Bonus_Brick(itemsTxt[1])); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 54 :
                    listPlaceables.emplace_back(new Bonus_CoinBrick(itemsTxt[1], 10)); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 55 :
                    listPlaceables.emplace_back(new Bonus_CoinBrick(itemsTxt[1], 15)); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 213 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 0, false);
                    unsigned char* c = collisionMatrix->getReference(data[0]/32, data[1]/32);

                    toggle->attributeSolid(c);

                    (*c) = 1;

                    listPlaceables.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 214 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 0, true);

                    toggle->attributeSolid(collisionMatrix->getReference(data[0]/32, data[1]/32));

                    listPlaceables.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 215 :
                    listPlaceables.emplace_back(new Bonus_Switch(marksTxt[10], 0)); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 216 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 1, false);
                    unsigned char* c = collisionMatrix->getReference(data[0]/32, data[1]/32);

                    toggle->attributeSolid(c);

                    (*c) = 1;

                    listPlaceables.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 217 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 1, true);

                    toggle->attributeSolid(collisionMatrix->getReference(data[0]/32, data[1]/32));

                    listPlaceables.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 218 :
                    listPlaceables.emplace_back(new Bonus_Switch(marksTxt[10], 1)); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 219 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 2, false);
                    unsigned char* c = collisionMatrix->getReference(data[0]/32, data[1]/32);

                    toggle->attributeSolid(c);

                    (*c) = 1;

                    listPlaceables.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 220 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 2, true);

                    toggle->attributeSolid(collisionMatrix->getReference(data[0]/32, data[1]/32));

                    listPlaceables.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 221 :
                    listPlaceables.emplace_back(new Bonus_Switch(marksTxt[10], 2)); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 222 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 3, false);
                    unsigned char* c = collisionMatrix->getReference(data[0]/32, data[1]/32);

                    toggle->attributeSolid(c);

                    (*c) = 1;

                    listPlaceables.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 223 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 3, true);

                    toggle->attributeSolid(collisionMatrix->getReference(data[0]/32, data[1]/32));

                    listPlaceables.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 224 :
                    listPlaceables.emplace_back(new Bonus_Switch(marksTxt[10], 3)); originPos = Vector2f(0, 0);
                    collisionMatrix->setValue(data[0]/32, data[1]/32, 1);
                    break;
            }

            if (toMiddle)
                listMiddle.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
            else
                listPlaceables.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
        }
    }

    if (!listSceneriesb.empty())
    {
        for (list<Entity*>::iterator it = listSceneriesb.begin(); it != listSceneriesb.end(); it++)
        {
            vector<float> data;
            Vector2f originPos;

            (*it)->save(data);

            switch ((*it)->getType())
            {
                case 92 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_GREEN_TREE)); originPos = Vector2f(-1, 32); break;
                case 93 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_GREEN_BIGTREE)); originPos = Vector2f(0, 64); break;
                case 94 : listPlaceablesb.emplace_back(new Scenery_Bush(*sceneriesTxt[0])); originPos = Vector2f(16, -2); break;
                case 95 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_GRAY_TREE)); originPos = Vector2f(-1, 32); break;
                case 96 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_GRAY_BIGTREE)); originPos = Vector2f(0, 64); break;
                case 97 : listPlaceablesb.emplace_back(new Scenery_Bush(*sceneriesTxt[1])); originPos = Vector2f(16, -2); break;
                case 98 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_YELLOW_TREE)); originPos = Vector2f(-1, 32); break;
                case 99 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_YELLOW_BIGTREE)); originPos = Vector2f(0, 64); break;
                case 100 : listPlaceablesb.emplace_back(new Scenery_Bush(*sceneriesTxt[2])); originPos = Vector2f(16, -2); break;
                case 101 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_RED_TREE)); originPos = Vector2f(-1, 32); break;
                case 102 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_RED_BIGTREE)); originPos = Vector2f(0, 64); break;
                case 103 : listPlaceablesb.emplace_back(new Scenery_Bush(*sceneriesTxt[3])); originPos = Vector2f(16, -2); break;
                case 104 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_BLUE_TREE)); originPos = Vector2f(-1, 32); break;
                case 105 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_BLUE_BIGTREE)); originPos = Vector2f(0, 64); break;
                case 106 : listPlaceablesb.emplace_back(new Scenery_Bush(*sceneriesTxt[4])); originPos = Vector2f(16, -2); break;
                case 107 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_FENCE)); originPos = Vector2f(64, 0); break;
                case 108 : listPlaceablesb.emplace_back(new Scenery_Static(*mainTileset, TILE_SCENERY_SNOWFENCE)); originPos = Vector2f(64, 0); break;
                case 109 : listPlaceablesb.emplace_back(new Scenery_Cloud(*sceneriesTxt[5])); originPos = Vector2f(15, 8); break;
                case 110 : listPlaceablesb.emplace_back(new Scenery_Cloud(*sceneriesTxt[6])); originPos = Vector2f(15, 8); break;
                case 111 : listPlaceablesb.emplace_back(new Scenery_Static(*sceneriesTxt[7], IntRect(0, 0, 127, 160))); originPos = Vector2f(47, 128); break;
                case 112 : listPlaceablesb.emplace_back(new Scenery_Static(*sceneriesTxt[8], IntRect(0, 0, 187, 160))); originPos = Vector2f(77, 128); break;
                case 113 : listPlaceablesb.emplace_back(new Scenery_Static(*sceneriesTxt[9], IntRect(0, 0, 315, 192))); originPos = Vector2f(141, 160); break;
                case 229 : listPlaceablesb.emplace_back(new Scenery_Waterfall(*sceneriesTxt[10])); originPos = Vector2f(31, -5); break;
                case 230 : listPlaceablesb.emplace_back(new Scenery_Scroll(*sceneriesTxt[11])); originPos = Vector2f(11, 0); break;
                case 231 : listPlaceablesb.emplace_back(new Scenery_Static(*sceneriesTxt[12], IntRect(0, 0, 187, 160))); originPos = Vector2f(77, 128); break;
                case 232 : listPlaceablesb.emplace_back(new Scenery_Static(*sceneriesTxt[13], IntRect(0, 0, 315, 192))); originPos = Vector2f(141, 160); break;
            }

            listPlaceablesb.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
        }
    }

    if (!listEntitiesb.empty())
    {
        for (list<Entity*>::iterator it = listEntitiesb.begin(); it != listEntitiesb.end(); it++)
        {
            vector<float> data;
            Vector2f originPos;

            (*it)->save(data);

            unsigned char create = 0;

            switch ((*it)->getType())
            {
                case 0 : startPos = Vector2f(data[0], data[1]); break;
                case 1 : listMiddleb.emplace_back(new Mark_CheckPoint(*marksTxt[7], false)); originPos = Vector2f(28, 79); create = 2; break;
                case 2 :
                    listPlaceablesb.emplace_back(new Mark_LevelEnd(*marksTxt[8], *marksTxt[9], *effectTxt[6], data[2]));
                    originPos = Vector2f(-2, 256);
                    create = 1;
                    break;
                case 3 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 32, data[1]), Vector2f(96, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformRedMoveH(*marksTxt[0], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(32, 0);
                    create = 3;
                    break;
                case 4 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 32, data[1]), Vector2f(96, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformRedTouchH(*marksTxt[0], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(32, 0);
                    create = 3;
                    break;
                case 5 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 32, data[1]), Vector2f(96, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformRedMoveV(*marksTxt[0], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(32, 0);
                    create = 3;
                    break;
                case 6 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 32, data[1]), Vector2f(96, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformRedTouchV(*marksTxt[0], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(32, 0);
                    create = 3;
                    break;
                case 7 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 32, data[1]), Vector2f(96, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformRedFall(*marksTxt[0], listColliderb.back()));

                    originPos = Vector2f(32, 0);
                    create = 3;
                    break;
                case 8 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformShortMoveH(*marksTxt[1], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 9 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformShortTouchH(*marksTxt[1], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 10 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformShortMoveV(*marksTxt[1], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 11 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformShortTouchV(*marksTxt[1], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 12 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformShortFall(*marksTxt[1], listColliderb.back()));

                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 13 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 45, data[1]), Vector2f(126, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformCloudMoveH(*marksTxt[2], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(45, 0);
                    create = 3;
                    break;
                case 14 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 45, data[1]), Vector2f(126, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformCloudTouchH(*marksTxt[2], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(45, 0);
                    create = 3;
                    break;
                case 15 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 45, data[1]), Vector2f(126, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformCloudMoveV(*marksTxt[2], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(45, 0);
                    create = 3;
                    break;
                case 16 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 45, data[1]), Vector2f(126, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformCloudTouchV(*marksTxt[2], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(45, 0);
                    create = 3;
                    break;
                case 17 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 45, data[1]), Vector2f(126, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformCloudFall(*marksTxt[2], listColliderb.back()));

                    originPos = Vector2f(45, 0);
                    create = 3;
                    break;
                case 18 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 43, data[1]), Vector2f(120, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformStoneMoveH(*marksTxt[3], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(43, 0);
                    create = 3;
                    break;
                case 19 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 43, data[1]), Vector2f(120, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformStoneTouchH(*marksTxt[3], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(43, 0);
                    create = 3;
                    break;
                case 20 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 43, data[1]), Vector2f(120, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformStoneMoveV(*marksTxt[3], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(43, 0);
                    create = 3;
                    break;
                case 21 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 43, data[1]), Vector2f(120, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformStoneTouchV(*marksTxt[3], data[2], data[3], listColliderb.back()));

                    originPos = Vector2f(43, 0);
                    create = 3;
                    break;
                case 22 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 43, data[1]), Vector2f(120, 32)), Vector2f(0, 0), 1, C_PLATFORM, false, NULL});
                    listAfterb.emplace_back(new Mark_PlatformStoneFall(*marksTxt[3], listColliderb.back()));

                    originPos = Vector2f(43, 0);
                    create = 3;
                    break;
                case 23 : listMiddleb.emplace_back(new Mark_Spring(*marksTxt[4], 20)); originPos = Vector2f(0, 32); create = 2; break;
                case 24 : listMiddleb.emplace_back(new Mark_Spring(*marksTxt[5], 28)); originPos = Vector2f(0, 32); create = 2; break;
                case 25 : listMiddleb.emplace_back(new Mark_Spring(*marksTxt[6], 36)); originPos = Vector2f(0, 32); create = 2; break;
                case 114 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_Goomba(*enemiesTxt[0], listColliderb.back())); originPos = Vector2f(0, 0); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 115 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_GoombaGrey(*enemiesTxt[1], listColliderb.back())); originPos = Vector2f(0, 0); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 116 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_Spiny(*enemiesTxt[2], listColliderb.back())); originPos = Vector2f(-17, 0); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 117 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_SpinyGrey(*enemiesTxt[3], listColliderb.back())); originPos = Vector2f(-17, 0); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 118 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_BuzzyBeetle(*enemiesTxt[4], enemiesTxt[13], listColliderb.back())); originPos = Vector2f(-16, 0); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 119 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_KoopaGreen(*enemiesTxt[5], enemiesTxt[14], listColliderb.back(), false)); originPos = Vector2f(-16, 15); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 120 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_KoopaRed(*enemiesTxt[6], enemiesTxt[15], listColliderb.back(), false)); originPos = Vector2f(-16, 15); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 121 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_KoopaBlue(*enemiesTxt[7], enemiesTxt[16], listColliderb.back(), false)); originPos = Vector2f(-16, 15); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 122 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_KoopaYellow(*enemiesTxt[8], enemiesTxt[17], listColliderb.back(), false)); originPos = Vector2f(-16, 15); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 123 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_KoopaGreen(*enemiesTxt[5], enemiesTxt[14], listColliderb.back(), true)); originPos = Vector2f(-16, 0); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 124 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_KoopaRed(*enemiesTxt[6], enemiesTxt[15], listColliderb.back(), true)); originPos = Vector2f(-16, 0); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 125 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_KoopaBlue(*enemiesTxt[7], enemiesTxt[16], listColliderb.back(), true)); originPos = Vector2f(-16, 0); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 126 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_KoopaYellow(*enemiesTxt[8], enemiesTxt[17], listColliderb.back(), true)); originPos = Vector2f(-16, 0); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 127 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_ParatroopaGreenH(*enemiesTxt[9], enemiesTxt[5], enemiesTxt[14], listColliderb.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 128 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_ParatroopaRedH(*enemiesTxt[10], enemiesTxt[6], enemiesTxt[15], listColliderb.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 129 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_ParatroopaBlueH(*enemiesTxt[11], enemiesTxt[7], enemiesTxt[16], listColliderb.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 130 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_ParatroopaGreenV(*enemiesTxt[9], enemiesTxt[5], enemiesTxt[14], listColliderb.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 131 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_ParatroopaRedV(*enemiesTxt[10], enemiesTxt[6], enemiesTxt[15], listColliderb.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 132 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_ParatroopaBlueV(*enemiesTxt[11], enemiesTxt[7], enemiesTxt[16], listColliderb.back(), data[2])); originPos = Vector2f(-16, 16); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 133 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_ParatroopaGreenJ(*enemiesTxt[9], enemiesTxt[5], enemiesTxt[14], listColliderb.back())); originPos = Vector2f(-16, 16); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 134 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_ParatroopaRedJ(*enemiesTxt[10], enemiesTxt[6], enemiesTxt[15], listColliderb.back())); originPos = Vector2f(-16, 16); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 135 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_ParatroopaBlueJ(*enemiesTxt[11], enemiesTxt[7], enemiesTxt[16], listColliderb.back())); originPos = Vector2f(-16, 16); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 136 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false});
                    listMiddleb.emplace_back(new Sprite_ParatroopaYellow(*enemiesTxt[12], enemiesTxt[8], enemiesTxt[17], listColliderb.back())); originPos = Vector2f(-16, 16); create = 2;
                    listColliderb.back()->object = listMiddleb.back();
                    break;
                case 137 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1] + 32), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantGreenT(enemiesTxt[18], listColliderb.back())); originPos = Vector2f(-16, 15); create = 2;
                    break;
                case 138 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 32, data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantGreenL(enemiesTxt[18], listColliderb.back())); originPos = Vector2f(16, 15); create = 2;
                    break;
                case 139 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantGreenR(enemiesTxt[18], listColliderb.back())); originPos = Vector2f(0, 15); create = 2;
                    break;
                case 140 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1]), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantGreenB(enemiesTxt[18], listColliderb.back())); originPos = Vector2f(-16, 0); create = 2;
                    break;
                case 141 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1] + 32), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantFireT(enemiesTxt[19], listColliderb.back())); originPos = Vector2f(-16, 15); create = 2;
                    break;
                case 142 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 32, data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantFireL(enemiesTxt[19], listColliderb.back())); originPos = Vector2f(16, 15); create = 2;
                    break;
                case 143 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantFireR(enemiesTxt[19], listColliderb.back())); originPos = Vector2f(0, 15); create = 2;
                    break;
                case 144 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1]), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantFireB(enemiesTxt[19], listColliderb.back())); originPos = Vector2f(-16, 0); create = 2;
                    break;
                case 145 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1] + 32), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantGreyT(enemiesTxt[20], listColliderb.back())); originPos = Vector2f(-16, 15); create = 2;
                    break;
                case 146 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 32, data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantGreyL(enemiesTxt[20], listColliderb.back())); originPos = Vector2f(16, 15); create = 2;
                    break;
                case 147 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1] - 15), Vector2f(0, 31)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantGreyR(enemiesTxt[20], listColliderb.back())); originPos = Vector2f(0, 15); create = 2;
                    break;
                case 148 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 16, data[1]), Vector2f(31, 0)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_PlantGreyB(enemiesTxt[20], listColliderb.back())); originPos = Vector2f(-16, 0); create = 2;
                    break;
                case 149 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_CheepCheepRed(*enemiesTxt[21], listColliderb.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 150 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_CheepCheepGreen(*enemiesTxt[22], listColliderb.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 151 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_CheepCheepBlue(*enemiesTxt[23], listColliderb.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 152 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(31, 32)), Vector2f(0, 0), 0, C_UNSTOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_CheepCheepYellow(*enemiesTxt[24], listColliderb.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 153 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, reinterpret_cast<Placeable*>(1)});
                    listMiddleb.emplace_back(new Sprite_HammerBro(*enemiesTxt[25], listColliderb.back())); originPos = Vector2f(-16, 16); create = 2;
                    break;
                case 154 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, reinterpret_cast<Placeable*>(1)});
                    listMiddleb.emplace_back(new Sprite_SilverBro(*enemiesTxt[26], listColliderb.back())); originPos = Vector2f(-16, 16); create = 2;
                    break;
                case 155 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, reinterpret_cast<Placeable*>(1)});
                    listMiddleb.emplace_back(new Sprite_FireBro(*enemiesTxt[27], listColliderb.back())); originPos = Vector2f(-16, 16); create = 2;
                    break;
                case 156 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, reinterpret_cast<Placeable*>(1)});
                    listMiddleb.emplace_back(new Sprite_BeetBro(*enemiesTxt[28], listColliderb.back())); originPos = Vector2f(-16, 16); create = 2;
                    break;
                case 157 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, reinterpret_cast<Placeable*>(1)});
                    listMiddleb.emplace_back(new Sprite_SpikeBro(*enemiesTxt[29], listColliderb.back())); originPos = Vector2f(-16, 16); create = 2;
                    break;
                case 158 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_LakituWhite(*enemiesTxt[32], listColliderb.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 159 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_LakituDark(*enemiesTxt[33], listColliderb.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 160 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_LakituGold(*enemiesTxt[34], listColliderb.back())); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 161 : listMiddleb.emplace_back(new Sprite_Poison(*enemiesTxt[37])); originPos = Vector2f(0, 0); create = 2; break;
                case 162 :
                    listPlaceablesb.emplace_back(new Bonus_PoisonBlock(itemsTxt[0])); originPos = Vector2f(0, 0); create = 1;
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 163 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_PoisonBlockInv(itemsTxt[0], listColliderb.back())); originPos = Vector2f(0, 0); create = 1;
                    break;
                case 164 : listMiddleb.emplace_back(new Sprite_ThwompB(*enemiesTxt[38])); originPos = Vector2f(10, 4); create = 2; break;
                case 165 : listMiddleb.emplace_back(new Sprite_ThwompT(*enemiesTxt[38])); originPos = Vector2f(10, -36); create = 2; break;
                case 166 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 42, data[1] - 23), Vector2f(52, 55)), Vector2f(0, 0), 0, C_STOMPABLE, false, NULL});
                    listMiddleb.emplace_back(new Sprite_Bowser(*enemiesTxt[39], listColliderb.back())); originPos = Vector2f(16, 40); create = 2;
                    break;
                case 167 : listPlaceablesb.emplace_back(new Hazard_LavaT(*hazardsTxt[0])); originPos = Vector2f(0, 2); create = 1; break;
                case 168 : listPlaceablesb.emplace_back(new Hazard_LavaB(*hazardsTxt[0])); originPos = Vector2f(0, -34); create = 1; break;
                case 169 : listPlaceablesb.emplace_back(new Hazard_LavaL(*hazardsTxt[0])); originPos = Vector2f(2, 0); create = 1; break;
                case 170 : listPlaceablesb.emplace_back(new Hazard_LavaR(*hazardsTxt[0])); originPos = Vector2f(-34, 0); create = 1; break;
                case 171 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(928, 96)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(960, 96)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(960, 128)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(928, 128)));
                    create = 0;
                    break;
                case 172 : listMiddleb.emplace_back(new Hazard_PodobooT(*hazardsTxt[1], data[2])); originPos = Vector2f(-2, 0); create = 2; break;
                case 173 : listMiddleb.emplace_back(new Hazard_PodobooB(*hazardsTxt[1], data[2])); originPos = Vector2f(-2, 0); create = 2; break;
                case 174 : listMiddleb.emplace_back(new Hazard_PodobooL(*hazardsTxt[1], data[2])); originPos = Vector2f(-2, 0); create = 2; break;
                case 175 : listMiddleb.emplace_back(new Hazard_PodobooR(*hazardsTxt[1], data[2])); originPos = Vector2f(-2, 0); create = 2; break;
                case 176 : listMiddleb.emplace_back(new Hazard_PodobooFountainT); originPos = Vector2f(0, 0); create = 2; break;
                case 177 : listMiddleb.emplace_back(new Hazard_PodobooFountainB); originPos = Vector2f(0, 0); create = 2; break;
                case 178 : listMiddleb.emplace_back(new Hazard_PodobooFountainL); originPos = Vector2f(0, 0); create = 2; break;
                case 179 : listMiddleb.emplace_back(new Hazard_PodobooFountainR); originPos = Vector2f(0, 0); create = 2; break;
                case 180 : listPlaceablesb.emplace_back(new Hazard_Spike(Vector2i(864, 96))); originPos = Vector2f(0, 0); create = 1; break;
                case 181 : listPlaceablesb.emplace_back(new Hazard_Spike(Vector2i(864, 192))); originPos = Vector2f(0, 0); create = 1; break;
                case 182 : listPlaceablesb.emplace_back(new Hazard_Spike(Vector2i(864, 128))); originPos = Vector2f(0, 0); create = 1; break;
                case 183 : listPlaceablesb.emplace_back(new Hazard_Spike(Vector2i(864, 160))); originPos = Vector2f(0, 0); create = 1; break;
                case 184 :
                    listMiddleb.emplace_back(new Hazard_CannonHT(*hazardsTxt[2])); originPos = Vector2f(0, -1); create = 2;
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 185 :
                    listMiddleb.emplace_back(new Hazard_CannonHB(*hazardsTxt[2])); originPos = Vector2f(0, -31); create = 2;
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 186 :
                    listMiddleb.emplace_back(new Hazard_CannonVL(*hazardsTxt[2])); originPos = Vector2f(-1, 0); create = 2;
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 187 :
                    listMiddleb.emplace_back(new Hazard_CannonVR(*hazardsTxt[2])); originPos = Vector2f(-31, 0); create = 2;
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 188 :
                    listMiddleb.emplace_back(new Hazard_CannonHomingHT(*hazardsTxt[2])); originPos = Vector2f(0, -1); create = 2;
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 189 :
                    listMiddleb.emplace_back(new Hazard_CannonHomingHB(*hazardsTxt[2])); originPos = Vector2f(0, -31); create = 2;
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 190 :
                    listMiddleb.emplace_back(new Hazard_CannonHomingVL(*hazardsTxt[2])); originPos = Vector2f(-1, 0); create = 2;
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 191 :
                    listMiddleb.emplace_back(new Hazard_CannonHomingVR(*hazardsTxt[2])); originPos = Vector2f(-31, 0); create = 2;
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 192 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(608, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(640, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(640, 256)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(608, 256)));
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 193 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(576, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(608, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(608, 256)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(576, 256)));
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 194 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(640, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(672, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(672, 256)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(640, 256)));
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 195 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(704, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(736, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(736, 256)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(704, 256)));
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 196 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(672, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(704, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(704, 256)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(672, 256)));
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 197 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(768, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(800, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(800, 256)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(768, 256)));
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 198 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(736, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(768, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(768, 256)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(736, 256)));
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 199 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(800, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(832, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(832, 256)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(800, 256)));
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 200 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(864, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(896, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(896, 256)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(864, 256)));
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 201 :
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1]), Color::White, Vector2f(832, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1]), Color::White, Vector2f(864, 224)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0] + 32, data[1] + 32), Color::White, Vector2f(864, 256)));
                    tilemapLayer2b.emplace_back(Vertex(Vector2f(data[0], data[1] + 32), Color::White, Vector2f(832, 256)));
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    create = 0;
                    break;
                case 202 : listAfterb.emplace_back(new Hazard_RotodiscCC(*hazardsTxt[4], Vector2f(data[2], data[3]), data[4])); originPos = Vector2f(0, 0); create = 3; break;
                case 203 : listAfterb.emplace_back(new Hazard_RotodiscC(*hazardsTxt[4], Vector2f(data[2], data[3]), data[4])); originPos = Vector2f(0, 0); create = 3; break;
                case 204 : listAfterb.emplace_back(new Hazard_RotodiscRCC(*hazardsTxt[4], Vector2f(data[2], data[3]), data[4])); originPos = Vector2f(0, 0); create = 3; break;
                case 205 : listAfterb.emplace_back(new Hazard_RotodiscRC(*hazardsTxt[4], Vector2f(data[2], data[3]), data[4])); originPos = Vector2f(0, 0); create = 3; break;
                case 206 :
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    collisionMatrixb->setValue((data[0]/32) + 1, data[1]/32, 1);
                    listMiddleb.emplace_back(new Hazard_LavalauncherL(*hazardsTxt[5])); originPos = Vector2f(0, 0); create = 2;
                    break;
                case 207 :
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    collisionMatrixb->setValue((data[0]/32) - 1, data[1]/32, 1);
                    listMiddleb.emplace_back(new Hazard_LavalauncherR(*hazardsTxt[5])); originPos = Vector2f(-32, 0); create = 2;
                    break;
                case 208 :
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    collisionMatrixb->setValue(data[0]/32, (data[1]/32)-1, 1);
                    listMiddleb.emplace_back(new Hazard_LavalauncherVL(*hazardsTxt[6])); originPos = Vector2f(2, 37); create = 2;
                    break;
                case 209 :
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    collisionMatrixb->setValue(data[0]/32, (data[1]/32)-1, 1);
                    listMiddleb.emplace_back(new Hazard_LavalauncherVR(*hazardsTxt[6])); originPos = Vector2f(-30, 37); create = 2;
                    break;
                case 210 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 10, data[1] - 6), Vector2f(54, 38)), Vector2f(0, 0), 0, C_IMMOBILE, false, NULL});
                    listMiddleb.emplace_back(new Hazard_SpikelauncherT(*hazardsTxt[8])); originPos = Vector2f(12, 8); create = 2;
                    break;
                case 211 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] - 10, data[1] + 2), Vector2f(54, 38)), Vector2f(0, 0), 0, C_IMMOBILE, false, NULL});
                    listMiddleb.emplace_back(new Hazard_SpikelauncherB(*hazardsTxt[8])); originPos = Vector2f(12, -40); create = 2;
                    break;
                case 212 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 32, data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 64, data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 96, data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 128, data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0] + 160, data[1]), Vector2f(32, 32)), Vector2f(0, 0), 0, C_CENTIPEDE, false, NULL});
                    {
                        vector<Vector2f> path;
                        short t = static_cast<short>(data[2]);

                        for (short i = 0; i < t*2; i+=2)
                            path.emplace_back(data[i+3], data[i+4]);

                        listAfterb.emplace_back(new Hazard_Centipede(&path.front(), t, listColliderb.end()));
                    }
                    originPos = Vector2f(0, 0);
                    create = 3;
                    break;
                case 225 : listPlaceablesb.emplace_back(new Sprite_StaticPlant(Vector2f(data[0], data[1]), 0)); originPos = Vector2f(-1, -1); create = 1; break;
                case 226 : listPlaceablesb.emplace_back(new Sprite_StaticPlant(Vector2f(data[0], data[1]), 270)); originPos = Vector2f(-1, -32); create = 1; break;
                case 227 : listPlaceablesb.emplace_back(new Sprite_StaticPlant(Vector2f(data[0], data[1]), 90)); originPos = Vector2f(-31, -1); create = 1; break;
                case 228 : listPlaceablesb.emplace_back(new Sprite_StaticPlant(Vector2f(data[0], data[1]), 180)); originPos = Vector2f(-31, -31); create = 1; break;
            }

            if (create == 1)
                listPlaceablesb.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
            else if (create == 2)
                listMiddleb.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
            else if (create == 3)
                listAfterb.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
        }
    }

    if (!listBonusb.empty())
    {
        for (list<Entity*>::iterator it = listBonusb.begin(); it != listBonusb.end(); it++)
        {
            vector<float> data;
            Vector2f originPos;

            (*it)->save(data);

            bool toMiddle = false;

            switch ((*it)->getType())
            {
                case 26 :
                    listPlaceablesb.emplace_back(new Bonus_MushroomBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 27 :
                    listPlaceablesb.emplace_back(new Bonus_FlowerBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 28 :
                    listPlaceablesb.emplace_back(new Bonus_BeetBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 29 :
                    listPlaceablesb.emplace_back(new Bonus_LuiBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 30 :
                    listPlaceablesb.emplace_back(new Bonus_StarBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 31 :
                    listPlaceablesb.emplace_back(new Bonus_LifeBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 32 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_MushroomBlockInv(itemsTxt[0], listColliderb.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 33 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_FlowerBlockInv(itemsTxt[0], listColliderb.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 34 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_BeetBlockInv(itemsTxt[0], listColliderb.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 35 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_LuiBlockInv(itemsTxt[0], listColliderb.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 36 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_StarBlockInv(itemsTxt[0], listColliderb.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 37 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_LifeBlockInv(itemsTxt[0], listColliderb.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 38 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_MushroomBlockInv(itemsTxt[0], listColliderb.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 39 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_FlowerBlockInv(itemsTxt[0], listColliderb.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 40 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_BeetBlockInv(itemsTxt[0], listColliderb.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 41 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_LuiBlockInv(itemsTxt[0], listColliderb.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 42 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_StarBlockInv(itemsTxt[0], listColliderb.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 43 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_LifeBlockInv(itemsTxt[0], listColliderb.back(), 1)); originPos = Vector2f(0, 0);
                    break;
                case 44 : listMiddleb.emplace_back(new Sprite_Mushroom(*itemsTxt[3])); originPos = Vector2f(0, 0); toMiddle = true; break;
                case 45 : listMiddleb.emplace_back(new Sprite_Flower(*itemsTxt[4])); originPos = Vector2f(0, 0); toMiddle = true; break;
                case 46 : listMiddleb.emplace_back(new Sprite_Beet(*itemsTxt[5])); originPos = Vector2f(-2, 2); toMiddle = true; break;
                case 47 : listMiddleb.emplace_back(new Sprite_Lui(*itemsTxt[6])); originPos = Vector2f(-1, 1); toMiddle = true; break;
                case 48 : listMiddleb.emplace_back(new Sprite_Star(*itemsTxt[7])); originPos = Vector2f(0, 0); toMiddle = true; break;
                case 49 : listMiddleb.emplace_back(new Sprite_Life(*itemsTxt[8])); originPos = Vector2f(0, 0); toMiddle = true; break;
                case 50 :
                    listPlaceablesb.emplace_back(new Bonus_CoinBlock(itemsTxt[0])); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 51 :
                    listColliderb.emplace_back(new Collider{FloatRect(Vector2f(data[0], data[1]), Vector2f(32, 32)), Vector2f(0, 0), 2, C_IMMOBILE, false, NULL});
                    listPlaceablesb.emplace_back(new Bonus_CoinBlockInv(itemsTxt[0], listColliderb.back(), 0)); originPos = Vector2f(0, 0);
                    break;
                case 52 : listPlaceablesb.emplace_back(new Bonus_Coin(*itemsTxt[2])); originPos = Vector2f(-6, -2); break;
                case 53 :
                    listPlaceablesb.emplace_back(new Bonus_Brick(itemsTxt[1])); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 54 :
                    listPlaceablesb.emplace_back(new Bonus_CoinBrick(itemsTxt[1], 10)); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 55 :
                    listPlaceablesb.emplace_back(new Bonus_CoinBrick(itemsTxt[1], 15)); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 213 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 0, false);
                    unsigned char* c = collisionMatrixb->getReference(data[0]/32, data[1]/32);

                    toggle->attributeSolid(c);

                    (*c) = 1;

                    listPlaceablesb.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 214 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 0, true);

                    toggle->attributeSolid(collisionMatrixb->getReference(data[0]/32, data[1]/32));

                    listPlaceablesb.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 215 :
                    listPlaceablesb.emplace_back(new Bonus_Switch(marksTxt[10], 0)); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 216 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 1, false);
                    unsigned char* c = collisionMatrixb->getReference(data[0]/32, data[1]/32);

                    toggle->attributeSolid(c);

                    (*c) = 1;

                    listPlaceablesb.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 217 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 1, true);

                    toggle->attributeSolid(collisionMatrixb->getReference(data[0]/32, data[1]/32));

                    listPlaceablesb.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 218 :
                    listPlaceablesb.emplace_back(new Bonus_Switch(marksTxt[10], 1)); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 219 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 2, false);
                    unsigned char* c = collisionMatrixb->getReference(data[0]/32, data[1]/32);

                    toggle->attributeSolid(c);

                    (*c) = 1;

                    listPlaceablesb.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 220 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 2, true);

                    toggle->attributeSolid(collisionMatrixb->getReference(data[0]/32, data[1]/32));

                    listPlaceablesb.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 221 :
                    listPlaceablesb.emplace_back(new Bonus_Switch(marksTxt[10], 2)); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
                case 222 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 3, false);
                    unsigned char* c = collisionMatrixb->getReference(data[0]/32, data[1]/32);

                    toggle->attributeSolid(c);

                    (*c) = 1;

                    listPlaceablesb.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 223 :
                {
                    Bonus_Toggle* toggle = new Bonus_Toggle(marksTxt[11], 3, true);

                    toggle->attributeSolid(collisionMatrixb->getReference(data[0]/32, data[1]/32));

                    listPlaceablesb.emplace_back(toggle);

                    originPos = Vector2f(0, 0);
                    break;
                }
                case 224 :
                    listPlaceablesb.emplace_back(new Bonus_Switch(marksTxt[10], 3)); originPos = Vector2f(0, 0);
                    collisionMatrixb->setValue(data[0]/32, data[1]/32, 1);
                    break;
            }

            if (toMiddle)
                listMiddleb.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
            else
                listPlaceablesb.back()->setPosition(Vector2f(data[0] - originPos.x, data[1] - originPos.y));
        }
    }

    if (!listWarps.empty())
    {
        for (list<EntWarps>::iterator it = listWarps.begin(); it != listWarps.end(); it++)
        {
            if (it->getEntrance())
            {
                WarpsData* currentData = new WarpsData(it->save());

                listPassages.emplace_back(currentData);
            }
        }
    }

    if (!listMiddle.empty())
    {
        for (vector<Placeable*>::iterator it = listMiddle.begin(); it != listMiddle.end(); it++)
            listPlaceables.emplace_back(*it);
    }

    spriteIterator = listPlaceables.end();

    if (!listAfter.empty())
    {
        for (vector<Placeable*>::iterator it = listAfter.begin(); it != listAfter.end(); it++)
            listPlaceables.emplace_back(*it);
    }

    if (!listMiddleb.empty())
    {
        for (vector<Placeable*>::iterator it = listMiddleb.begin(); it != listMiddleb.end(); it++)
            listPlaceablesb.emplace_back(*it);
    }

    spriteIteratorb = listPlaceablesb.end();

    if (!listAfterb.empty())
    {
        for (vector<Placeable*>::iterator it = listAfterb.begin(); it != listAfterb.end(); it++)
            listPlaceablesb.emplace_back(*it);
    }

    listMiddle.clear();
    listAfter.clear();

    listMiddleb.clear();
    listAfterb.clear();

    if (startArea == 2)
    {
        zoneb = true;
        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), *musicZoneb, 0, &musicChannel);
    }
    else
    {
        zoneb = false;
        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), *musicZonea, 0, &musicChannel);
    }

    if (startPos.x > -64)
    {
        player = new Mark_Mario(marioTxt, effectTxt[15]);
        player->setPosition(startPos + Vector2f(16, 0));
    }

    {
        Vector2f playerPos = startPos - Vector2f(5, 32);

        if (playerPos.x < 298)
            playerPos.x = 298;

        if (playerPos.y < 208)
            playerPos.y = 208;

        if (zoneb)
        {
            if (playerPos.x > (levelScaleb.x * 640) - 341)
                playerPos.x = (levelScaleb.x * 640) - 341;

            if (playerPos.y > (levelScaleb.y * 480) - 272)
                playerPos.y = (levelScaleb.y * 480) - 272;
        }
        else
        {
            if (playerPos.x > (levelScale.x * 640) - 341)
                playerPos.x = (levelScale.x * 640) - 341;

            if (playerPos.y > (levelScale.y * 480) - 272)
                playerPos.y = (levelScale.y * 480) - 272;
        }

        cameraPos = Vector2f(playerPos.x + 21, playerPos.y + 32);

        if (!autoscrollPath.empty())
        {
            Vector2f firstnode(autoscrollPath.front());

            if (firstnode.x > cameraPos.x - 300 && firstnode.x < cameraPos.x + 300 && firstnode.y > cameraPos.y - 220 && firstnode.y < cameraPos.y + 220)
            {
                cameraPos = firstnode;
                autoscroll_node = 1;
            }
        }
    }

    {
        char buffer[6]("");

        sprintf(buffer, "%d", timer/25);

        timerFont = new SpriteFont(Vector2f(577, 36), true, buffer);
    }

    if (worldNamePos.x > -1)
        worldNamePos = Vector2f(roundf(worldFont->getHorizontalSize() / 2), -204);

    // In-game :
    Event eventSystem;
    while (!exitToTitle)
    {
        while (mainWindow->pollEvent(eventSystem))
        {
            switch (eventSystem.type)
            {
                case Event::Closed      :
                    exitToTitle = true;

                    mainWindow->close();

                    break;

                case Event::KeyPressed :

                    if (exitToTitle)
                        break;

                    switch (eventSystem.key.code)
                    {
                        case Keyboard::Escape :

                            if (MessageBox(NULL, "Do you want to back to the Editor ?", "Back to the Editor ?", MB_YESNO | MB_ICONQUESTION | MB_TASKMODAL) == IDYES)
                                exitToTitle = true;

                            break;
                        default :

                            if (player != NULL)
                                player->fire(eventSystem.key.code);
                    }

                    break;

                case Event::Resized :
                    windowScale = min(eventSystem.size.width / 640.0, eventSystem.size.height / 480.0);
                    wpos = Vector2f((eventSystem.size.width - (windowScale * 640)) / 2, (eventSystem.size.height - (windowScale * 480)) / 2);

                    mainWindow->setView(View(FloatRect(0, 0, eventSystem.size.width, eventSystem.size.height)));

                    textureRender.setPosition(wpos);
                    textureRender.setScale(windowScale, windowScale);

                    break;

                default             : break;
            }
        }

        // Camera and timer :
        if (player != NULL)
        {
            Vector2f playerPos;

            if (autoscroll != zoneb + 1)
            {
                if (koopaEngaged > 0)
                {
                    playerPos = cameraPos;

                    if (koopaEngaged == 1)
                        playerPos.x += 0.85;
                    else
                        playerPos.x -= 0.85;

                    if (playerPos.x < 320)
                        playerPos.x = 320;

                    if (zoneb)
                    {
                        if (playerPos.x > (levelScaleb.x * 640) - 320)
                            playerPos.x = (levelScaleb.x * 640) - 320;
                    }
                    else
                    {
                        if (playerPos.x > (levelScale.x * 640) - 320)
                            playerPos.x = (levelScale.x * 640) - 320;
                    }

                    if (player->m_active)
                        cameraPos = playerPos;
                }
                else
                {
                    playerPos = player->getPosition();

                    if (levelCamera_shake > 0)
                    {
                        playerPos.x += (rand() / (RAND_MAX / levelCamera_shake)) - levelCamera_shake / 2.0f;
                        playerPos.y += (rand() / (RAND_MAX / levelCamera_shake)) - levelCamera_shake / 2.0f;

                        levelCamera_shake -= 0.8;
                    }

                    if (playerPos.x < 299)
                        playerPos.x = 299;

                    if (playerPos.y < 208)
                        playerPos.y = 208;

                    if (zoneb)
                    {
                        if (playerPos.x > (levelScaleb.x * 640) - 341)
                            playerPos.x = (levelScaleb.x * 640) - 341;

                        if (playerPos.y > (levelScaleb.y * 480) - 272)
                            playerPos.y = (levelScaleb.y * 480) - 272;
                    }
                    else
                    {
                        if (playerPos.x > (levelScale.x * 640) - 341)
                            playerPos.x = (levelScale.x * 640) - 341;

                        if (playerPos.y > (levelScale.y * 480) - 272)
                            playerPos.y = (levelScale.y * 480) - 272;
                    }

                    if (player->m_active)
                        cameraPos = Vector2f(lerp(cameraPos.x, playerPos.x + 21, 0.5), lerp(cameraPos.y, playerPos.y + 32, 0.5));
                    else if (player->m_warp != NULL)
                        cameraPos = Vector2f(playerPos.x + 21, playerPos.y + 32);
                }
            }
            else if (autoscrollSpeed > 0)
            {
                Vector2f scrolltarget(autoscrollPath[autoscroll_node]);

                playerPos = cameraPos;

                float angle = atan2(scrolltarget.y - playerPos.y, scrolltarget.x - playerPos.x);

                playerPos.x += cos(angle) * autoscrollSpeed;
                playerPos.y += sin(angle) * autoscrollSpeed;

                float delta = angle - atan2(scrolltarget.y - playerPos.y, scrolltarget.x - playerPos.x);

                if (delta > 1.570796 || delta < -1.570796)
                {
                    playerPos = autoscrollPath[autoscroll_node];

                    if (autoscroll_node < autoscrollPath.size()-1)
                        autoscroll_node++;
                    else
                        autoscrollSpeed = 0;
                }

                if (player->m_active)
                    cameraPos = playerPos;
            }

            if (timer < 2500 && timer > 2410)
            {
                if (timerAlertPhase)
                {
                    timerAlert -= 0.08;

                    if (timerAlert < 0.6)
                        timerAlertPhase = false;
                }
                else
                {
                    timerAlert += 0.08;

                    if (timerAlert > 1)
                        timerAlertPhase = true;
                }

                hudSpr[3]->setScale(1, timerAlert);
            }
            else if (timerAlert < 0.92)
            {
                timerAlert += 0.08;
                hudSpr[3]->setScale(1, timerAlert);
            }

            if (timer == 2400)
                hudSpr[3]->setScale(1, 1);

            if (player->m_active && koopaHealth > 0)
            {
                if (timer > 0)
                {
                    timer--;

                    if (timer == 2499)
                        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(19), sfxSamples[29], 0, NULL);
                }
                else
                    player->death();
            }
        }

        {
            Vector2f roundedCameraPos(roundf(cameraPos.x), roundf(cameraPos.y));

            scoreFont->setPosition(Vector2f(roundedCameraPos.x - 167, roundedCameraPos.y - 204));
            coinsFont->setPosition(Vector2f(roundedCameraPos.x - 35, roundedCameraPos.y - 204));
            livesFont->setPosition(Vector2f(roundedCameraPos.x - 182, roundedCameraPos.y - 224));

            if (koopaEngaged > 0)
            {
                if (hudBowser_descend < -160)
                    hudBowser_descend += 1;
                else
                    hudBowser_descend = -160;

                (*hudBowser)[0].position = Vector2f(roundedCameraPos.x + 200, roundedCameraPos.y + hudBowser_descend);
                (*hudBowser)[1].position = Vector2f(roundedCameraPos.x + 264, roundedCameraPos.y + hudBowser_descend);
                (*hudBowser)[2].position = Vector2f(roundedCameraPos.x + 264, roundedCameraPos.y + hudBowser_descend + 42);
                (*hudBowser)[3].position = Vector2f(roundedCameraPos.x + 200, roundedCameraPos.y + hudBowser_descend + 42);

                for (register unsigned char i = 0; i < koopaHealth; i++)
                {
                    (*hudBowser)[(i*4)+4].position = Vector2f(roundedCameraPos.x - (9 * i) + 191, roundedCameraPos.y + hudBowser_descend + 7);
                    (*hudBowser)[(i*4)+5].position = Vector2f(roundedCameraPos.x - (9 * i) + 200, roundedCameraPos.y + hudBowser_descend + 7);
                    (*hudBowser)[(i*4)+6].position = Vector2f(roundedCameraPos.x - (9 * i) + 200, roundedCameraPos.y + hudBowser_descend + 39);
                    (*hudBowser)[(i*4)+7].position = Vector2f(roundedCameraPos.x - (9 * i) + 191, roundedCameraPos.y + hudBowser_descend + 39);
                }
            }

            if (timer % 25 == 0 && player != NULL)
            {
                if (player->m_active)
                {
                    char timebuf[6]("");
                    sprintf(timebuf, "%d", timer / 25);

                    timerFont->setText(timebuf, 6, Vector2f(roundedCameraPos.x + 257, roundedCameraPos.y - 204), true);
                }
                else
                    timerFont->setPosition(Vector2f(roundedCameraPos.x + 257, roundedCameraPos.y - 204));
            }
            else
                timerFont->setPosition(Vector2f(roundedCameraPos.x + 257, roundedCameraPos.y - 204));

            if (worldNamePos.x > -1)
                worldFont->setPosition(Vector2f(roundedCameraPos.x - worldNamePos.x + 77, roundedCameraPos.y + worldNamePos.y));

            hudSpr[0]->setPosition(roundedCameraPos.x - 284, roundedCameraPos.y - 224);
            hudSpr[1]->setPosition(roundedCameraPos.x - 82, roundedCameraPos.y - 204);
            hudSpr[2]->setPosition(roundedCameraPos.x + 38, roundedCameraPos.y - 224);
            hudSpr[3]->setPosition(roundedCameraPos.x + 194, roundedCameraPos.y - 216);

            levelCamera->setCenter(roundedCameraPos);
            mainTexture.setView(*levelCamera);
        }

        if (zoneb)
        {
            if (clearColorb)
                mainTexture.clear(levelBackColorb);

            mainTexture.draw(gradientRectangleb, 4, Quads);

            if (backgroundSprb != NULL)
                mainTexture.draw(*backgroundSprb);

            if (effectCloudsSprb[1] != NULL)
            {
                effectCloudsSprb[1]->setTextureRect(IntRect(effectCloudPos[0], 0, levelScaleb.x * 640, 63));
                mainTexture.draw(*effectCloudsSprb[1]);
            }

            if (!tilemapLayer1b.empty())
                mainTexture.draw(&tilemapLayer1b.front(), tilemapLayer1b.size(), Quads, mainTileset);

            if (!tilemapLayer2b.empty())
                mainTexture.draw(&tilemapLayer2b.front(), tilemapLayer2b.size(), Quads, mainTileset);

            if (!listPlaceablesb.empty())
            {
                vector<list<Placeable*>::iterator> toDelete;

                for (list<Placeable*>::iterator it = listPlaceablesb.begin(); it != listPlaceablesb.end(); it++)
                {
                    Vector2f entPos((*it)->getPosition());
                    Vector2f entSize((*it)->getSize());

                    (*it)->secureUpdate();

                    if (entPos.x + entSize.x > cameraPos.x - 352 && entPos.y + entSize.y > cameraPos.y - 272 && entPos.x < cameraPos.x + 352 && entPos.y < cameraPos.y + 272)
                        (*it)->update();

                    if ((*it)->m_destroyed)
                    {
                        toDelete.emplace_back(it);
                        continue;
                    }

                    if ((entPos.x + entSize.x > cameraPos.x - 320 && entPos.y + entSize.y > cameraPos.y - 240 && entPos.x < cameraPos.x + 320 && entPos.y < cameraPos.y + 240) || (*it)->getID() == ID_PLAYER)
                        mainTexture.draw(**it);
                }

                for (list<Placeable*>::iterator it = listPlaceablesb.begin(); it != listPlaceablesb.end(); it++)
                    (*it)->afterUpdate();

                // Deletion loop :
                for (vector<list<Placeable*>::iterator>::iterator it = toDelete.begin(); it != toDelete.end(); it++)
                {
                    delete **it;
                    listPlaceablesb.erase(*it);
                }
            }

            if (player != NULL)
            {
                player->secureUpdate();

                mainTexture.draw(*player);
            }

            if (!listEffect.empty())
            {
                vector<list<Effect*>::iterator> toDelete;

                for (list<Effect*>::iterator it = listEffect.begin(); it != listEffect.end(); it++)
                {
                    (*it)->update();

                    if ((*it)->m_destroyed)
                    {
                        toDelete.emplace_back(it);
                        continue;
                    }

                    mainTexture.draw(**it);
                }

                // Deletion loop :
                for (vector<list<Effect*>::iterator>::iterator it = toDelete.begin(); it != toDelete.end(); it++)
                {
                    delete **it;
                    listEffect.erase(*it);
                }
            }

            if (!tilemapLayer3b.empty())
                mainTexture.draw(&tilemapLayer3b.front(), tilemapLayer3b.size(), Quads, mainTileset);

            if (!listColliderb.empty())
            {
                vector<list<Collider*>::iterator> toDelete;

                for (list<Collider*>::iterator it = listColliderb.begin(); it != listColliderb.end(); it++)
                {
                    if ((*it)->destroyed)
                        toDelete.emplace_back(it);
                }

                // Deletion loop :
                for (vector<list<Collider*>::iterator>::iterator it = toDelete.begin(); it != toDelete.end(); it++)
                {
                    delete **it;
                    listColliderb.erase(*it);
                }
            }

            if (waterb != NULL)
            {
                if (!liquidSpotsb.empty() && player != NULL)
                {
                    for (vector<TriggerData*>::iterator it = liquidSpotsb.begin(); it != liquidSpotsb.end(); it++)
                    {
                        if ((liquidTargetHeightb > (*it)->targetHeight - __FLT_EPSILON__ && liquidTargetHeightb < (*it)->targetHeight + __FLT_EPSILON__) || !player->m_active)
                            continue;

                        if (player->m_aabb.intersects(FloatRect((*it)->x, (*it)->y, (*it)->width, (*it)->height)))
                        {
                            liquidTargetHeightb = (*it)->targetHeight;

                            if (waterb->getType())
                                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(15), sfxSamples[24], 0, NULL);
                            else
                                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(17), sfxSamples[18], 0, NULL);
                        }
                    }
                }

                float liquidHeight = waterb->getHeight();

                if (liquidTargetHeightb < liquidHeight - liquidSpeed)
                    waterb->setHeight(liquidHeight - liquidSpeed, levelScaleb);
                else if (liquidTargetHeightb > liquidHeight + liquidSpeed)
                    waterb->setHeight(liquidHeight + liquidSpeed, levelScaleb);
                else
                    waterb->setHeight(liquidTargetHeightb, levelScaleb);

                waterb->update();
                mainTexture.draw(*waterb);
            }

            if (effectWeatherSprb != NULL)
            {
                effectWeatherSprb->setTextureRect(IntRect(effectWeatherPos, -effectWeatherPos, levelScaleb.x * 640, levelScaleb.y * 480));

                if (levelbEffect == 2)
                {
                    if (effectLightning > 0)
                        effectLightning--;
                    else
                    {
                        effectLightningSpr->setPosition(cameraPos.x + (rand() % 320) - 300, cameraPos.y - 240);
                        effectLightningSpr->setColor(Color::White);

                        effectLightning = (rand() % 350) + 100;
                        levelCamera_shake = (rand() % 4) + 10;

                        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(17), sfxSamples[33], 0, NULL);
                    }

                    float lightning(effectLightningSpr->getColor().a);

                    if (lightning > 38)
                    {
                        mainTexture.draw(*effectLightningSpr, BlendAdd);

                        lightning -= 38;
                        effectLightningSpr->setColor(Color(255, 255, 255, lightning));
                    }
                }

                mainTexture.draw(*effectWeatherSprb);
            }

            if (effectCloudsSprb[0] != NULL)
            {
                effectCloudsSprb[0]->setTextureRect(IntRect(effectCloudPos[1], 0, levelScaleb.x * 640, 63));
                mainTexture.draw(*effectCloudsSprb[0]);
            }
        }
        else
        {
            if (clearColora)
                mainTexture.clear(levelBackColor);

            mainTexture.draw(gradientRectangle, 4, Quads);

            if (backgroundSpr != NULL)
                mainTexture.draw(*backgroundSpr);

            if (effectCloudsSpr[1] != NULL)
            {
                effectCloudsSpr[1]->setTextureRect(IntRect(effectCloudPos[0], 0, levelScale.x * 640, 63));
                mainTexture.draw(*effectCloudsSpr[1]);
            }

            if (!tilemapLayer1.empty())
                mainTexture.draw(&tilemapLayer1.front(), tilemapLayer1.size(), Quads, mainTileset);

            if (!tilemapLayer2.empty())
                mainTexture.draw(&tilemapLayer2.front(), tilemapLayer2.size(), Quads, mainTileset);

            if (!listPlaceables.empty())
            {
                vector<list<Placeable*>::iterator> toDelete;

                for (list<Placeable*>::iterator it = listPlaceables.begin(); it != listPlaceables.end(); it++)
                {
                    Vector2f entPos((*it)->getPosition());
                    Vector2f entSize((*it)->getSize());

                    (*it)->secureUpdate();

                    if (entPos.x + entSize.x > cameraPos.x - 352 && entPos.y + entSize.y > cameraPos.y - 272 && entPos.x < cameraPos.x + 352 && entPos.y < cameraPos.y + 272)
                        (*it)->update();

                    if ((*it)->m_destroyed)
                    {
                        toDelete.emplace_back(it);
                        continue;
                    }

                    if ((entPos.x + entSize.x > cameraPos.x - 320 && entPos.y + entSize.y > cameraPos.y - 240 && entPos.x < cameraPos.x + 320 && entPos.y < cameraPos.y + 240) || (*it)->getID() == ID_PLAYER)
                        mainTexture.draw(**it);
                }

                for (list<Placeable*>::iterator it = listPlaceables.begin(); it != listPlaceables.end(); it++)
                    (*it)->afterUpdate();

                // Deletion loop :
                for (vector<list<Placeable*>::iterator>::iterator it = toDelete.begin(); it != toDelete.end(); it++)
                {
                    delete **it;
                    listPlaceables.erase(*it);
                }
            }

            if (player != NULL)
            {
                player->secureUpdate();

                mainTexture.draw(*player);
            }

            if (!listEffect.empty())
            {
                vector<list<Effect*>::iterator> toDelete;

                for (list<Effect*>::iterator it = listEffect.begin(); it != listEffect.end(); it++)
                {
                    (*it)->update();

                    if ((*it)->m_destroyed)
                    {
                        toDelete.emplace_back(it);
                        continue;
                    }

                    mainTexture.draw(**it);
                }

                // Deletion loop :
                for (vector<list<Effect*>::iterator>::iterator it = toDelete.begin(); it != toDelete.end(); it++)
                {
                    delete **it;
                    listEffect.erase(*it);
                }
            }

            if (!tilemapLayer3.empty())
                mainTexture.draw(&tilemapLayer3.front(), tilemapLayer3.size(), Quads, mainTileset);

            if (!listCollider.empty())
            {
                vector<list<Collider*>::iterator> toDelete;

                for (list<Collider*>::iterator it = listCollider.begin(); it != listCollider.end(); it++)
                {
                    if ((*it)->destroyed)
                        toDelete.emplace_back(it);
                }

                // Deletion loop :
                for (vector<list<Collider*>::iterator>::iterator it = toDelete.begin(); it != toDelete.end(); it++)
                {
                    delete **it;
                    listCollider.erase(*it);
                }
            }

            if (watera != NULL)
            {
                if (!liquidSpots.empty() && player != NULL)
                {
                    for (vector<TriggerData*>::iterator it = liquidSpots.begin(); it != liquidSpots.end(); it++)
                    {
                        if ((liquidTargetHeight > (*it)->targetHeight - __FLT_EPSILON__ && liquidTargetHeight < (*it)->targetHeight + __FLT_EPSILON__) || !player->m_active)
                            continue;

                        if (player->m_aabb.intersects(FloatRect((*it)->x, (*it)->y, (*it)->width, (*it)->height)))
                        {
                            liquidTargetHeight = (*it)->targetHeight;

                            if (watera->getType())
                                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(15), sfxSamples[24], 0, NULL);
                            else
                                FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(17), sfxSamples[18], 0, NULL);
                        }
                    }
                }

                float liquidHeight = watera->getHeight();

                if (liquidTargetHeight < liquidHeight - liquidSpeed)
                    watera->setHeight(liquidHeight - liquidSpeed, levelScale);
                else if (liquidTargetHeight > liquidHeight + liquidSpeed)
                    watera->setHeight(liquidHeight + liquidSpeed, levelScale);
                else
                    watera->setHeight(liquidTargetHeight, levelScale);

                watera->update();
                mainTexture.draw(*watera);
            }

            if (effectWeatherSpr != NULL)
            {
                effectWeatherSpr->setTextureRect(IntRect(effectWeatherPos, -effectWeatherPos, levelScale.x * 640, levelScale.y * 480));

                if (levelEffect == 2)
                {
                    if (effectLightning > 0)
                        effectLightning--;
                    else
                    {
                        effectLightningSpr->setPosition(cameraPos.x + (rand() % 320) - 300, cameraPos.y - 240);
                        effectLightningSpr->setColor(Color::White);

                        effectLightning = (rand() % 350) + 100;
                        levelCamera_shake = (rand() % 4) + 10;

                        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(17), sfxSamples[33], 0, NULL);
                    }

                    float lightning(effectLightningSpr->getColor().a);

                    if (lightning > 38)
                    {
                        mainTexture.draw(*effectLightningSpr, BlendAdd);

                        lightning -= 38;
                        effectLightningSpr->setColor(Color(255, 255, 255, lightning));
                    }
                }

                mainTexture.draw(*effectWeatherSpr);
            }

            if (effectCloudsSpr[0] != NULL)
            {
                effectCloudsSpr[0]->setTextureRect(IntRect(effectCloudPos[1], 0, levelScale.x * 640, 63));
                mainTexture.draw(*effectCloudsSpr[0]);
            }
        }

        // Toggling the switch blocks :
        for (register unsigned int i = 0; i < 4; i++)
        {
            if (game_toggleSolidity[i] == 1)
                game_toggleSolidity[i] = 0;
            else if (game_toggleSolidity[i] == 3)
                game_toggleSolidity[i] = 2;
        }

        if (spritehitter.left > -64)
        {
            if (spritehitter_create)
                spritehitter.left = -64;
            else
                spritehitter_create = true;
        }

        if (enemykiller.left > -64)
        {
            if (enemykiller_create)
                enemykiller.left = -64;
            else
                enemykiller_create = true;
        }

        if (frame_Hud % 6 == 0)
            hudSpr[1]->setTextureRect(IntRect(0, (frame_Hud/6) * 16, 28, 16));

        if (effectCloudPos[0] < 63)
            effectCloudPos[0]++;
        else
            effectCloudPos[0] = 0;

        if (effectCloudPos[1] < 62)
            effectCloudPos[1] += 2;
        else
            effectCloudPos[1] = 0;

        if (effectLavafallPos < 28)
            effectLavafallPos += 4;
        else
            effectLavafallPos = 0;

        if (zoneb)
        {
            if (levelbEffect == 3)
            {
                if (effectWeatherPos < 127)
                    effectWeatherPos += 4;
                else
                    effectWeatherPos = 0;
            }
            else
            {
                if (effectWeatherPos < 127)
                    effectWeatherPos += 6;
                else
                    effectWeatherPos = 0;
            }
        }
        else
        {
            if (levelEffect == 3)
            {
                if (effectWeatherPos < 127)
                    effectWeatherPos += 4;
                else
                    effectWeatherPos = 0;
            }
            else
            {
                if (effectWeatherPos < 127)
                    effectWeatherPos += 6;
                else
                    effectWeatherPos = 0;
            }
        }

        if (frame_Podoboo < 5)
            frame_Podoboo++;
        else
            frame_Podoboo = 0;

        if (frame_Flame < 11)
            frame_Flame++;
        else
            frame_Flame = 0;

        if (frame_Hud < 17)
            frame_Hud++;
        else
            frame_Hud = 0;

        if (frame_Water < 23)
            frame_Water++;
        else
            frame_Water = 0;

        if (frame_Lava < 55)
            frame_Lava++;
        else
            frame_Lava = 0;

        if (frame_Clouds < 29)
            frame_Clouds++;
        else
            frame_Clouds = 0;

        if (frame_Flower < 15)
            frame_Flower++;
        else
            frame_Flower = 0;

        if (frame_Rotodisc < 24)
            frame_Rotodisc++;
        else
            frame_Rotodisc = 0;

        if (koopaEngaged)
            mainTexture.draw(*hudBowser, hudTxt[5]);

        mainTexture.draw(*hudSpr[0]);
        mainTexture.draw(*hudSpr[1]);
        mainTexture.draw(*hudSpr[2]);
        mainTexture.draw(*hudSpr[3]);

        mainTexture.draw(*scoreFont);
        mainTexture.draw(*livesFont);
        mainTexture.draw(*coinsFont);
        mainTexture.draw(*timerFont);

        if (worldNamePos.x > -1)
            mainTexture.draw(*worldFont);

        if (exitToTitle || restartLevel)
        {
            fadeRect->setPosition(cameraPos - Vector2f(320, 240));
            fadeRect->setFillColor(Color(0, 0, 0, 255));

            currentMenu = EDITION;

            if (sectionb != zoneb)
                Prefs_Section();

            camPos = static_cast<Vector2i>(cameraPos);

            fadeAlpha = 255;

            mainTexture.clear(Color::Black);
            mainTexture.draw(*loading);

            exitToTitle = true;
        }

        mainTexture.display();

        mainWindow->clear(Color::Black);
        mainWindow->draw(textureRender);
        mainWindow->display();
    }

    // Deletion :
    for (list<Placeable*>::iterator it = listPlaceables.begin(); it != listPlaceables.end(); it++)
        delete *it;

    for (list<Collider*>::iterator it = listCollider.begin(); it != listCollider.end(); it++)
        delete *it;

    for (list<Placeable*>::iterator it = listPlaceablesb.begin(); it != listPlaceablesb.end(); it++)
        delete *it;

    for (list<Collider*>::iterator it = listColliderb.begin(); it != listColliderb.end(); it++)
        delete *it;

    for (list<WarpsData*>::iterator it = listPassages.begin(); it != listPassages.end(); it++)
        delete *it;

    for (vector<TriggerData*>::iterator it = liquidSpots.begin(); it != liquidSpots.end(); it++)
        delete *it;

    for (vector<TriggerData*>::iterator it = liquidSpotsb.begin(); it != liquidSpotsb.end(); it++)
        delete *it;

    for (list<Effect*>::iterator it = listEffect.begin(); it != listEffect.end(); it++)
        delete *it;

    tilemapLayer1.clear();
    tilemapLayer2.clear();
    tilemapLayer3.clear();

    listPlaceables.clear();
    listCollider.clear();

    tilemapLayer1b.clear();
    tilemapLayer2b.clear();
    tilemapLayer3b.clear();

    listPlaceablesb.clear();
    listColliderb.clear();

    listPassages.clear();

    listEffect.clear();

    liquidSpots.clear();
    liquidSpotsb.clear();

    autoscrollPath.clear();

    delete levelCamera;

    delete scoreFont;
    delete coinsFont;
    delete livesFont;
    delete worldFont;
    delete timerFont;

    delete hudSpr[0];
    delete hudSpr[1];
    delete hudSpr[2];
    delete hudSpr[3];

    delete hudBowser;

    if (backgroundSpr != NULL)
        delete backgroundSpr;

    if (effectCloudsSpr[0] != NULL)
        delete effectCloudsSpr[0];

    if (effectCloudsSpr[1] != NULL)
        delete effectCloudsSpr[1];

    if (effectWeatherSpr != NULL)
        delete effectWeatherSpr;

    if (backgroundSprb != NULL)
        delete backgroundSprb;

    if (effectCloudsSprb[0] != NULL)
        delete effectCloudsSprb[0];

    if (effectCloudsSprb[1] != NULL)
        delete effectCloudsSprb[1];

    if (effectWeatherSprb != NULL)
        delete effectWeatherSprb;

    if (watera != NULL)
        delete watera;

    if (waterb != NULL)
        delete waterb;

    delete collisionMatrix;
    delete collisionMatrixb;

    if (editorMusic)
        FMOD_System_PlaySound(soundSystem, static_cast<FMOD_CHANNELINDEX>(20), edMusic, 0, &musicChannel);
    else
        FMOD_Channel_Stop(musicChannel);

    if (musicSamples[22] != NULL)
        FMOD_Sound_Release(musicSamples[22]);

    if (musicSamples[23] != NULL)
        FMOD_Sound_Release(musicSamples[23]);

    if (musicSamples[24] != NULL)
        FMOD_Sound_Release(musicSamples[24]);
}

static void Elements_Essential(unsigned int elementNumb)
{
    if (elementNumb == 255)
    {
        layerButton[0]->setTextureRect(IntRect(0, 0, 26, 26));
        layerButton[1]->setTextureRect(IntRect(26, 0, 26, 26));
        layerButton[2]->setTextureRect(IntRect(52, 0, 26, 26));

        currentSelection = NONE;
    }
    else
    {
        for (register unsigned int i = 0; i < 3; i++)
        {
            if (elementsEsssential[i]->m_elementnumb != elementNumb)
                elementsEsssential[i]->Unselected();
        }

        for (register unsigned int i = 0; i < 35; i++)
            elementsPlatforms[i]->Unselected();

        for (register unsigned int i = 0; i < 30; i++)
            elementsBonus[i]->Unselected();

        for (register unsigned int i = 0; i < 36; i++)
            elementsPipes[i]->Unselected();

        for (register unsigned int i = 0; i < 26; i++)
            elementsSceneries[i]->Unselected();

        for (register unsigned int i = 0; i < 57; i++)
            elementsEnemies[i]->Unselected();

        for (register unsigned int i = 0; i < 46; i++)
            elementsHazards[i]->Unselected();

        itemHandled->setRotation(0);
        itemHandled->setColor(Color(255, 255, 255, 128));

        switch (elementNumb)
        {
            case 0 : itemHandled->setTexture(*marioTxt[1]);         itemHandled->setTextureRect(IntRect(48, 8, 31, 56));    itemHandled->setOrigin(0, 24); break;
            case 1 : itemHandled->setTexture(*marksTxt[7]);         itemHandled->setTextureRect(IntRect(107, 0, 107, 111)); itemHandled->setOrigin(28, 79); break;
            case 2 : itemHandled->setTexture(*marksTxt[8], true);   itemHandled->setOrigin(-2, 256); break;
        }

        layerButton[0]->setTextureRect(IntRect(0, 26, 26, 26));
        layerButton[1]->setTextureRect(IntRect(26, 26, 26, 26));
        layerButton[2]->setTextureRect(IntRect(52, 26, 26, 26));

        currentSelection = ESSENTIAL;

        ChangeLayerTo_Middle();

        elementSelected = elementNumb;
    }
}

static void Elements_Platforms(unsigned int elementNumb)
{
    if (elementNumb == 255)
    {
        layerButton[0]->setTextureRect(IntRect(0, 0, 26, 26));
        layerButton[1]->setTextureRect(IntRect(26, 0, 26, 26));
        layerButton[2]->setTextureRect(IntRect(52, 0, 26, 26));

        currentSelection = NONE;
    }
    else
    {
        for (register unsigned int i = 0; i < 35; i++)
        {
            if (elementsPlatforms[i]->m_elementnumb != elementNumb)
                elementsPlatforms[i]->Unselected();
        }

        for (register unsigned int i = 0; i < 3; i++)
            elementsEsssential[i]->Unselected();

        for (register unsigned int i = 0; i < 30; i++)
            elementsBonus[i]->Unselected();

        for (register unsigned int i = 0; i < 36; i++)
            elementsPipes[i]->Unselected();

        for (register unsigned int i = 0; i < 26; i++)
            elementsSceneries[i]->Unselected();

        for (register unsigned int i = 0; i < 57; i++)
            elementsEnemies[i]->Unselected();

        for (register unsigned int i = 0; i < 46; i++)
            elementsHazards[i]->Unselected();

        itemHandled->setOrigin(0, 0);
        itemHandled->setRotation(0);
        itemHandled->setColor(Color(255, 255, 255, 128));

        if (elementNumb >= 213 && elementNumb <= 224)
            currentSelection = BONUS;
        else
            currentSelection = PLATFORMS;

        if (elementNumb >= 3 and elementNumb <= 7)
        {
            itemHandled->setTexture(*marksTxt[0], true);
            itemHandled->setOrigin(32, 0);
        }
        else if (elementNumb >= 8 and elementNumb <= 12)
            itemHandled->setTexture(*marksTxt[1], true);
        else if (elementNumb >= 13 and elementNumb <= 17)
        {
            itemHandled->setTexture(*marksTxt[2]);
            itemHandled->setTextureRect(IntRect(0, 0, 126, 32));
            itemHandled->setOrigin(45, 0);
        }
        else if (elementNumb >= 18 and elementNumb <= 22)
        {
            itemHandled->setTexture(*marksTxt[3], true);
            itemHandled->setOrigin(43, 0);
        }
        else if (elementNumb == 23)
        {
            itemHandled->setTexture(*marksTxt[4]);
            itemHandled->setTextureRect(IntRect(0, 0, 32, 64));
            itemHandled->setOrigin(0, 32);
        }
        else if (elementNumb == 24)
        {
            itemHandled->setTexture(*marksTxt[5]);
            itemHandled->setTextureRect(IntRect(0, 0, 32, 64));
            itemHandled->setOrigin(0, 32);
        }
        else if (elementNumb == 25)
        {
            itemHandled->setTexture(*marksTxt[6]);
            itemHandled->setTextureRect(IntRect(0, 0, 32, 64));
            itemHandled->setOrigin(0, 32);
        }
        else if (elementNumb == 213)
        {
            itemHandled->setTexture(*marksTxt[11]);
            itemHandled->setTextureRect(IntRect(0, 0, 32, 32));
        }
        else if (elementNumb == 214)
        {
            itemHandled->setTexture(*marksTxt[11]);
            itemHandled->setTextureRect(IntRect(0, 0, 32, 32));
            itemHandled->setColor(Color(160, 160, 160, 128));
        }
        else if (elementNumb == 215)
        {
            itemHandled->setTexture(*marksTxt[10]);
            itemHandled->setTextureRect(IntRect(0, 0, 32, 32));
        }
        else if (elementNumb == 216)
        {
            itemHandled->setTexture(*marksTxt[11]);
            itemHandled->setTextureRect(IntRect(32, 0, 32, 32));
        }
        else if (elementNumb == 217)
        {
            itemHandled->setTexture(*marksTxt[11]);
            itemHandled->setTextureRect(IntRect(32, 0, 32, 32));
            itemHandled->setColor(Color(160, 160, 160, 128));
        }
        else if (elementNumb == 218)
        {
            itemHandled->setTexture(*marksTxt[10]);
            itemHandled->setTextureRect(IntRect(32, 0, 32, 32));
        }
        else if (elementNumb == 219)
        {
            itemHandled->setTexture(*marksTxt[11]);
            itemHandled->setTextureRect(IntRect(64, 0, 32, 32));
        }
        else if (elementNumb == 220)
        {
            itemHandled->setTexture(*marksTxt[11]);
            itemHandled->setTextureRect(IntRect(64, 0, 32, 32));
            itemHandled->setColor(Color(160, 160, 160, 128));
        }
        else if (elementNumb == 221)
        {
            itemHandled->setTexture(*marksTxt[10]);
            itemHandled->setTextureRect(IntRect(64, 0, 32, 32));
        }
        else if (elementNumb == 222)
        {
            itemHandled->setTexture(*marksTxt[11]);
            itemHandled->setTextureRect(IntRect(96, 0, 32, 32));
        }
        else if (elementNumb == 223)
        {
            itemHandled->setTexture(*marksTxt[11]);
            itemHandled->setTextureRect(IntRect(96, 0, 32, 32));
            itemHandled->setColor(Color(160, 160, 160, 128));
        }
        else if (elementNumb == 224)
        {
            itemHandled->setTexture(*marksTxt[10]);
            itemHandled->setTextureRect(IntRect(96, 0, 32, 32));
        }

        layerButton[0]->setTextureRect(IntRect(0, 26, 26, 26));
        layerButton[1]->setTextureRect(IntRect(26, 26, 26, 26));
        layerButton[2]->setTextureRect(IntRect(52, 26, 26, 26));

        ChangeLayerTo_Middle();

        elementSelected = elementNumb;
    }
}

static void Elements_Bonus(unsigned int elementNumb)
{
    if (elementNumb == 255)
    {
        layerButton[0]->setTextureRect(IntRect(0, 0, 26, 26));
        layerButton[1]->setTextureRect(IntRect(26, 0, 26, 26));
        layerButton[2]->setTextureRect(IntRect(52, 0, 26, 26));

        currentSelection = NONE;
    }
    else
    {
        for (register unsigned int i = 0; i < 30; i++)
        {
            if (elementsBonus[i]->m_elementnumb != elementNumb)
                elementsBonus[i]->Unselected();
        }

        for (register unsigned int i = 0; i < 3; i++)
            elementsEsssential[i]->Unselected();

        for (register unsigned int i = 0; i < 35; i++)
            elementsPlatforms[i]->Unselected();

        for (register unsigned int i = 0; i < 36; i++)
            elementsPipes[i]->Unselected();

        for (register unsigned int i = 0; i < 26; i++)
            elementsSceneries[i]->Unselected();

        for (register unsigned int i = 0; i < 57; i++)
            elementsEnemies[i]->Unselected();

        for (register unsigned int i = 0; i < 46; i++)
            elementsHazards[i]->Unselected();

        itemHandled->setOrigin(0, 0);
        itemHandled->setRotation(0);
        itemHandled->setColor(Color(255, 255, 255, 128));

        if ((elementNumb >= 26 && elementNumb <= 43) || (elementNumb >= 50 && elementNumb <= 55))
        {
            switch (elementNumb)
            {
                case 26 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(32, 0, 32, 32)); break;
                case 27 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(64, 0, 32, 32)); break;
                case 28 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(96, 0, 32, 32)); break;
                case 29 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(128, 0, 32, 32)); break;
                case 30 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(160, 0, 32, 32)); break;
                case 31 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(192, 0, 32, 32)); break;
                case 32 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(32, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 33 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(64, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 34 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(96, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 35 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(128, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 36 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(160, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 37 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(192, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 38 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(224, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 39 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(256, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 40 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(288, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 41 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(320, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 42 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(352, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 43 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(384, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 50 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(0, 0, 32, 32)); break;
                case 51 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(0, 0, 32, 32)); itemHandled->setColor(Color(160, 160, 160, 128)); break;
                case 52 : itemHandled->setTexture(*itemsTxt[2]);    itemHandled->setTextureRect(IntRect(0, 0, 19, 28)); itemHandled->setOrigin(-7, -2); break;
                case 53 : itemHandled->setTexture(*itemsTxt[1]);    itemHandled->setTextureRect(IntRect(0, 0, 32, 32)); break;
                case 54 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(416, 0, 32, 32)); break;
                case 55 : itemHandled->setTexture(*editorTxt[2]);   itemHandled->setTextureRect(IntRect(448, 0, 32, 32)); break;
            }
        }
        else if (elementNumb == 44)
            itemHandled->setTexture(*itemsTxt[3], true);
        else if (elementNumb == 45)
        {
            itemHandled->setTexture(*itemsTxt[4]);
            itemHandled->setTextureRect(IntRect(0, 0, 32, 32));
        }
        else if (elementNumb == 46)
        {
            itemHandled->setTexture(*itemsTxt[5]);
            itemHandled->setTextureRect(IntRect(0, 0, 27, 34));
            itemHandled->setOrigin(-3, 2);
        }
        else if (elementNumb == 47)
        {
            itemHandled->setTexture(*itemsTxt[6]);
            itemHandled->setTextureRect(IntRect(0, 0, 30, 31));
            itemHandled->setOrigin(-1, -1);
        }
        else if (elementNumb == 48)
        {
            itemHandled->setTexture(*itemsTxt[7]);
            itemHandled->setTextureRect(IntRect(0, 0, 32, 32));
        }
        else if (elementNumb == 49)
            itemHandled->setTexture(*itemsTxt[8], true);

        layerButton[0]->setTextureRect(IntRect(0, 26, 26, 26));
        layerButton[1]->setTextureRect(IntRect(26, 26, 26, 26));
        layerButton[2]->setTextureRect(IntRect(52, 26, 26, 26));

        currentSelection = BONUS;

        ChangeLayerTo_Middle();

        elementSelected = elementNumb;
    }
}

static void Elements_Pipes(unsigned int elementNumb)
{
    layerButton[0]->setTextureRect(IntRect(0, 0, 26, 26));
    layerButton[1]->setTextureRect(IntRect(26, 0, 26, 26));
    layerButton[2]->setTextureRect(IntRect(52, 0, 26, 26));

    if (elementNumb == 255)
        currentSelection = NONE;
    else
    {
        for (register unsigned int i = 0; i < 36; i++)
        {
            if (elementsPipes[i]->m_elementnumb != elementNumb)
                elementsPipes[i]->Unselected();
        }

        for (register unsigned int i = 0; i < 3; i++)
            elementsEsssential[i]->Unselected();

        for (register unsigned int i = 0; i < 35; i++)
            elementsPlatforms[i]->Unselected();

        for (register unsigned int i = 0; i < 30; i++)
            elementsBonus[i]->Unselected();

        for (register unsigned int i = 0; i < 26; i++)
            elementsSceneries[i]->Unselected();

        for (register unsigned int i = 0; i < 57; i++)
            elementsEnemies[i]->Unselected();

        for (register unsigned int i = 0; i < 46; i++)
            elementsHazards[i]->Unselected();

        itemHandled->setTexture(*mainTileset, true);
        itemHandled->setColor(Color(255, 255, 255, 128));
        itemHandled->setRotation(0);
        itemHandled->setOrigin(0, 0);

        switch (elementNumb)
        {
            case 56 : itemHandled->setTextureRect(TILE_PIPE_GREEN_VTOP); break;
            case 57 : itemHandled->setTextureRect(TILE_PIPE_GREEN_VMID); break;
            case 58 : itemHandled->setTextureRect(TILE_PIPE_GREEN_VBOT); break;
            case 59 : itemHandled->setTextureRect(TILE_PIPE_GREEN_HLEF); break;
            case 60 : itemHandled->setTextureRect(TILE_PIPE_GREEN_HMID); break;
            case 61 : itemHandled->setTextureRect(TILE_PIPE_GREEN_HRIG); break;
            case 62 : itemHandled->setTextureRect(TILE_PIPE_BLUE_VTOP); break;
            case 63 : itemHandled->setTextureRect(TILE_PIPE_BLUE_VMID); break;
            case 64 : itemHandled->setTextureRect(TILE_PIPE_BLUE_VBOT); break;
            case 65 : itemHandled->setTextureRect(TILE_PIPE_BLUE_HLEF); break;
            case 66 : itemHandled->setTextureRect(TILE_PIPE_BLUE_HMID); break;
            case 67 : itemHandled->setTextureRect(TILE_PIPE_BLUE_HRIG); break;
            case 68 : itemHandled->setTextureRect(TILE_PIPE_RED_VTOP); break;
            case 69 : itemHandled->setTextureRect(TILE_PIPE_RED_VMID); break;
            case 70 : itemHandled->setTextureRect(TILE_PIPE_RED_VBOT); break;
            case 71 : itemHandled->setTextureRect(TILE_PIPE_RED_HLEF); break;
            case 72 : itemHandled->setTextureRect(TILE_PIPE_RED_HMID); break;
            case 73 : itemHandled->setTextureRect(TILE_PIPE_RED_HRIG); break;
            case 74 : itemHandled->setTextureRect(TILE_PIPE_YELLOW_VTOP); break;
            case 75 : itemHandled->setTextureRect(TILE_PIPE_YELLOW_VMID); break;
            case 76 : itemHandled->setTextureRect(TILE_PIPE_YELLOW_VBOT); break;
            case 77 : itemHandled->setTextureRect(TILE_PIPE_YELLOW_HLEF); break;
            case 78 : itemHandled->setTextureRect(TILE_PIPE_YELLOW_HMID); break;
            case 79 : itemHandled->setTextureRect(TILE_PIPE_YELLOW_HRIG); break;
            case 80 : itemHandled->setTextureRect(TILE_PIPE_GRAY_VTOP); break;
            case 81 : itemHandled->setTextureRect(TILE_PIPE_GRAY_VMID); break;
            case 82 : itemHandled->setTextureRect(TILE_PIPE_GRAY_VBOT); break;
            case 83 : itemHandled->setTextureRect(TILE_PIPE_GRAY_HLEF); break;
            case 84 : itemHandled->setTextureRect(TILE_PIPE_GRAY_HMID); break;
            case 85 : itemHandled->setTextureRect(TILE_PIPE_GRAY_HRIG); break;
            case 86 : itemHandled->setTextureRect(TILE_PIPE_DARK_VTOP); break;
            case 87 : itemHandled->setTextureRect(TILE_PIPE_DARK_VMID); break;
            case 88 : itemHandled->setTextureRect(TILE_PIPE_DARK_VBOT); break;
            case 89 : itemHandled->setTextureRect(TILE_PIPE_DARK_HLEF); break;
            case 90 : itemHandled->setTextureRect(TILE_PIPE_DARK_HMID); break;
            case 91 : itemHandled->setTextureRect(TILE_PIPE_DARK_HRIG); break;
        }

        currentSelection = PIPES;

        elementSelected = elementNumb;
    }
}

static void Elements_Sceneries(unsigned int elementNumb)
{
    if (elementNumb == 255)
    {
        layerButton[0]->setTextureRect(IntRect(0, 0, 26, 26));
        layerButton[1]->setTextureRect(IntRect(26, 0, 26, 26));
        layerButton[2]->setTextureRect(IntRect(52, 0, 26, 26));

        currentSelection = NONE;
    }
    else
    {
        for (register unsigned int i = 0; i < 26; i++)
        {
            if (elementsSceneries[i]->m_elementnumb != elementNumb)
                elementsSceneries[i]->Unselected();
        }

        for (register unsigned int i = 0; i < 3; i++)
            elementsEsssential[i]->Unselected();

        for (register unsigned int i = 0; i < 35; i++)
            elementsPlatforms[i]->Unselected();

        for (register unsigned int i = 0; i < 30; i++)
            elementsBonus[i]->Unselected();

        for (register unsigned int i = 0; i < 36; i++)
            elementsPipes[i]->Unselected();

        for (register unsigned int i = 0; i < 57; i++)
            elementsEnemies[i]->Unselected();

        for (register unsigned int i = 0; i < 46; i++)
            elementsHazards[i]->Unselected();

        itemHandled->setRotation(0);
        itemHandled->setColor(Color(255, 255, 255, 128));

        switch (elementNumb)
        {
            case 92 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_GREEN_TREE);
                itemHandled->setOrigin(-1, 32);
                break;
            case 93 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_GREEN_BIGTREE);
                itemHandled->setOrigin(0, 64);
                break;
            case 94 :
                itemHandled->setTexture(*sceneriesTxt[0]);
                itemHandled->setTextureRect(IntRect(0, 0, 65, 30));
                itemHandled->setOrigin(16, -2);
                break;
            case 95 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_GRAY_TREE);
                itemHandled->setOrigin(-1, 32);
                break;
            case 96 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_GRAY_BIGTREE);
                itemHandled->setOrigin(0, 64);
                break;
            case 97 :
                itemHandled->setTexture(*sceneriesTxt[1]);
                itemHandled->setTextureRect(IntRect(0, 0, 65, 30));
                itemHandled->setOrigin(16, -2);
                break;
            case 98 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_YELLOW_TREE);
                itemHandled->setOrigin(-1, 32);
                break;
            case 99 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_YELLOW_BIGTREE);
                itemHandled->setOrigin(0, 64);
                break;
            case 100 :
                itemHandled->setTexture(*sceneriesTxt[2]);
                itemHandled->setTextureRect(IntRect(0, 0, 65, 30));
                itemHandled->setOrigin(16, -2);
                break;
            case 101 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_RED_TREE);
                itemHandled->setOrigin(-1, 32);
                break;
            case 102 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_RED_BIGTREE);
                itemHandled->setOrigin(0, 64);
                break;
            case 103 :
                itemHandled->setTexture(*sceneriesTxt[3]);
                itemHandled->setTextureRect(IntRect(0, 0, 65, 30));
                itemHandled->setOrigin(16, -2);
                break;
            case 104 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_BLUE_TREE);
                itemHandled->setOrigin(-1, 32);
                break;
            case 105 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_BLUE_BIGTREE);
                itemHandled->setOrigin(0, 64);
                break;
            case 106 :
                itemHandled->setTexture(*sceneriesTxt[4]);
                itemHandled->setTextureRect(IntRect(0, 0, 65, 30));
                itemHandled->setOrigin(16, -2);
                break;
            case 107 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_FENCE);
                itemHandled->setOrigin(64, 0);
                break;
            case 108 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_SCENERY_SNOWFENCE);
                itemHandled->setOrigin(64, 0);
                break;
            case 109 :
                itemHandled->setTexture(*sceneriesTxt[5]);
                itemHandled->setTextureRect(IntRect(0, 0, 63, 48));
                itemHandled->setOrigin(15, 8);
                break;
            case 110 :
                itemHandled->setTexture(*sceneriesTxt[6]);
                itemHandled->setTextureRect(IntRect(0, 0, 63, 48));
                itemHandled->setOrigin(15, 8);
                break;
            case 111 :
                itemHandled->setTexture(*sceneriesTxt[7], true);
                itemHandled->setOrigin(47, 128);
                break;
            case 112 :
                itemHandled->setTexture(*sceneriesTxt[8], true);
                itemHandled->setOrigin(77, 128);
                break;
            case 113 :
                itemHandled->setTexture(*sceneriesTxt[9], true);
                itemHandled->setOrigin(141, 160);
                break;
            case 229 :
                itemHandled->setTexture(*sceneriesTxt[10]);
                itemHandled->setTextureRect(IntRect(0, 0, 95, 91));
                itemHandled->setOrigin(31, -5);
                break;
            case 230 :
                itemHandled->setTexture(*sceneriesTxt[11]);
                itemHandled->setTextureRect(IntRect(0, 0, 54, 64));
                itemHandled->setOrigin(11, 0);
                break;
            case 231 :
                itemHandled->setTexture(*sceneriesTxt[12], true);
                itemHandled->setOrigin(77, 128);
                break;
            case 232 :
                itemHandled->setTexture(*sceneriesTxt[13], true);
                itemHandled->setOrigin(141, 160);
                break;
        }

		layerButton[0]->setTextureRect(IntRect(0, 26, 26, 26));
		layerButton[1]->setTextureRect(IntRect(26, 26, 26, 26));
		layerButton[2]->setTextureRect(IntRect(52, 26, 26, 26));

        currentSelection = SCENERIES;

        ChangeLayerTo_Middle();

        elementSelected = elementNumb;
    }
}

static void Elements_Enemies(unsigned int elementNumb)
{
    if (elementNumb == 255)
    {
        layerButton[0]->setTextureRect(IntRect(0, 0, 26, 26));
        layerButton[1]->setTextureRect(IntRect(26, 0, 26, 26));
        layerButton[2]->setTextureRect(IntRect(52, 0, 26, 26));

        currentSelection = NONE;
    }
    else
    {
        for (register unsigned int i = 0; i < 57; i++)
        {
            if (elementsEnemies[i]->m_elementnumb != elementNumb)
                elementsEnemies[i]->Unselected();
        }

        for (register unsigned int i = 0; i < 3; i++)
            elementsEsssential[i]->Unselected();

        for (register unsigned int i = 0; i < 35; i++)
            elementsPlatforms[i]->Unselected();

        for (register unsigned int i = 0; i < 30; i++)
            elementsBonus[i]->Unselected();

        for (register unsigned int i = 0; i < 36; i++)
            elementsPipes[i]->Unselected();

        for (register unsigned int i = 0; i < 26; i++)
            elementsSceneries[i]->Unselected();

        for (register unsigned int i = 0; i < 46; i++)
            elementsHazards[i]->Unselected();

        itemHandled->setRotation(0);
        itemHandled->setColor(Color(255, 255, 255, 128));

        switch (elementNumb)
        {
            case 114 :
                itemHandled->setTexture(*enemiesTxt[0]);
                itemHandled->setTextureRect(IntRect(0, 0, 31, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 115 :
                itemHandled->setTexture(*enemiesTxt[1]);
                itemHandled->setTextureRect(IntRect(0, 0, 31, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 116 :
                itemHandled->setTexture(*enemiesTxt[2]);
                itemHandled->setTextureRect(IntRect(0, 0, 33, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 117 :
                itemHandled->setTexture(*enemiesTxt[3]);
                itemHandled->setTextureRect(IntRect(0, 0, 33, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 118 :
                itemHandled->setTexture(*enemiesTxt[4]);
                itemHandled->setTextureRect(IntRect(0, 0, 31, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 119 :
                itemHandled->setTexture(*enemiesTxt[5]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 15);
                break;
            case 120 :
                itemHandled->setTexture(*enemiesTxt[6]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 15);
                break;
            case 121 :
                itemHandled->setTexture(*enemiesTxt[7]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 15);
                break;
            case 122 :
                itemHandled->setTexture(*enemiesTxt[8]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 15);
                break;
            case 123 :
                itemHandled->setTexture(*enemiesTxt[14]);
                itemHandled->setTextureRect(IntRect(0, 0, 33, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 124 :
                itemHandled->setTexture(*enemiesTxt[15]);
                itemHandled->setTextureRect(IntRect(0, 0, 33, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 125 :
                itemHandled->setTexture(*enemiesTxt[16]);
                itemHandled->setTextureRect(IntRect(0, 0, 33, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 126 :
                itemHandled->setTexture(*enemiesTxt[17]);
                itemHandled->setTextureRect(IntRect(0, 0, 33, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 127 :
                itemHandled->setTexture(*enemiesTxt[9]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 14);
                break;
            case 128 :
                itemHandled->setTexture(*enemiesTxt[10]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 14);
                break;
            case 129 :
                itemHandled->setTexture(*enemiesTxt[11]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 14);
                break;
            case 130 :
                itemHandled->setTexture(*enemiesTxt[9]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 14);
                break;
            case 131 :
                itemHandled->setTexture(*enemiesTxt[10]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 14);
                break;
            case 132 :
                itemHandled->setTexture(*enemiesTxt[11]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 14);
                break;
            case 133 :
                itemHandled->setTexture(*enemiesTxt[9]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 14);
                break;
            case 134 :
                itemHandled->setTexture(*enemiesTxt[10]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 14);
                break;
            case 135 :
                itemHandled->setTexture(*enemiesTxt[11]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 14);
                break;
            case 136 :
                itemHandled->setTexture(*enemiesTxt[12]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 47));
                itemHandled->setOrigin(0, 14);
                break;
            case 137 :
                itemHandled->setTexture(*enemiesTxt[18]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setOrigin(-17, 15);
                break;
            case 138 :
                itemHandled->setTexture(*enemiesTxt[18]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setRotation(270);
                itemHandled->setOrigin(16, 15);
                break;
            case 139 :
                itemHandled->setTexture(*enemiesTxt[18]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setRotation(90);
                itemHandled->setOrigin(15, 47);
                break;
            case 140 :
                itemHandled->setTexture(*enemiesTxt[18]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setRotation(180);
                itemHandled->setOrigin(48, 47);
                break;
            case 141 :
                itemHandled->setTexture(*enemiesTxt[19]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setOrigin(-17, 15);
                break;
            case 142 :
                itemHandled->setTexture(*enemiesTxt[19]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setRotation(270);
                itemHandled->setOrigin(16, 15);
                break;
            case 143 :
                itemHandled->setTexture(*enemiesTxt[19]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setRotation(90);
                itemHandled->setOrigin(15, 47);
                break;
            case 144 :
                itemHandled->setTexture(*enemiesTxt[19]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setRotation(180);
                itemHandled->setOrigin(48, 47);
                break;
            case 145 :
                itemHandled->setTexture(*enemiesTxt[20]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setOrigin(-17, 15);
                break;
            case 146 :
                itemHandled->setTexture(*enemiesTxt[20]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setRotation(270);
                itemHandled->setOrigin(16, 15);
                break;
            case 147 :
                itemHandled->setTexture(*enemiesTxt[20]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setRotation(90);
                itemHandled->setOrigin(15, 47);
                break;
            case 148 :
                itemHandled->setTexture(*enemiesTxt[20]);
                itemHandled->setTextureRect(IntRect(31, 0, 31, 47));
                itemHandled->setRotation(180);
                itemHandled->setOrigin(48, 47);
                break;
            case 149 :
                itemHandled->setTexture(*enemiesTxt[21]);
                itemHandled->setTextureRect(IntRect(0, 0, 31, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 150:
                itemHandled->setTexture(*enemiesTxt[22]);
                itemHandled->setTextureRect(IntRect(0, 0, 31, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 151 :
                itemHandled->setTexture(*enemiesTxt[23]);
                itemHandled->setTextureRect(IntRect(0, 0, 31, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 152 :
                itemHandled->setTexture(*enemiesTxt[24]);
                itemHandled->setTextureRect(IntRect(0, 0, 31, 37));
                itemHandled->setOrigin(0, 5);
                break;
            case 153 :
                itemHandled->setTexture(*enemiesTxt[25]);
                itemHandled->setTextureRect(IntRect(76, 0, 38, 48));
                itemHandled->setOrigin(5, 16);
                break;
            case 154 :
                itemHandled->setTexture(*enemiesTxt[26]);
                itemHandled->setTextureRect(IntRect(76, 0, 38, 48));
                itemHandled->setOrigin(5, 16);
                break;
            case 155 :
                itemHandled->setTexture(*enemiesTxt[27]);
                itemHandled->setTextureRect(IntRect(66, 0, 33, 48));
                itemHandled->setOrigin(0, 16);
                break;
            case 156 :
                itemHandled->setTexture(*enemiesTxt[28]);
                itemHandled->setTextureRect(IntRect(76, 0, 38, 48));
                itemHandled->setOrigin(5, 16);
                break;
            case 157 :
                itemHandled->setTexture(*enemiesTxt[29]);
                itemHandled->setTextureRect(IntRect(76, 0, 38, 48));
                itemHandled->setOrigin(5, 16);
                break;
            case 158 :
                itemHandled->setTexture(*editorTxt[4]);
                itemHandled->setTextureRect(IntRect(32, 0, 31, 48));
                itemHandled->setOrigin(0, 16);
                break;
            case 159 :
                itemHandled->setTexture(*editorTxt[4]);
                itemHandled->setTextureRect(IntRect(63, 0, 31, 48));
                itemHandled->setOrigin(0, 16);
                break;
            case 160 :
                itemHandled->setTexture(*editorTxt[4]);
                itemHandled->setTextureRect(IntRect(94, 0, 31, 48));
                itemHandled->setOrigin(0, 16);
                break;
            case 161 :
                itemHandled->setTexture(*enemiesTxt[37]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 162 :
                itemHandled->setTexture(*editorTxt[4]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 32));
                itemHandled->setOrigin(0, 0);
                break;
            case 163 :
                itemHandled->setTexture(*editorTxt[4]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 32));
                itemHandled->setColor(Color(160, 160, 160, 128));
                itemHandled->setOrigin(0, 0);
                break;
            case 164 :
                itemHandled->setTexture(*enemiesTxt[38]);
                itemHandled->setTextureRect(IntRect(0, 0, 54, 68));
                itemHandled->setOrigin(10, 4);
                break;
            case 165 :
                itemHandled->setTexture(*enemiesTxt[38]);
                itemHandled->setTextureRect(IntRect(0, 0, 54, 68));
                itemHandled->setRotation(180);
                itemHandled->setOrigin(44, 36);
                break;
            case 166 :
                itemHandled->setTexture(*enemiesTxt[39]);
                itemHandled->setTextureRect(IntRect(0, 0, 64, 72));
                itemHandled->setOrigin(16, 40);
                break;
            case 225 :
                itemHandled->setTexture(*enemiesTxt[41]);
                itemHandled->setTextureRect(IntRect(62, 0, 31, 31));
                itemHandled->setOrigin(-1, -1);
                break;
            case 226 :
                itemHandled->setTexture(*enemiesTxt[41]);
                itemHandled->setTextureRect(IntRect(62, 0, 31, 31));
                itemHandled->setRotation(270);
                itemHandled->setOrigin(32, -1);
                break;
            case 227 :
                itemHandled->setTexture(*enemiesTxt[41]);
                itemHandled->setTextureRect(IntRect(62, 0, 31, 31));
                itemHandled->setRotation(90);
                itemHandled->setOrigin(-1, 31);
                break;
            case 228 :
                itemHandled->setTexture(*enemiesTxt[41]);
                itemHandled->setTextureRect(IntRect(62, 0, 31, 31));
                itemHandled->setRotation(180);
                itemHandled->setOrigin(32, 32);
                break;
        }

		layerButton[0]->setTextureRect(IntRect(0, 26, 26, 26));
		layerButton[1]->setTextureRect(IntRect(26, 26, 26, 26));
		layerButton[2]->setTextureRect(IntRect(52, 26, 26, 26));

        currentSelection = ENEMIES;

        ChangeLayerTo_Middle();

        elementSelected = elementNumb;
    }
}

static void Elements_Hazards(unsigned int elementNumb)
{
    if (elementNumb == 255)
    {
        layerButton[0]->setTextureRect(IntRect(0, 0, 26, 26));
        layerButton[1]->setTextureRect(IntRect(26, 0, 26, 26));
        layerButton[2]->setTextureRect(IntRect(52, 0, 26, 26));

        currentSelection = NONE;
    }
    else
    {
        for (register unsigned int i = 0; i < 46; i++)
        {
            if (elementsHazards[i]->m_elementnumb != elementNumb)
                elementsHazards[i]->Unselected();
        }

        for (register unsigned int i = 0; i < 3; i++)
            elementsEsssential[i]->Unselected();

        for (register unsigned int i = 0; i < 35; i++)
            elementsPlatforms[i]->Unselected();

        for (register unsigned int i = 0; i < 30; i++)
            elementsBonus[i]->Unselected();

        for (register unsigned int i = 0; i < 36; i++)
            elementsPipes[i]->Unselected();

        for (register unsigned int i = 0; i < 26; i++)
            elementsSceneries[i]->Unselected();

        for (register unsigned int i = 0; i < 57; i++)
            elementsEnemies[i]->Unselected();

        itemHandled->setColor(Color(255, 255, 255, 128));

        switch (elementNumb)
        {
            case 167 :
                itemHandled->setTexture(*hazardsTxt[0]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 34));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 2);
                break;
            case 168 :
                itemHandled->setTexture(*hazardsTxt[0]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 34));
                itemHandled->setRotation(180);
                itemHandled->setOrigin(32, 34);
                break;
            case 169 :
                itemHandled->setTexture(*hazardsTxt[0]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 34));
                itemHandled->setRotation(270);
                itemHandled->setOrigin(32, 2);
                break;
            case 170 :
                itemHandled->setTexture(*hazardsTxt[0]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 34));
                itemHandled->setRotation(90);
                itemHandled->setOrigin(0, 34);
                break;
            case 171 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_LAVABOTTOM);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 172 :
                itemHandled->setTexture(*hazardsTxt[1]);
                itemHandled->setTextureRect(IntRect(0, 0, 27, 32));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(-3, 0);
                break;
            case 173 :
                itemHandled->setTexture(*hazardsTxt[1]);
                itemHandled->setTextureRect(IntRect(0, 0, 27, 32));
                itemHandled->setRotation(180);
                itemHandled->setOrigin(30, 32);
                break;
            case 174 :
                itemHandled->setTexture(*hazardsTxt[1]);
                itemHandled->setTextureRect(IntRect(0, 0, 27, 32));
                itemHandled->setRotation(270);
                itemHandled->setOrigin(30, 0);
                break;
            case 175 :
                itemHandled->setTexture(*hazardsTxt[1]);
                itemHandled->setTextureRect(IntRect(0, 0, 27, 32));
                itemHandled->setRotation(90);
                itemHandled->setOrigin(-3, 32);
                break;
            case 176 :
                itemHandled->setTexture(*hazardsTxt[1]);
                itemHandled->setTextureRect(IntRect(0, 0, 27, 32));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(-3, 0);
                break;
            case 177 :
                itemHandled->setTexture(*hazardsTxt[1]);
                itemHandled->setTextureRect(IntRect(0, 0, 27, 32));
                itemHandled->setRotation(180);
                itemHandled->setOrigin(30, 32);
                break;
            case 178 :
                itemHandled->setTexture(*hazardsTxt[1]);
                itemHandled->setTextureRect(IntRect(0, 0, 27, 32));
                itemHandled->setRotation(270);
                itemHandled->setOrigin(30, 0);
                break;
            case 179 :
                itemHandled->setTexture(*hazardsTxt[1]);
                itemHandled->setTextureRect(IntRect(0, 0, 27, 32));
                itemHandled->setRotation(90);
                itemHandled->setOrigin(-3, 32);
                break;
            case 180 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_SPIKETOP);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 181 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_SPIKEBOTTOM);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 182 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_SPIKELEFT);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 183 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_SPIKERIGHT);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 184 :
                itemHandled->setTexture(*hazardsTxt[2], true);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, -1);
                break;
            case 185 :
                itemHandled->setTexture(*hazardsTxt[2], true);
                itemHandled->setRotation(180);
                itemHandled->setOrigin(32, 31);
                break;
            case 186 :
                itemHandled->setTexture(*hazardsTxt[2], true);
                itemHandled->setRotation(270);
                itemHandled->setOrigin(32, -1);
                break;
            case 187 :
                itemHandled->setTexture(*hazardsTxt[2], true);
                itemHandled->setRotation(90);
                itemHandled->setOrigin(0, 31);
                break;
            case 188 :
                itemHandled->setTexture(*editorTxt[3]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 31));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, -1);
                break;
            case 189 :
                itemHandled->setTexture(*editorTxt[3]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 31));
                itemHandled->setRotation(180);
                itemHandled->setOrigin(32, 31);
                break;
            case 190 :
                itemHandled->setTexture(*editorTxt[3]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 31));
                itemHandled->setRotation(270);
                itemHandled->setOrigin(32, -1);
                break;
            case 191 :
                itemHandled->setTexture(*editorTxt[3]);
                itemHandled->setTextureRect(IntRect(0, 0, 32, 31));
                itemHandled->setRotation(90);
                itemHandled->setOrigin(0, 31);
                break;
            case 192 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_BBILLTOP);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 193 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_BBILLTOPB);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 194 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_BBILLMIDV);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 195 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_BBILLBOT);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 196 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_BBILLBOTB);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 197 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_BBILLLEF);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 198 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_BBILLLEFB);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 199 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_BBILLMIDH);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 200 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_BBILLRIG);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 201 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(TILE_HAZARD_BBILLRIGB);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 202 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(IntRect(896, 96, 32, 32));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(-1, -1);
                break;
            case 203 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(IntRect(896, 96, 32, 32));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(-1, -1);
                break;
            case 204 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(IntRect(896, 96, 32, 32));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(-1, -1);
                break;
            case 205 :
                itemHandled->setTexture(*mainTileset);
                itemHandled->setTextureRect(IntRect(896, 96, 32, 32));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(-1, -1);
                break;
            case 206 :
                itemHandled->setTexture(*hazardsTxt[5], true);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
            case 207 :
                itemHandled->setTexture(*editorTxt[3]);
                itemHandled->setTextureRect(IntRect(32, 0, 64, 32));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(32, 0);
                break;
            case 208 :
                itemHandled->setTexture(*hazardsTxt[6], true);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(2, 37);
                break;
            case 209 :
                itemHandled->setTexture(*editorTxt[3]);
                itemHandled->setTextureRect(IntRect(96, 0, 56, 69));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(23, 37);
                break;
            case 210 :
                itemHandled->setTexture(*hazardsTxt[8], true);
                itemHandled->setRotation(0);
                itemHandled->setOrigin(12, 8);
                break;
            case 211 :
                itemHandled->setTexture(*hazardsTxt[8], true);
                itemHandled->setRotation(180);
                itemHandled->setOrigin(45, 40);
                break;
            case 212 :
                itemHandled->setTexture(*editorTxt[3]);
                itemHandled->setTextureRect(IntRect(152, 0, 192, 44));
                itemHandled->setRotation(0);
                itemHandled->setOrigin(0, 0);
                break;
        }

		layerButton[0]->setTextureRect(IntRect(0, 26, 26, 26));
		layerButton[1]->setTextureRect(IntRect(26, 26, 26, 26));
		layerButton[2]->setTextureRect(IntRect(52, 26, 26, 26));

        currentSelection = HAZARDS;

        ChangeLayerTo_Middle();

        elementSelected = elementNumb;
    }
}

static void checkResources(LPCSTR levelURL, bool saveAs)
{
    TCHAR resourcePath[MAX_PATH];
    TCHAR resourceName[MAX_PATH];

    TCHAR levelPath[MAX_PATH];
    TCHAR levelName[MAX_PATH];

    TCHAR destName[MAX_PATH];

    for (register unsigned int i = 0; i < 5; i++)
    {
        if (resourcesArray[i] != NULL)
        {
            TCHAR messageText[256];

            strcpy(resourcePath, resourcesArray[i]->c_str());
            strcpy(resourceName, resourcesArray[i]->c_str());

            strcpy(levelPath, levelURL);
            strcpy(levelName, levelURL);

            PathRemoveFileSpec(resourcePath);
            PathRemoveFileSpec(levelPath);

            strcpy(destName, levelPath);

            PathStripPath(resourceName);
            PathStripPath(levelName);

            if (PathIsRelative(resourcesArray[i]->c_str()))
            {
                if (saveAs)
                {
                    sprintf(messageText, "The resource :\n%s\nis referred by a Relative Path from the previous level's location.\nDo you want update the Relative Path ?", resourceName);

                    if (MessageBox(NULL, messageText, "Update the Path ?", MB_TASKMODAL | MB_ICONQUESTION | MB_YESNO) == IDYES)
                    {
                        if (PathRelativePathTo(resourcePath, levelPath, FILE_ATTRIBUTE_DIRECTORY, resourcesArray[i]->c_str(), FILE_ATTRIBUTE_NORMAL))
                        {
                            delete resourcesArray[i];

                            resourcesArray[i] = new string(resourcePath);
                        }
                        else
                            MessageBox(NULL, "Error ! Failed to recreate Relative Path !", "Can't create Relative Path !", MB_OK | MB_ICONERROR | MB_TASKMODAL);
                    }
                }
            }
            else
            {
                if (strcmp(levelPath, resourcePath) != 0)
                {
                    sprintf(messageText, "The resource :\n%s\nis in another directory from the level.\nDo you want copy the resource into the level directory ?", resourceName);

                    if (MessageBox(NULL, messageText, "Copy the resource file ?", MB_TASKMODAL | MB_ICONQUESTION | MB_YESNO) == IDYES)
                    {
                        ifstream src;
                        ofstream dest;

                        src.open(*resourcesArray[i], ios::binary);

                        if (!src.good())
                        {
                            MessageBox(NULL, "Error ! Failed to open the original resource file !", "Error !", MB_TASKMODAL | MB_ICONERROR | MB_OK);
                            goto LBL_CHKRESLVL;
                        }

                        PathAppend(destName, resourceName);

                        dest.open(destName, ios::binary);

                        if (!dest.good())
                        {
                            MessageBox(NULL, "Error ! Failed to copy the resource !", "Error !", MB_TASKMODAL | MB_ICONERROR | MB_OK);
                            src.close();
                            goto LBL_CHKRESLVL;
                        }

                        dest << src.rdbuf();

                        src.close();
                        dest.close();
                    }
                    else
                        PathAppend(destName, resourcesArray[i]->c_str());

                    LBL_CHKRESLVL :

                    if (PathRelativePathTo(resourcePath, levelPath, FILE_ATTRIBUTE_DIRECTORY, destName, FILE_ATTRIBUTE_NORMAL))
                    {
                        delete resourcesArray[i];

                        resourcesArray[i] = new string(resourcePath);
                    }
                    else
                    {
                        MessageBox(NULL, "Error ! Failed to create Relative Path !\nYou must copy the file manually then re-import it !", "Can't create Relative Path !", MB_OK | MB_ICONERROR | MB_TASKMODAL);

                        delete resourcesArray[i];

                        resourcesArray[i] = new string(destName);
                    }
                }
            }
        }
    }
}

static void addNewResource(string filename, unsigned short id)
{
    TCHAR filenamePath[MAX_PATH];
    TCHAR filenameName[MAX_PATH];

    TCHAR dirPath[MAX_PATH];
    TCHAR dirURL[MAX_PATH];

    if (resourcesArray[id] != NULL)
    {
        delete resourcesArray[id];
        resourcesArray[id] = NULL;
    }

    if (!levelDir.empty())
    {
        strcpy(filenamePath, filename.c_str());
        strcpy(filenameName, filename.c_str());

        strcpy(dirPath, levelDir.c_str());

        PathRemoveFileSpec(filenamePath);
        PathRemoveFileSpec(dirPath);

        PathStripPath(filenameName);

        if (filenamePath != dirPath)
        {
            TCHAR messageText[256];

            sprintf(messageText, "The resource :\n%s\nis in another directory from the level.\nDo you want copy the resource into the level directory ?", filename.c_str());

            if (MessageBox(NULL, messageText, "Copy the resource file ?", MB_TASKMODAL | MB_ICONQUESTION | MB_YESNO) == IDYES)
            {
                ifstream src;
                ofstream dest;

                src.open(filename, ios::binary);

                if (!src.good())
                    goto LBL_ADDRESLVL;

                PathCombine(dirURL, dirPath, filenameName);

                dest.open(dirURL, ios::binary);

                if (!dest.good())
                {
                    src.close();
                    goto LBL_ADDRESLVL;
                }

                dest << src.rdbuf();

                src.close();
                dest.close();

                filename = dirURL;
            }
        }

        LBL_ADDRESLVL :

        {
            TCHAR relativePath[MAX_PATH] = "";

            if (PathRelativePathTo(relativePath, dirPath, FILE_ATTRIBUTE_DIRECTORY, filename.c_str(), FILE_ATTRIBUTE_NORMAL))
                resourcesArray[id] = new string(relativePath);
            else
            {
                MessageBox(NULL, "Error ! Failed to create Relative Path !\nYou must copy the file manually then re-import it !", "Can't create Relative Path !", MB_OK | MB_ICONERROR | MB_TASKMODAL);
                resourcesArray[id] = new string(filename);
            }
        }
    }
    else
        resourcesArray[id] = new string(filename);

    #ifdef DEBUGMODE
    cout << *resourcesArray[id] << endl;
    #endif
}

static void removeResource(unsigned short id)
{
    if (resourcesArray[id] != NULL)
    {
        delete resourcesArray[id];
        resourcesArray[id] = NULL;
    }

    #ifdef DEBUGMODE
    cout << resourcesArray[id] << endl;
    #endif
}

